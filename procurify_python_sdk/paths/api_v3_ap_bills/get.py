# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from procurify_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from procurify_python_sdk.api_response import AsyncGeneratorResponse
from procurify_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401

from procurify_python_sdk.model.bill_metadata_list_simple_bill import BillMetadataListSimpleBill as BillMetadataListSimpleBillSchema

from procurify_python_sdk.type.bill_metadata_list_simple_bill import BillMetadataListSimpleBill

from ...api_client import Dictionary
from procurify_python_sdk.pydantic.bill_metadata_list_simple_bill import BillMetadataListSimpleBill as BillMetadataListSimpleBillPydantic

from . import path

# Query params
ApproverSchema = schemas.NumberSchema
ContractSchema = schemas.NumberSchema
CurrencySchema = schemas.IntSchema
DueDate0Schema = schemas.DateSchema
DueDate1Schema = schemas.DateSchema
ExcludeBillGroupIdsSchema = schemas.StrSchema
ExcludeExpenseBillsSchema = schemas.StrSchema
ExpenseSchema = schemas.StrSchema


class FormatSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "csv": "CSV",
            "json": "JSON",
        }
    
    @schemas.classproperty
    def CSV(cls):
        return cls("csv")
    
    @schemas.classproperty
    def JSON(cls):
        return cls("json")
GlPostDate0Schema = schemas.DateSchema
GlPostDate1Schema = schemas.DateSchema
GroupSchema = schemas.IntSchema
HasPaymentSchema = schemas.BoolSchema
HasPostingDateSchema = schemas.BoolSchema
IncludeBillGroupIdsSchema = schemas.StrSchema
InvoiceDate0Schema = schemas.DateSchema
InvoiceDate1Schema = schemas.DateSchema
IsExportedSchema = schemas.BoolSchema
LastExportDate0Schema = schemas.DateSchema
LastExportDate1Schema = schemas.DateSchema
LastExportUserSchema = schemas.NumberSchema
LastModifiedDatetime0Schema = schemas.DateTimeSchema
LastModifiedDatetime1Schema = schemas.DateTimeSchema
ModifiedDate0Schema = schemas.DateSchema
ModifiedDate1Schema = schemas.DateSchema
OrderBySchema = schemas.StrSchema
PageSchema = schemas.IntSchema
PageSizeSchema = schemas.IntSchema
SearchSchema = schemas.StrSchema
SubmittedDate0Schema = schemas.DateSchema
SubmittedDate1Schema = schemas.DateSchema
SyncStatusSchema = schemas.StrSchema
SyncStatusV2Schema = schemas.StrSchema


class TypeSchema(
    schemas.EnumBase,
    schemas.IntSchema
):


    class MetaOapg:
        enum_value_to_name = {
            0: "POSITIVE_0",
            1: "POSITIVE_1",
            2: "POSITIVE_2",
        }
    
    @schemas.classproperty
    def POSITIVE_0(cls):
        return cls(0)
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)
    
    @schemas.classproperty
    def POSITIVE_2(cls):
        return cls(2)
UserSchema = schemas.IntSchema
VendorSchema = schemas.IntSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'approver': typing.Union[ApproverSchema, decimal.Decimal, int, float, ],
        'contract': typing.Union[ContractSchema, decimal.Decimal, int, float, ],
        'currency': typing.Union[CurrencySchema, decimal.Decimal, int, ],
        'due_date_0': typing.Union[DueDate0Schema, str, date, ],
        'due_date_1': typing.Union[DueDate1Schema, str, date, ],
        'exclude_bill_group_ids': typing.Union[ExcludeBillGroupIdsSchema, str, ],
        'exclude_expense_bills': typing.Union[ExcludeExpenseBillsSchema, str, ],
        'expense': typing.Union[ExpenseSchema, str, ],
        'format': typing.Union[FormatSchema, str, ],
        'gl_post_date_0': typing.Union[GlPostDate0Schema, str, date, ],
        'gl_post_date_1': typing.Union[GlPostDate1Schema, str, date, ],
        'group': typing.Union[GroupSchema, decimal.Decimal, int, ],
        'has_payment': typing.Union[HasPaymentSchema, bool, ],
        'has_posting_date': typing.Union[HasPostingDateSchema, bool, ],
        'include_bill_group_ids': typing.Union[IncludeBillGroupIdsSchema, str, ],
        'invoice_date_0': typing.Union[InvoiceDate0Schema, str, date, ],
        'invoice_date_1': typing.Union[InvoiceDate1Schema, str, date, ],
        'is_exported': typing.Union[IsExportedSchema, bool, ],
        'last_export_date_0': typing.Union[LastExportDate0Schema, str, date, ],
        'last_export_date_1': typing.Union[LastExportDate1Schema, str, date, ],
        'last_export_user': typing.Union[LastExportUserSchema, decimal.Decimal, int, float, ],
        'last_modified_datetime_0': typing.Union[LastModifiedDatetime0Schema, str, datetime, ],
        'last_modified_datetime_1': typing.Union[LastModifiedDatetime1Schema, str, datetime, ],
        'modified_date_0': typing.Union[ModifiedDate0Schema, str, date, ],
        'modified_date_1': typing.Union[ModifiedDate1Schema, str, date, ],
        'order_by': typing.Union[OrderBySchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'page_size': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        'search': typing.Union[SearchSchema, str, ],
        'submitted_date_0': typing.Union[SubmittedDate0Schema, str, date, ],
        'submitted_date_1': typing.Union[SubmittedDate1Schema, str, date, ],
        'sync_status': typing.Union[SyncStatusSchema, str, ],
        'sync_status_v2': typing.Union[SyncStatusV2Schema, str, ],
        'type': typing.Union[TypeSchema, decimal.Decimal, int, ],
        'user': typing.Union[UserSchema, decimal.Decimal, int, ],
        'vendor': typing.Union[VendorSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_approver = api_client.QueryParameter(
    name="approver",
    style=api_client.ParameterStyle.FORM,
    schema=ApproverSchema,
    explode=True,
)
request_query_contract = api_client.QueryParameter(
    name="contract",
    style=api_client.ParameterStyle.FORM,
    schema=ContractSchema,
    explode=True,
)
request_query_currency = api_client.QueryParameter(
    name="currency",
    style=api_client.ParameterStyle.FORM,
    schema=CurrencySchema,
    explode=True,
)
request_query_due_date_0 = api_client.QueryParameter(
    name="due_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=DueDate0Schema,
    explode=True,
)
request_query_due_date_1 = api_client.QueryParameter(
    name="due_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=DueDate1Schema,
    explode=True,
)
request_query_exclude_bill_group_ids = api_client.QueryParameter(
    name="exclude_bill_group_ids",
    style=api_client.ParameterStyle.FORM,
    schema=ExcludeBillGroupIdsSchema,
    explode=True,
)
request_query_exclude_expense_bills = api_client.QueryParameter(
    name="exclude_expense_bills",
    style=api_client.ParameterStyle.FORM,
    schema=ExcludeExpenseBillsSchema,
    explode=True,
)
request_query_expense = api_client.QueryParameter(
    name="expense",
    style=api_client.ParameterStyle.FORM,
    schema=ExpenseSchema,
    explode=True,
)
request_query_format = api_client.QueryParameter(
    name="format",
    style=api_client.ParameterStyle.FORM,
    schema=FormatSchema,
    explode=True,
)
request_query_gl_post_date_0 = api_client.QueryParameter(
    name="gl_post_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=GlPostDate0Schema,
    explode=True,
)
request_query_gl_post_date_1 = api_client.QueryParameter(
    name="gl_post_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=GlPostDate1Schema,
    explode=True,
)
request_query_group = api_client.QueryParameter(
    name="group",
    style=api_client.ParameterStyle.FORM,
    schema=GroupSchema,
    explode=True,
)
request_query_has_payment = api_client.QueryParameter(
    name="has_payment",
    style=api_client.ParameterStyle.FORM,
    schema=HasPaymentSchema,
    explode=True,
)
request_query_has_posting_date = api_client.QueryParameter(
    name="has_posting_date",
    style=api_client.ParameterStyle.FORM,
    schema=HasPostingDateSchema,
    explode=True,
)
request_query_include_bill_group_ids = api_client.QueryParameter(
    name="include_bill_group_ids",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeBillGroupIdsSchema,
    explode=True,
)
request_query_invoice_date_0 = api_client.QueryParameter(
    name="invoice_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=InvoiceDate0Schema,
    explode=True,
)
request_query_invoice_date_1 = api_client.QueryParameter(
    name="invoice_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=InvoiceDate1Schema,
    explode=True,
)
request_query_is_exported = api_client.QueryParameter(
    name="is_exported",
    style=api_client.ParameterStyle.FORM,
    schema=IsExportedSchema,
    explode=True,
)
request_query_last_export_date_0 = api_client.QueryParameter(
    name="last_export_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=LastExportDate0Schema,
    explode=True,
)
request_query_last_export_date_1 = api_client.QueryParameter(
    name="last_export_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=LastExportDate1Schema,
    explode=True,
)
request_query_last_export_user = api_client.QueryParameter(
    name="last_export_user",
    style=api_client.ParameterStyle.FORM,
    schema=LastExportUserSchema,
    explode=True,
)
request_query_last_modified_datetime_0 = api_client.QueryParameter(
    name="last_modified_datetime_0",
    style=api_client.ParameterStyle.FORM,
    schema=LastModifiedDatetime0Schema,
    explode=True,
)
request_query_last_modified_datetime_1 = api_client.QueryParameter(
    name="last_modified_datetime_1",
    style=api_client.ParameterStyle.FORM,
    schema=LastModifiedDatetime1Schema,
    explode=True,
)
request_query_modified_date_0 = api_client.QueryParameter(
    name="modified_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=ModifiedDate0Schema,
    explode=True,
)
request_query_modified_date_1 = api_client.QueryParameter(
    name="modified_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=ModifiedDate1Schema,
    explode=True,
)
request_query_order_by = api_client.QueryParameter(
    name="order_by",
    style=api_client.ParameterStyle.FORM,
    schema=OrderBySchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="page_size",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
request_query_submitted_date_0 = api_client.QueryParameter(
    name="submitted_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=SubmittedDate0Schema,
    explode=True,
)
request_query_submitted_date_1 = api_client.QueryParameter(
    name="submitted_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=SubmittedDate1Schema,
    explode=True,
)
request_query_sync_status = api_client.QueryParameter(
    name="sync_status",
    style=api_client.ParameterStyle.FORM,
    schema=SyncStatusSchema,
    explode=True,
)
request_query_sync_status_v2 = api_client.QueryParameter(
    name="sync_status_v2",
    style=api_client.ParameterStyle.FORM,
    schema=SyncStatusV2Schema,
    explode=True,
)
request_query_type = api_client.QueryParameter(
    name="type",
    style=api_client.ParameterStyle.FORM,
    schema=TypeSchema,
    explode=True,
)
request_query_user = api_client.QueryParameter(
    name="user",
    style=api_client.ParameterStyle.FORM,
    schema=UserSchema,
    explode=True,
)
request_query_vendor = api_client.QueryParameter(
    name="vendor",
    style=api_client.ParameterStyle.FORM,
    schema=VendorSchema,
    explode=True,
)
_auth = [
    'BasicAuthentication',
    'M2MAuthentication',
    'RemoteAuthentication',
    'cookieAuth',
    'tokenAuth',
]
SchemaFor200ResponseBodyApplicationJson = BillMetadataListSimpleBillSchema
SchemaFor200ResponseBodyTextCsv = BillMetadataListSimpleBillSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: BillMetadataListSimpleBill


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: BillMetadataListSimpleBill


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
    'text/csv',
)


class BaseApi(api_client.Api):

    def _bills_list_mapped_args(
        self,
        approver: typing.Optional[typing.Union[int, float]] = None,
        contract: typing.Optional[typing.Union[int, float]] = None,
        currency: typing.Optional[int] = None,
        due_date_0: typing.Optional[date] = None,
        due_date_1: typing.Optional[date] = None,
        exclude_bill_group_ids: typing.Optional[str] = None,
        exclude_expense_bills: typing.Optional[str] = None,
        expense: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        gl_post_date_0: typing.Optional[date] = None,
        gl_post_date_1: typing.Optional[date] = None,
        group: typing.Optional[int] = None,
        has_payment: typing.Optional[bool] = None,
        has_posting_date: typing.Optional[bool] = None,
        include_bill_group_ids: typing.Optional[str] = None,
        invoice_date_0: typing.Optional[date] = None,
        invoice_date_1: typing.Optional[date] = None,
        is_exported: typing.Optional[bool] = None,
        last_export_date_0: typing.Optional[date] = None,
        last_export_date_1: typing.Optional[date] = None,
        last_export_user: typing.Optional[typing.Union[int, float]] = None,
        last_modified_datetime_0: typing.Optional[datetime] = None,
        last_modified_datetime_1: typing.Optional[datetime] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        submitted_date_0: typing.Optional[date] = None,
        submitted_date_1: typing.Optional[date] = None,
        sync_status: typing.Optional[str] = None,
        sync_status_v2: typing.Optional[str] = None,
        type: typing.Optional[int] = None,
        user: typing.Optional[int] = None,
        vendor: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if approver is not None:
            _query_params["approver"] = approver
        if contract is not None:
            _query_params["contract"] = contract
        if currency is not None:
            _query_params["currency"] = currency
        if due_date_0 is not None:
            _query_params["due_date_0"] = due_date_0
        if due_date_1 is not None:
            _query_params["due_date_1"] = due_date_1
        if exclude_bill_group_ids is not None:
            _query_params["exclude_bill_group_ids"] = exclude_bill_group_ids
        if exclude_expense_bills is not None:
            _query_params["exclude_expense_bills"] = exclude_expense_bills
        if expense is not None:
            _query_params["expense"] = expense
        if format is not None:
            _query_params["format"] = format
        if gl_post_date_0 is not None:
            _query_params["gl_post_date_0"] = gl_post_date_0
        if gl_post_date_1 is not None:
            _query_params["gl_post_date_1"] = gl_post_date_1
        if group is not None:
            _query_params["group"] = group
        if has_payment is not None:
            _query_params["has_payment"] = has_payment
        if has_posting_date is not None:
            _query_params["has_posting_date"] = has_posting_date
        if include_bill_group_ids is not None:
            _query_params["include_bill_group_ids"] = include_bill_group_ids
        if invoice_date_0 is not None:
            _query_params["invoice_date_0"] = invoice_date_0
        if invoice_date_1 is not None:
            _query_params["invoice_date_1"] = invoice_date_1
        if is_exported is not None:
            _query_params["is_exported"] = is_exported
        if last_export_date_0 is not None:
            _query_params["last_export_date_0"] = last_export_date_0
        if last_export_date_1 is not None:
            _query_params["last_export_date_1"] = last_export_date_1
        if last_export_user is not None:
            _query_params["last_export_user"] = last_export_user
        if last_modified_datetime_0 is not None:
            _query_params["last_modified_datetime_0"] = last_modified_datetime_0
        if last_modified_datetime_1 is not None:
            _query_params["last_modified_datetime_1"] = last_modified_datetime_1
        if modified_date_0 is not None:
            _query_params["modified_date_0"] = modified_date_0
        if modified_date_1 is not None:
            _query_params["modified_date_1"] = modified_date_1
        if order_by is not None:
            _query_params["order_by"] = order_by
        if page is not None:
            _query_params["page"] = page
        if page_size is not None:
            _query_params["page_size"] = page_size
        if search is not None:
            _query_params["search"] = search
        if submitted_date_0 is not None:
            _query_params["submitted_date_0"] = submitted_date_0
        if submitted_date_1 is not None:
            _query_params["submitted_date_1"] = submitted_date_1
        if sync_status is not None:
            _query_params["sync_status"] = sync_status
        if sync_status_v2 is not None:
            _query_params["sync_status_v2"] = sync_status_v2
        if type is not None:
            _query_params["type"] = type
        if user is not None:
            _query_params["user"] = user
        if vendor is not None:
            _query_params["vendor"] = vendor
        args.query = _query_params
        return args

    async def _abills_list_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get Bills
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_approver,
            request_query_contract,
            request_query_currency,
            request_query_due_date_0,
            request_query_due_date_1,
            request_query_exclude_bill_group_ids,
            request_query_exclude_expense_bills,
            request_query_expense,
            request_query_format,
            request_query_gl_post_date_0,
            request_query_gl_post_date_1,
            request_query_group,
            request_query_has_payment,
            request_query_has_posting_date,
            request_query_include_bill_group_ids,
            request_query_invoice_date_0,
            request_query_invoice_date_1,
            request_query_is_exported,
            request_query_last_export_date_0,
            request_query_last_export_date_1,
            request_query_last_export_user,
            request_query_last_modified_datetime_0,
            request_query_last_modified_datetime_1,
            request_query_modified_date_0,
            request_query_modified_date_1,
            request_query_order_by,
            request_query_page,
            request_query_page_size,
            request_query_search,
            request_query_submitted_date_0,
            request_query_submitted_date_1,
            request_query_sync_status,
            request_query_sync_status_v2,
            request_query_type,
            request_query_user,
            request_query_vendor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v3/ap/bills',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _bills_list_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get Bills
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_approver,
            request_query_contract,
            request_query_currency,
            request_query_due_date_0,
            request_query_due_date_1,
            request_query_exclude_bill_group_ids,
            request_query_exclude_expense_bills,
            request_query_expense,
            request_query_format,
            request_query_gl_post_date_0,
            request_query_gl_post_date_1,
            request_query_group,
            request_query_has_payment,
            request_query_has_posting_date,
            request_query_include_bill_group_ids,
            request_query_invoice_date_0,
            request_query_invoice_date_1,
            request_query_is_exported,
            request_query_last_export_date_0,
            request_query_last_export_date_1,
            request_query_last_export_user,
            request_query_last_modified_datetime_0,
            request_query_last_modified_datetime_1,
            request_query_modified_date_0,
            request_query_modified_date_1,
            request_query_order_by,
            request_query_page,
            request_query_page_size,
            request_query_search,
            request_query_submitted_date_0,
            request_query_submitted_date_1,
            request_query_sync_status,
            request_query_sync_status_v2,
            request_query_type,
            request_query_user,
            request_query_vendor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v3/ap/bills',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class BillsListRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def abills_list(
        self,
        approver: typing.Optional[typing.Union[int, float]] = None,
        contract: typing.Optional[typing.Union[int, float]] = None,
        currency: typing.Optional[int] = None,
        due_date_0: typing.Optional[date] = None,
        due_date_1: typing.Optional[date] = None,
        exclude_bill_group_ids: typing.Optional[str] = None,
        exclude_expense_bills: typing.Optional[str] = None,
        expense: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        gl_post_date_0: typing.Optional[date] = None,
        gl_post_date_1: typing.Optional[date] = None,
        group: typing.Optional[int] = None,
        has_payment: typing.Optional[bool] = None,
        has_posting_date: typing.Optional[bool] = None,
        include_bill_group_ids: typing.Optional[str] = None,
        invoice_date_0: typing.Optional[date] = None,
        invoice_date_1: typing.Optional[date] = None,
        is_exported: typing.Optional[bool] = None,
        last_export_date_0: typing.Optional[date] = None,
        last_export_date_1: typing.Optional[date] = None,
        last_export_user: typing.Optional[typing.Union[int, float]] = None,
        last_modified_datetime_0: typing.Optional[datetime] = None,
        last_modified_datetime_1: typing.Optional[datetime] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        submitted_date_0: typing.Optional[date] = None,
        submitted_date_1: typing.Optional[date] = None,
        sync_status: typing.Optional[str] = None,
        sync_status_v2: typing.Optional[str] = None,
        type: typing.Optional[int] = None,
        user: typing.Optional[int] = None,
        vendor: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._bills_list_mapped_args(
            approver=approver,
            contract=contract,
            currency=currency,
            due_date_0=due_date_0,
            due_date_1=due_date_1,
            exclude_bill_group_ids=exclude_bill_group_ids,
            exclude_expense_bills=exclude_expense_bills,
            expense=expense,
            format=format,
            gl_post_date_0=gl_post_date_0,
            gl_post_date_1=gl_post_date_1,
            group=group,
            has_payment=has_payment,
            has_posting_date=has_posting_date,
            include_bill_group_ids=include_bill_group_ids,
            invoice_date_0=invoice_date_0,
            invoice_date_1=invoice_date_1,
            is_exported=is_exported,
            last_export_date_0=last_export_date_0,
            last_export_date_1=last_export_date_1,
            last_export_user=last_export_user,
            last_modified_datetime_0=last_modified_datetime_0,
            last_modified_datetime_1=last_modified_datetime_1,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            search=search,
            submitted_date_0=submitted_date_0,
            submitted_date_1=submitted_date_1,
            sync_status=sync_status,
            sync_status_v2=sync_status_v2,
            type=type,
            user=user,
            vendor=vendor,
        )
        return await self._abills_list_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def bills_list(
        self,
        approver: typing.Optional[typing.Union[int, float]] = None,
        contract: typing.Optional[typing.Union[int, float]] = None,
        currency: typing.Optional[int] = None,
        due_date_0: typing.Optional[date] = None,
        due_date_1: typing.Optional[date] = None,
        exclude_bill_group_ids: typing.Optional[str] = None,
        exclude_expense_bills: typing.Optional[str] = None,
        expense: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        gl_post_date_0: typing.Optional[date] = None,
        gl_post_date_1: typing.Optional[date] = None,
        group: typing.Optional[int] = None,
        has_payment: typing.Optional[bool] = None,
        has_posting_date: typing.Optional[bool] = None,
        include_bill_group_ids: typing.Optional[str] = None,
        invoice_date_0: typing.Optional[date] = None,
        invoice_date_1: typing.Optional[date] = None,
        is_exported: typing.Optional[bool] = None,
        last_export_date_0: typing.Optional[date] = None,
        last_export_date_1: typing.Optional[date] = None,
        last_export_user: typing.Optional[typing.Union[int, float]] = None,
        last_modified_datetime_0: typing.Optional[datetime] = None,
        last_modified_datetime_1: typing.Optional[datetime] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        submitted_date_0: typing.Optional[date] = None,
        submitted_date_1: typing.Optional[date] = None,
        sync_status: typing.Optional[str] = None,
        sync_status_v2: typing.Optional[str] = None,
        type: typing.Optional[int] = None,
        user: typing.Optional[int] = None,
        vendor: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._bills_list_mapped_args(
            approver=approver,
            contract=contract,
            currency=currency,
            due_date_0=due_date_0,
            due_date_1=due_date_1,
            exclude_bill_group_ids=exclude_bill_group_ids,
            exclude_expense_bills=exclude_expense_bills,
            expense=expense,
            format=format,
            gl_post_date_0=gl_post_date_0,
            gl_post_date_1=gl_post_date_1,
            group=group,
            has_payment=has_payment,
            has_posting_date=has_posting_date,
            include_bill_group_ids=include_bill_group_ids,
            invoice_date_0=invoice_date_0,
            invoice_date_1=invoice_date_1,
            is_exported=is_exported,
            last_export_date_0=last_export_date_0,
            last_export_date_1=last_export_date_1,
            last_export_user=last_export_user,
            last_modified_datetime_0=last_modified_datetime_0,
            last_modified_datetime_1=last_modified_datetime_1,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            search=search,
            submitted_date_0=submitted_date_0,
            submitted_date_1=submitted_date_1,
            sync_status=sync_status,
            sync_status_v2=sync_status_v2,
            type=type,
            user=user,
            vendor=vendor,
        )
        return self._bills_list_oapg(
            query_params=args.query,
        )

class BillsList(BaseApi):

    async def abills_list(
        self,
        approver: typing.Optional[typing.Union[int, float]] = None,
        contract: typing.Optional[typing.Union[int, float]] = None,
        currency: typing.Optional[int] = None,
        due_date_0: typing.Optional[date] = None,
        due_date_1: typing.Optional[date] = None,
        exclude_bill_group_ids: typing.Optional[str] = None,
        exclude_expense_bills: typing.Optional[str] = None,
        expense: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        gl_post_date_0: typing.Optional[date] = None,
        gl_post_date_1: typing.Optional[date] = None,
        group: typing.Optional[int] = None,
        has_payment: typing.Optional[bool] = None,
        has_posting_date: typing.Optional[bool] = None,
        include_bill_group_ids: typing.Optional[str] = None,
        invoice_date_0: typing.Optional[date] = None,
        invoice_date_1: typing.Optional[date] = None,
        is_exported: typing.Optional[bool] = None,
        last_export_date_0: typing.Optional[date] = None,
        last_export_date_1: typing.Optional[date] = None,
        last_export_user: typing.Optional[typing.Union[int, float]] = None,
        last_modified_datetime_0: typing.Optional[datetime] = None,
        last_modified_datetime_1: typing.Optional[datetime] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        submitted_date_0: typing.Optional[date] = None,
        submitted_date_1: typing.Optional[date] = None,
        sync_status: typing.Optional[str] = None,
        sync_status_v2: typing.Optional[str] = None,
        type: typing.Optional[int] = None,
        user: typing.Optional[int] = None,
        vendor: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> BillMetadataListSimpleBillPydantic:
        raw_response = await self.raw.abills_list(
            approver=approver,
            contract=contract,
            currency=currency,
            due_date_0=due_date_0,
            due_date_1=due_date_1,
            exclude_bill_group_ids=exclude_bill_group_ids,
            exclude_expense_bills=exclude_expense_bills,
            expense=expense,
            format=format,
            gl_post_date_0=gl_post_date_0,
            gl_post_date_1=gl_post_date_1,
            group=group,
            has_payment=has_payment,
            has_posting_date=has_posting_date,
            include_bill_group_ids=include_bill_group_ids,
            invoice_date_0=invoice_date_0,
            invoice_date_1=invoice_date_1,
            is_exported=is_exported,
            last_export_date_0=last_export_date_0,
            last_export_date_1=last_export_date_1,
            last_export_user=last_export_user,
            last_modified_datetime_0=last_modified_datetime_0,
            last_modified_datetime_1=last_modified_datetime_1,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            search=search,
            submitted_date_0=submitted_date_0,
            submitted_date_1=submitted_date_1,
            sync_status=sync_status,
            sync_status_v2=sync_status_v2,
            type=type,
            user=user,
            vendor=vendor,
            **kwargs,
        )
        if validate:
            return BillMetadataListSimpleBillPydantic(**raw_response.body)
        return api_client.construct_model_instance(BillMetadataListSimpleBillPydantic, raw_response.body)
    
    
    def bills_list(
        self,
        approver: typing.Optional[typing.Union[int, float]] = None,
        contract: typing.Optional[typing.Union[int, float]] = None,
        currency: typing.Optional[int] = None,
        due_date_0: typing.Optional[date] = None,
        due_date_1: typing.Optional[date] = None,
        exclude_bill_group_ids: typing.Optional[str] = None,
        exclude_expense_bills: typing.Optional[str] = None,
        expense: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        gl_post_date_0: typing.Optional[date] = None,
        gl_post_date_1: typing.Optional[date] = None,
        group: typing.Optional[int] = None,
        has_payment: typing.Optional[bool] = None,
        has_posting_date: typing.Optional[bool] = None,
        include_bill_group_ids: typing.Optional[str] = None,
        invoice_date_0: typing.Optional[date] = None,
        invoice_date_1: typing.Optional[date] = None,
        is_exported: typing.Optional[bool] = None,
        last_export_date_0: typing.Optional[date] = None,
        last_export_date_1: typing.Optional[date] = None,
        last_export_user: typing.Optional[typing.Union[int, float]] = None,
        last_modified_datetime_0: typing.Optional[datetime] = None,
        last_modified_datetime_1: typing.Optional[datetime] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        submitted_date_0: typing.Optional[date] = None,
        submitted_date_1: typing.Optional[date] = None,
        sync_status: typing.Optional[str] = None,
        sync_status_v2: typing.Optional[str] = None,
        type: typing.Optional[int] = None,
        user: typing.Optional[int] = None,
        vendor: typing.Optional[int] = None,
        validate: bool = False,
    ) -> BillMetadataListSimpleBillPydantic:
        raw_response = self.raw.bills_list(
            approver=approver,
            contract=contract,
            currency=currency,
            due_date_0=due_date_0,
            due_date_1=due_date_1,
            exclude_bill_group_ids=exclude_bill_group_ids,
            exclude_expense_bills=exclude_expense_bills,
            expense=expense,
            format=format,
            gl_post_date_0=gl_post_date_0,
            gl_post_date_1=gl_post_date_1,
            group=group,
            has_payment=has_payment,
            has_posting_date=has_posting_date,
            include_bill_group_ids=include_bill_group_ids,
            invoice_date_0=invoice_date_0,
            invoice_date_1=invoice_date_1,
            is_exported=is_exported,
            last_export_date_0=last_export_date_0,
            last_export_date_1=last_export_date_1,
            last_export_user=last_export_user,
            last_modified_datetime_0=last_modified_datetime_0,
            last_modified_datetime_1=last_modified_datetime_1,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            search=search,
            submitted_date_0=submitted_date_0,
            submitted_date_1=submitted_date_1,
            sync_status=sync_status,
            sync_status_v2=sync_status_v2,
            type=type,
            user=user,
            vendor=vendor,
        )
        if validate:
            return BillMetadataListSimpleBillPydantic(**raw_response.body)
        return api_client.construct_model_instance(BillMetadataListSimpleBillPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        approver: typing.Optional[typing.Union[int, float]] = None,
        contract: typing.Optional[typing.Union[int, float]] = None,
        currency: typing.Optional[int] = None,
        due_date_0: typing.Optional[date] = None,
        due_date_1: typing.Optional[date] = None,
        exclude_bill_group_ids: typing.Optional[str] = None,
        exclude_expense_bills: typing.Optional[str] = None,
        expense: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        gl_post_date_0: typing.Optional[date] = None,
        gl_post_date_1: typing.Optional[date] = None,
        group: typing.Optional[int] = None,
        has_payment: typing.Optional[bool] = None,
        has_posting_date: typing.Optional[bool] = None,
        include_bill_group_ids: typing.Optional[str] = None,
        invoice_date_0: typing.Optional[date] = None,
        invoice_date_1: typing.Optional[date] = None,
        is_exported: typing.Optional[bool] = None,
        last_export_date_0: typing.Optional[date] = None,
        last_export_date_1: typing.Optional[date] = None,
        last_export_user: typing.Optional[typing.Union[int, float]] = None,
        last_modified_datetime_0: typing.Optional[datetime] = None,
        last_modified_datetime_1: typing.Optional[datetime] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        submitted_date_0: typing.Optional[date] = None,
        submitted_date_1: typing.Optional[date] = None,
        sync_status: typing.Optional[str] = None,
        sync_status_v2: typing.Optional[str] = None,
        type: typing.Optional[int] = None,
        user: typing.Optional[int] = None,
        vendor: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._bills_list_mapped_args(
            approver=approver,
            contract=contract,
            currency=currency,
            due_date_0=due_date_0,
            due_date_1=due_date_1,
            exclude_bill_group_ids=exclude_bill_group_ids,
            exclude_expense_bills=exclude_expense_bills,
            expense=expense,
            format=format,
            gl_post_date_0=gl_post_date_0,
            gl_post_date_1=gl_post_date_1,
            group=group,
            has_payment=has_payment,
            has_posting_date=has_posting_date,
            include_bill_group_ids=include_bill_group_ids,
            invoice_date_0=invoice_date_0,
            invoice_date_1=invoice_date_1,
            is_exported=is_exported,
            last_export_date_0=last_export_date_0,
            last_export_date_1=last_export_date_1,
            last_export_user=last_export_user,
            last_modified_datetime_0=last_modified_datetime_0,
            last_modified_datetime_1=last_modified_datetime_1,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            search=search,
            submitted_date_0=submitted_date_0,
            submitted_date_1=submitted_date_1,
            sync_status=sync_status,
            sync_status_v2=sync_status_v2,
            type=type,
            user=user,
            vendor=vendor,
        )
        return await self._abills_list_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        approver: typing.Optional[typing.Union[int, float]] = None,
        contract: typing.Optional[typing.Union[int, float]] = None,
        currency: typing.Optional[int] = None,
        due_date_0: typing.Optional[date] = None,
        due_date_1: typing.Optional[date] = None,
        exclude_bill_group_ids: typing.Optional[str] = None,
        exclude_expense_bills: typing.Optional[str] = None,
        expense: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        gl_post_date_0: typing.Optional[date] = None,
        gl_post_date_1: typing.Optional[date] = None,
        group: typing.Optional[int] = None,
        has_payment: typing.Optional[bool] = None,
        has_posting_date: typing.Optional[bool] = None,
        include_bill_group_ids: typing.Optional[str] = None,
        invoice_date_0: typing.Optional[date] = None,
        invoice_date_1: typing.Optional[date] = None,
        is_exported: typing.Optional[bool] = None,
        last_export_date_0: typing.Optional[date] = None,
        last_export_date_1: typing.Optional[date] = None,
        last_export_user: typing.Optional[typing.Union[int, float]] = None,
        last_modified_datetime_0: typing.Optional[datetime] = None,
        last_modified_datetime_1: typing.Optional[datetime] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        submitted_date_0: typing.Optional[date] = None,
        submitted_date_1: typing.Optional[date] = None,
        sync_status: typing.Optional[str] = None,
        sync_status_v2: typing.Optional[str] = None,
        type: typing.Optional[int] = None,
        user: typing.Optional[int] = None,
        vendor: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._bills_list_mapped_args(
            approver=approver,
            contract=contract,
            currency=currency,
            due_date_0=due_date_0,
            due_date_1=due_date_1,
            exclude_bill_group_ids=exclude_bill_group_ids,
            exclude_expense_bills=exclude_expense_bills,
            expense=expense,
            format=format,
            gl_post_date_0=gl_post_date_0,
            gl_post_date_1=gl_post_date_1,
            group=group,
            has_payment=has_payment,
            has_posting_date=has_posting_date,
            include_bill_group_ids=include_bill_group_ids,
            invoice_date_0=invoice_date_0,
            invoice_date_1=invoice_date_1,
            is_exported=is_exported,
            last_export_date_0=last_export_date_0,
            last_export_date_1=last_export_date_1,
            last_export_user=last_export_user,
            last_modified_datetime_0=last_modified_datetime_0,
            last_modified_datetime_1=last_modified_datetime_1,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            search=search,
            submitted_date_0=submitted_date_0,
            submitted_date_1=submitted_date_1,
            sync_status=sync_status,
            sync_status_v2=sync_status_v2,
            type=type,
            user=user,
            vendor=vendor,
        )
        return self._bills_list_oapg(
            query_params=args.query,
        )

