# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from procurify_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from procurify_python_sdk.api_response import AsyncGeneratorResponse
from procurify_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401

from procurify_python_sdk.model.item_metadata_item_read import ItemMetadataItemRead as ItemMetadataItemReadSchema

from procurify_python_sdk.type.item_metadata_item_read import ItemMetadataItemRead

from ...api_client import Dictionary
from procurify_python_sdk.pydantic.item_metadata_item_read import ItemMetadataItemRead as ItemMetadataItemReadPydantic

from . import path

# Query params
BillSchema = schemas.IntSchema
BillUuidSchema = schemas.UUIDSchema
BilledSchema = schemas.BoolSchema
BudgetSchema = schemas.IntSchema
CreatedAt0Schema = schemas.DateSchema
CreatedAt1Schema = schemas.DateSchema
DepartmentSchema = schemas.NumberSchema
ExcludeSchema = schemas.StrSchema


class FormatSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "csv": "CSV",
            "json": "JSON",
        }
    
    @schemas.classproperty
    def CSV(cls):
        return cls("csv")
    
    @schemas.classproperty
    def JSON(cls):
        return cls("json")
LocationSchema = schemas.NumberSchema
OrderBySchema = schemas.StrSchema
PageSchema = schemas.IntSchema
PageSizeSchema = schemas.IntSchema
ReceivedOn0Schema = schemas.DateSchema
ReceivedOn1Schema = schemas.DateSchema
ReimburseSchema = schemas.BoolSchema
RequesterSchema = schemas.NumberSchema
SearchSchema = schemas.StrSchema
VendorSchema = schemas.IntSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'bill': typing.Union[BillSchema, decimal.Decimal, int, ],
        'bill_uuid': typing.Union[BillUuidSchema, str, uuid.UUID, ],
        'billed': typing.Union[BilledSchema, bool, ],
        'budget': typing.Union[BudgetSchema, decimal.Decimal, int, ],
        'created_at_0': typing.Union[CreatedAt0Schema, str, date, ],
        'created_at_1': typing.Union[CreatedAt1Schema, str, date, ],
        'department': typing.Union[DepartmentSchema, decimal.Decimal, int, float, ],
        'exclude': typing.Union[ExcludeSchema, str, ],
        'format': typing.Union[FormatSchema, str, ],
        'location': typing.Union[LocationSchema, decimal.Decimal, int, float, ],
        'order_by': typing.Union[OrderBySchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'page_size': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        'received_on_0': typing.Union[ReceivedOn0Schema, str, date, ],
        'received_on_1': typing.Union[ReceivedOn1Schema, str, date, ],
        'reimburse': typing.Union[ReimburseSchema, bool, ],
        'requester': typing.Union[RequesterSchema, decimal.Decimal, int, float, ],
        'search': typing.Union[SearchSchema, str, ],
        'vendor': typing.Union[VendorSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_bill = api_client.QueryParameter(
    name="bill",
    style=api_client.ParameterStyle.FORM,
    schema=BillSchema,
    explode=True,
)
request_query_bill_uuid = api_client.QueryParameter(
    name="bill_uuid",
    style=api_client.ParameterStyle.FORM,
    schema=BillUuidSchema,
    explode=True,
)
request_query_billed = api_client.QueryParameter(
    name="billed",
    style=api_client.ParameterStyle.FORM,
    schema=BilledSchema,
    explode=True,
)
request_query_budget = api_client.QueryParameter(
    name="budget",
    style=api_client.ParameterStyle.FORM,
    schema=BudgetSchema,
    explode=True,
)
request_query_created_at_0 = api_client.QueryParameter(
    name="created_at_0",
    style=api_client.ParameterStyle.FORM,
    schema=CreatedAt0Schema,
    explode=True,
)
request_query_created_at_1 = api_client.QueryParameter(
    name="created_at_1",
    style=api_client.ParameterStyle.FORM,
    schema=CreatedAt1Schema,
    explode=True,
)
request_query_department = api_client.QueryParameter(
    name="department",
    style=api_client.ParameterStyle.FORM,
    schema=DepartmentSchema,
    explode=True,
)
request_query_exclude = api_client.QueryParameter(
    name="exclude",
    style=api_client.ParameterStyle.FORM,
    schema=ExcludeSchema,
    explode=True,
)
request_query_format = api_client.QueryParameter(
    name="format",
    style=api_client.ParameterStyle.FORM,
    schema=FormatSchema,
    explode=True,
)
request_query_location = api_client.QueryParameter(
    name="location",
    style=api_client.ParameterStyle.FORM,
    schema=LocationSchema,
    explode=True,
)
request_query_order_by = api_client.QueryParameter(
    name="order_by",
    style=api_client.ParameterStyle.FORM,
    schema=OrderBySchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="page_size",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_received_on_0 = api_client.QueryParameter(
    name="received_on_0",
    style=api_client.ParameterStyle.FORM,
    schema=ReceivedOn0Schema,
    explode=True,
)
request_query_received_on_1 = api_client.QueryParameter(
    name="received_on_1",
    style=api_client.ParameterStyle.FORM,
    schema=ReceivedOn1Schema,
    explode=True,
)
request_query_reimburse = api_client.QueryParameter(
    name="reimburse",
    style=api_client.ParameterStyle.FORM,
    schema=ReimburseSchema,
    explode=True,
)
request_query_requester = api_client.QueryParameter(
    name="requester",
    style=api_client.ParameterStyle.FORM,
    schema=RequesterSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
request_query_vendor = api_client.QueryParameter(
    name="vendor",
    style=api_client.ParameterStyle.FORM,
    schema=VendorSchema,
    explode=True,
)
_auth = [
    'BasicAuthentication',
    'M2MAuthentication',
    'RemoteAuthentication',
    'cookieAuth',
    'tokenAuth',
]
SchemaFor200ResponseBodyApplicationJson = ItemMetadataItemReadSchema
SchemaFor200ResponseBodyTextCsv = ItemMetadataItemReadSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: ItemMetadataItemRead


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: ItemMetadataItemRead


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
    'text/csv',
)


class BaseApi(api_client.Api):

    def _items_get_mapped_args(
        self,
        bill: typing.Optional[int] = None,
        bill_uuid: typing.Optional[str] = None,
        billed: typing.Optional[bool] = None,
        budget: typing.Optional[int] = None,
        created_at_0: typing.Optional[date] = None,
        created_at_1: typing.Optional[date] = None,
        department: typing.Optional[typing.Union[int, float]] = None,
        exclude: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        location: typing.Optional[typing.Union[int, float]] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        received_on_0: typing.Optional[date] = None,
        received_on_1: typing.Optional[date] = None,
        reimburse: typing.Optional[bool] = None,
        requester: typing.Optional[typing.Union[int, float]] = None,
        search: typing.Optional[str] = None,
        vendor: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if bill is not None:
            _query_params["bill"] = bill
        if bill_uuid is not None:
            _query_params["bill_uuid"] = bill_uuid
        if billed is not None:
            _query_params["billed"] = billed
        if budget is not None:
            _query_params["budget"] = budget
        if created_at_0 is not None:
            _query_params["created_at_0"] = created_at_0
        if created_at_1 is not None:
            _query_params["created_at_1"] = created_at_1
        if department is not None:
            _query_params["department"] = department
        if exclude is not None:
            _query_params["exclude"] = exclude
        if format is not None:
            _query_params["format"] = format
        if location is not None:
            _query_params["location"] = location
        if order_by is not None:
            _query_params["order_by"] = order_by
        if page is not None:
            _query_params["page"] = page
        if page_size is not None:
            _query_params["page_size"] = page_size
        if received_on_0 is not None:
            _query_params["received_on_0"] = received_on_0
        if received_on_1 is not None:
            _query_params["received_on_1"] = received_on_1
        if reimburse is not None:
            _query_params["reimburse"] = reimburse
        if requester is not None:
            _query_params["requester"] = requester
        if search is not None:
            _query_params["search"] = search
        if vendor is not None:
            _query_params["vendor"] = vendor
        args.query = _query_params
        return args

    async def _aitems_get_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get Unbilled/Billed Items
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_bill,
            request_query_bill_uuid,
            request_query_billed,
            request_query_budget,
            request_query_created_at_0,
            request_query_created_at_1,
            request_query_department,
            request_query_exclude,
            request_query_format,
            request_query_location,
            request_query_order_by,
            request_query_page,
            request_query_page_size,
            request_query_received_on_0,
            request_query_received_on_1,
            request_query_reimburse,
            request_query_requester,
            request_query_search,
            request_query_vendor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v2/ap/items',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _items_get_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get Unbilled/Billed Items
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_bill,
            request_query_bill_uuid,
            request_query_billed,
            request_query_budget,
            request_query_created_at_0,
            request_query_created_at_1,
            request_query_department,
            request_query_exclude,
            request_query_format,
            request_query_location,
            request_query_order_by,
            request_query_page,
            request_query_page_size,
            request_query_received_on_0,
            request_query_received_on_1,
            request_query_reimburse,
            request_query_requester,
            request_query_search,
            request_query_vendor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v2/ap/items',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ItemsGetRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aitems_get(
        self,
        bill: typing.Optional[int] = None,
        bill_uuid: typing.Optional[str] = None,
        billed: typing.Optional[bool] = None,
        budget: typing.Optional[int] = None,
        created_at_0: typing.Optional[date] = None,
        created_at_1: typing.Optional[date] = None,
        department: typing.Optional[typing.Union[int, float]] = None,
        exclude: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        location: typing.Optional[typing.Union[int, float]] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        received_on_0: typing.Optional[date] = None,
        received_on_1: typing.Optional[date] = None,
        reimburse: typing.Optional[bool] = None,
        requester: typing.Optional[typing.Union[int, float]] = None,
        search: typing.Optional[str] = None,
        vendor: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._items_get_mapped_args(
            bill=bill,
            bill_uuid=bill_uuid,
            billed=billed,
            budget=budget,
            created_at_0=created_at_0,
            created_at_1=created_at_1,
            department=department,
            exclude=exclude,
            format=format,
            location=location,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_on_0=received_on_0,
            received_on_1=received_on_1,
            reimburse=reimburse,
            requester=requester,
            search=search,
            vendor=vendor,
        )
        return await self._aitems_get_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def items_get(
        self,
        bill: typing.Optional[int] = None,
        bill_uuid: typing.Optional[str] = None,
        billed: typing.Optional[bool] = None,
        budget: typing.Optional[int] = None,
        created_at_0: typing.Optional[date] = None,
        created_at_1: typing.Optional[date] = None,
        department: typing.Optional[typing.Union[int, float]] = None,
        exclude: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        location: typing.Optional[typing.Union[int, float]] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        received_on_0: typing.Optional[date] = None,
        received_on_1: typing.Optional[date] = None,
        reimburse: typing.Optional[bool] = None,
        requester: typing.Optional[typing.Union[int, float]] = None,
        search: typing.Optional[str] = None,
        vendor: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._items_get_mapped_args(
            bill=bill,
            bill_uuid=bill_uuid,
            billed=billed,
            budget=budget,
            created_at_0=created_at_0,
            created_at_1=created_at_1,
            department=department,
            exclude=exclude,
            format=format,
            location=location,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_on_0=received_on_0,
            received_on_1=received_on_1,
            reimburse=reimburse,
            requester=requester,
            search=search,
            vendor=vendor,
        )
        return self._items_get_oapg(
            query_params=args.query,
        )

class ItemsGet(BaseApi):

    async def aitems_get(
        self,
        bill: typing.Optional[int] = None,
        bill_uuid: typing.Optional[str] = None,
        billed: typing.Optional[bool] = None,
        budget: typing.Optional[int] = None,
        created_at_0: typing.Optional[date] = None,
        created_at_1: typing.Optional[date] = None,
        department: typing.Optional[typing.Union[int, float]] = None,
        exclude: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        location: typing.Optional[typing.Union[int, float]] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        received_on_0: typing.Optional[date] = None,
        received_on_1: typing.Optional[date] = None,
        reimburse: typing.Optional[bool] = None,
        requester: typing.Optional[typing.Union[int, float]] = None,
        search: typing.Optional[str] = None,
        vendor: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> ItemMetadataItemReadPydantic:
        raw_response = await self.raw.aitems_get(
            bill=bill,
            bill_uuid=bill_uuid,
            billed=billed,
            budget=budget,
            created_at_0=created_at_0,
            created_at_1=created_at_1,
            department=department,
            exclude=exclude,
            format=format,
            location=location,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_on_0=received_on_0,
            received_on_1=received_on_1,
            reimburse=reimburse,
            requester=requester,
            search=search,
            vendor=vendor,
            **kwargs,
        )
        if validate:
            return ItemMetadataItemReadPydantic(**raw_response.body)
        return api_client.construct_model_instance(ItemMetadataItemReadPydantic, raw_response.body)
    
    
    def items_get(
        self,
        bill: typing.Optional[int] = None,
        bill_uuid: typing.Optional[str] = None,
        billed: typing.Optional[bool] = None,
        budget: typing.Optional[int] = None,
        created_at_0: typing.Optional[date] = None,
        created_at_1: typing.Optional[date] = None,
        department: typing.Optional[typing.Union[int, float]] = None,
        exclude: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        location: typing.Optional[typing.Union[int, float]] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        received_on_0: typing.Optional[date] = None,
        received_on_1: typing.Optional[date] = None,
        reimburse: typing.Optional[bool] = None,
        requester: typing.Optional[typing.Union[int, float]] = None,
        search: typing.Optional[str] = None,
        vendor: typing.Optional[int] = None,
        validate: bool = False,
    ) -> ItemMetadataItemReadPydantic:
        raw_response = self.raw.items_get(
            bill=bill,
            bill_uuid=bill_uuid,
            billed=billed,
            budget=budget,
            created_at_0=created_at_0,
            created_at_1=created_at_1,
            department=department,
            exclude=exclude,
            format=format,
            location=location,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_on_0=received_on_0,
            received_on_1=received_on_1,
            reimburse=reimburse,
            requester=requester,
            search=search,
            vendor=vendor,
        )
        if validate:
            return ItemMetadataItemReadPydantic(**raw_response.body)
        return api_client.construct_model_instance(ItemMetadataItemReadPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        bill: typing.Optional[int] = None,
        bill_uuid: typing.Optional[str] = None,
        billed: typing.Optional[bool] = None,
        budget: typing.Optional[int] = None,
        created_at_0: typing.Optional[date] = None,
        created_at_1: typing.Optional[date] = None,
        department: typing.Optional[typing.Union[int, float]] = None,
        exclude: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        location: typing.Optional[typing.Union[int, float]] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        received_on_0: typing.Optional[date] = None,
        received_on_1: typing.Optional[date] = None,
        reimburse: typing.Optional[bool] = None,
        requester: typing.Optional[typing.Union[int, float]] = None,
        search: typing.Optional[str] = None,
        vendor: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._items_get_mapped_args(
            bill=bill,
            bill_uuid=bill_uuid,
            billed=billed,
            budget=budget,
            created_at_0=created_at_0,
            created_at_1=created_at_1,
            department=department,
            exclude=exclude,
            format=format,
            location=location,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_on_0=received_on_0,
            received_on_1=received_on_1,
            reimburse=reimburse,
            requester=requester,
            search=search,
            vendor=vendor,
        )
        return await self._aitems_get_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        bill: typing.Optional[int] = None,
        bill_uuid: typing.Optional[str] = None,
        billed: typing.Optional[bool] = None,
        budget: typing.Optional[int] = None,
        created_at_0: typing.Optional[date] = None,
        created_at_1: typing.Optional[date] = None,
        department: typing.Optional[typing.Union[int, float]] = None,
        exclude: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        location: typing.Optional[typing.Union[int, float]] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        received_on_0: typing.Optional[date] = None,
        received_on_1: typing.Optional[date] = None,
        reimburse: typing.Optional[bool] = None,
        requester: typing.Optional[typing.Union[int, float]] = None,
        search: typing.Optional[str] = None,
        vendor: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._items_get_mapped_args(
            bill=bill,
            bill_uuid=bill_uuid,
            billed=billed,
            budget=budget,
            created_at_0=created_at_0,
            created_at_1=created_at_1,
            department=department,
            exclude=exclude,
            format=format,
            location=location,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_on_0=received_on_0,
            received_on_1=received_on_1,
            reimburse=reimburse,
            requester=requester,
            search=search,
            vendor=vendor,
        )
        return self._items_get_oapg(
            query_params=args.query,
        )

