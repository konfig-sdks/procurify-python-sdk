# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from procurify_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from procurify_python_sdk.api_response import AsyncGeneratorResponse
from procurify_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401

from procurify_python_sdk.model.po_with_list_purchase_order_docs import POWithListPurchaseOrderDocs as POWithListPurchaseOrderDocsSchema

from procurify_python_sdk.type.po_with_list_purchase_order_docs import POWithListPurchaseOrderDocs

from ...api_client import Dictionary
from procurify_python_sdk.pydantic.po_with_list_purchase_order_docs import POWithListPurchaseOrderDocs as POWithListPurchaseOrderDocsPydantic

from . import path

# Query params
ContractSchema = schemas.IntSchema
Date0Schema = schemas.DateSchema
Date1Schema = schemas.DateSchema
ExpiryDate0Schema = schemas.DateSchema
ExpiryDate1Schema = schemas.DateSchema
HasBlanketOrderItemsSchema = schemas.BoolSchema
ModifiedDate0Schema = schemas.DateSchema
ModifiedDate1Schema = schemas.DateSchema
OrderBySchema = schemas.StrSchema
PageSchema = schemas.IntSchema
PageSizeSchema = schemas.IntSchema
PrefVendorSchema = schemas.IntSchema
PromiseDate0Schema = schemas.DateSchema
PromiseDate1Schema = schemas.DateSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'contract': typing.Union[ContractSchema, decimal.Decimal, int, ],
        'date_0': typing.Union[Date0Schema, str, date, ],
        'date_1': typing.Union[Date1Schema, str, date, ],
        'expiry_date_0': typing.Union[ExpiryDate0Schema, str, date, ],
        'expiry_date_1': typing.Union[ExpiryDate1Schema, str, date, ],
        'has_blanket_order_items': typing.Union[HasBlanketOrderItemsSchema, bool, ],
        'modified_date_0': typing.Union[ModifiedDate0Schema, str, date, ],
        'modified_date_1': typing.Union[ModifiedDate1Schema, str, date, ],
        'order_by': typing.Union[OrderBySchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'page_size': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        'pref_vendor': typing.Union[PrefVendorSchema, decimal.Decimal, int, ],
        'promise_date_0': typing.Union[PromiseDate0Schema, str, date, ],
        'promise_date_1': typing.Union[PromiseDate1Schema, str, date, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_contract = api_client.QueryParameter(
    name="contract",
    style=api_client.ParameterStyle.FORM,
    schema=ContractSchema,
    explode=True,
)
request_query_date_0 = api_client.QueryParameter(
    name="date_0",
    style=api_client.ParameterStyle.FORM,
    schema=Date0Schema,
    explode=True,
)
request_query_date_1 = api_client.QueryParameter(
    name="date_1",
    style=api_client.ParameterStyle.FORM,
    schema=Date1Schema,
    explode=True,
)
request_query_expiry_date_0 = api_client.QueryParameter(
    name="expiry_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=ExpiryDate0Schema,
    explode=True,
)
request_query_expiry_date_1 = api_client.QueryParameter(
    name="expiry_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=ExpiryDate1Schema,
    explode=True,
)
request_query_has_blanket_order_items = api_client.QueryParameter(
    name="has_blanket_order_items",
    style=api_client.ParameterStyle.FORM,
    schema=HasBlanketOrderItemsSchema,
    explode=True,
)
request_query_modified_date_0 = api_client.QueryParameter(
    name="modified_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=ModifiedDate0Schema,
    explode=True,
)
request_query_modified_date_1 = api_client.QueryParameter(
    name="modified_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=ModifiedDate1Schema,
    explode=True,
)
request_query_order_by = api_client.QueryParameter(
    name="order_by",
    style=api_client.ParameterStyle.FORM,
    schema=OrderBySchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="page_size",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_pref_vendor = api_client.QueryParameter(
    name="pref_vendor",
    style=api_client.ParameterStyle.FORM,
    schema=PrefVendorSchema,
    explode=True,
)
request_query_promise_date_0 = api_client.QueryParameter(
    name="promise_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=PromiseDate0Schema,
    explode=True,
)
request_query_promise_date_1 = api_client.QueryParameter(
    name="promise_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=PromiseDate1Schema,
    explode=True,
)
# Path params


class RoleSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "purchased": "PURCHASED",
            "receivable": "RECEIVABLE",
        }
    
    @schemas.classproperty
    def PURCHASED(cls):
        return cls("purchased")
    
    @schemas.classproperty
    def RECEIVABLE(cls):
        return cls("receivable")


class StatusSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "all": "ALL",
            "cancelled": "CANCELLED",
            "closed": "CLOSED",
            "open": "OPEN",
            "paid": "PAID",
            "partial": "PARTIAL",
        }
    
    @schemas.classproperty
    def ALL(cls):
        return cls("all")
    
    @schemas.classproperty
    def CANCELLED(cls):
        return cls("cancelled")
    
    @schemas.classproperty
    def CLOSED(cls):
        return cls("closed")
    
    @schemas.classproperty
    def OPEN(cls):
        return cls("open")
    
    @schemas.classproperty
    def PAID(cls):
        return cls("paid")
    
    @schemas.classproperty
    def PARTIAL(cls):
        return cls("partial")
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'role': typing.Union[RoleSchema, str, ],
        'status': typing.Union[StatusSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_role = api_client.PathParameter(
    name="role",
    style=api_client.ParameterStyle.SIMPLE,
    schema=RoleSchema,
    required=True,
)
request_path_status = api_client.PathParameter(
    name="status",
    style=api_client.ParameterStyle.SIMPLE,
    schema=StatusSchema,
    required=True,
)
_auth = [
    'BasicAuthentication',
    'M2MAuthentication',
    'RemoteAuthentication',
    'cookieAuth',
    'tokenAuth',
]
SchemaFor200ResponseBodyApplicationJson = POWithListPurchaseOrderDocsSchema
SchemaFor200ResponseBodyTextCsv = POWithListPurchaseOrderDocsSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: POWithListPurchaseOrderDocs


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: POWithListPurchaseOrderDocs


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
    'text/csv',
)


class BaseApi(api_client.Api):

    def _get_by_role_and_status_mapped_args(
        self,
        role: str,
        status: str,
        contract: typing.Optional[int] = None,
        date_0: typing.Optional[date] = None,
        date_1: typing.Optional[date] = None,
        expiry_date_0: typing.Optional[date] = None,
        expiry_date_1: typing.Optional[date] = None,
        has_blanket_order_items: typing.Optional[bool] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        promise_date_0: typing.Optional[date] = None,
        promise_date_1: typing.Optional[date] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if contract is not None:
            _query_params["contract"] = contract
        if date_0 is not None:
            _query_params["date_0"] = date_0
        if date_1 is not None:
            _query_params["date_1"] = date_1
        if expiry_date_0 is not None:
            _query_params["expiry_date_0"] = expiry_date_0
        if expiry_date_1 is not None:
            _query_params["expiry_date_1"] = expiry_date_1
        if has_blanket_order_items is not None:
            _query_params["has_blanket_order_items"] = has_blanket_order_items
        if modified_date_0 is not None:
            _query_params["modified_date_0"] = modified_date_0
        if modified_date_1 is not None:
            _query_params["modified_date_1"] = modified_date_1
        if order_by is not None:
            _query_params["order_by"] = order_by
        if page is not None:
            _query_params["page"] = page
        if page_size is not None:
            _query_params["page_size"] = page_size
        if pref_vendor is not None:
            _query_params["pref_vendor"] = pref_vendor
        if promise_date_0 is not None:
            _query_params["promise_date_0"] = promise_date_0
        if promise_date_1 is not None:
            _query_params["promise_date_1"] = promise_date_1
        if role is not None:
            _path_params["role"] = role
        if status is not None:
            _path_params["status"] = status
        args.query = _query_params
        args.path = _path_params
        return args

    async def _aget_by_role_and_status_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get Purchase Orders by Role &amp; Status
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_role,
            request_path_status,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_contract,
            request_query_date_0,
            request_query_date_1,
            request_query_expiry_date_0,
            request_query_expiry_date_1,
            request_query_has_blanket_order_items,
            request_query_modified_date_0,
            request_query_modified_date_1,
            request_query_order_by,
            request_query_page,
            request_query_page_size,
            request_query_pref_vendor,
            request_query_promise_date_0,
            request_query_promise_date_1,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v2/purchase_orders/{role}/{status}',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_by_role_and_status_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get Purchase Orders by Role &amp; Status
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_role,
            request_path_status,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_contract,
            request_query_date_0,
            request_query_date_1,
            request_query_expiry_date_0,
            request_query_expiry_date_1,
            request_query_has_blanket_order_items,
            request_query_modified_date_0,
            request_query_modified_date_1,
            request_query_order_by,
            request_query_page,
            request_query_page_size,
            request_query_pref_vendor,
            request_query_promise_date_0,
            request_query_promise_date_1,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v2/purchase_orders/{role}/{status}',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetByRoleAndStatusRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_by_role_and_status(
        self,
        role: str,
        status: str,
        contract: typing.Optional[int] = None,
        date_0: typing.Optional[date] = None,
        date_1: typing.Optional[date] = None,
        expiry_date_0: typing.Optional[date] = None,
        expiry_date_1: typing.Optional[date] = None,
        has_blanket_order_items: typing.Optional[bool] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        promise_date_0: typing.Optional[date] = None,
        promise_date_1: typing.Optional[date] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_by_role_and_status_mapped_args(
            role=role,
            status=status,
            contract=contract,
            date_0=date_0,
            date_1=date_1,
            expiry_date_0=expiry_date_0,
            expiry_date_1=expiry_date_1,
            has_blanket_order_items=has_blanket_order_items,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            pref_vendor=pref_vendor,
            promise_date_0=promise_date_0,
            promise_date_1=promise_date_1,
        )
        return await self._aget_by_role_and_status_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get_by_role_and_status(
        self,
        role: str,
        status: str,
        contract: typing.Optional[int] = None,
        date_0: typing.Optional[date] = None,
        date_1: typing.Optional[date] = None,
        expiry_date_0: typing.Optional[date] = None,
        expiry_date_1: typing.Optional[date] = None,
        has_blanket_order_items: typing.Optional[bool] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        promise_date_0: typing.Optional[date] = None,
        promise_date_1: typing.Optional[date] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_by_role_and_status_mapped_args(
            role=role,
            status=status,
            contract=contract,
            date_0=date_0,
            date_1=date_1,
            expiry_date_0=expiry_date_0,
            expiry_date_1=expiry_date_1,
            has_blanket_order_items=has_blanket_order_items,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            pref_vendor=pref_vendor,
            promise_date_0=promise_date_0,
            promise_date_1=promise_date_1,
        )
        return self._get_by_role_and_status_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class GetByRoleAndStatus(BaseApi):

    async def aget_by_role_and_status(
        self,
        role: str,
        status: str,
        contract: typing.Optional[int] = None,
        date_0: typing.Optional[date] = None,
        date_1: typing.Optional[date] = None,
        expiry_date_0: typing.Optional[date] = None,
        expiry_date_1: typing.Optional[date] = None,
        has_blanket_order_items: typing.Optional[bool] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        promise_date_0: typing.Optional[date] = None,
        promise_date_1: typing.Optional[date] = None,
        validate: bool = False,
        **kwargs,
    ) -> POWithListPurchaseOrderDocsPydantic:
        raw_response = await self.raw.aget_by_role_and_status(
            role=role,
            status=status,
            contract=contract,
            date_0=date_0,
            date_1=date_1,
            expiry_date_0=expiry_date_0,
            expiry_date_1=expiry_date_1,
            has_blanket_order_items=has_blanket_order_items,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            pref_vendor=pref_vendor,
            promise_date_0=promise_date_0,
            promise_date_1=promise_date_1,
            **kwargs,
        )
        if validate:
            return POWithListPurchaseOrderDocsPydantic(**raw_response.body)
        return api_client.construct_model_instance(POWithListPurchaseOrderDocsPydantic, raw_response.body)
    
    
    def get_by_role_and_status(
        self,
        role: str,
        status: str,
        contract: typing.Optional[int] = None,
        date_0: typing.Optional[date] = None,
        date_1: typing.Optional[date] = None,
        expiry_date_0: typing.Optional[date] = None,
        expiry_date_1: typing.Optional[date] = None,
        has_blanket_order_items: typing.Optional[bool] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        promise_date_0: typing.Optional[date] = None,
        promise_date_1: typing.Optional[date] = None,
        validate: bool = False,
    ) -> POWithListPurchaseOrderDocsPydantic:
        raw_response = self.raw.get_by_role_and_status(
            role=role,
            status=status,
            contract=contract,
            date_0=date_0,
            date_1=date_1,
            expiry_date_0=expiry_date_0,
            expiry_date_1=expiry_date_1,
            has_blanket_order_items=has_blanket_order_items,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            pref_vendor=pref_vendor,
            promise_date_0=promise_date_0,
            promise_date_1=promise_date_1,
        )
        if validate:
            return POWithListPurchaseOrderDocsPydantic(**raw_response.body)
        return api_client.construct_model_instance(POWithListPurchaseOrderDocsPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        role: str,
        status: str,
        contract: typing.Optional[int] = None,
        date_0: typing.Optional[date] = None,
        date_1: typing.Optional[date] = None,
        expiry_date_0: typing.Optional[date] = None,
        expiry_date_1: typing.Optional[date] = None,
        has_blanket_order_items: typing.Optional[bool] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        promise_date_0: typing.Optional[date] = None,
        promise_date_1: typing.Optional[date] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_by_role_and_status_mapped_args(
            role=role,
            status=status,
            contract=contract,
            date_0=date_0,
            date_1=date_1,
            expiry_date_0=expiry_date_0,
            expiry_date_1=expiry_date_1,
            has_blanket_order_items=has_blanket_order_items,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            pref_vendor=pref_vendor,
            promise_date_0=promise_date_0,
            promise_date_1=promise_date_1,
        )
        return await self._aget_by_role_and_status_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        role: str,
        status: str,
        contract: typing.Optional[int] = None,
        date_0: typing.Optional[date] = None,
        date_1: typing.Optional[date] = None,
        expiry_date_0: typing.Optional[date] = None,
        expiry_date_1: typing.Optional[date] = None,
        has_blanket_order_items: typing.Optional[bool] = None,
        modified_date_0: typing.Optional[date] = None,
        modified_date_1: typing.Optional[date] = None,
        order_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        promise_date_0: typing.Optional[date] = None,
        promise_date_1: typing.Optional[date] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_by_role_and_status_mapped_args(
            role=role,
            status=status,
            contract=contract,
            date_0=date_0,
            date_1=date_1,
            expiry_date_0=expiry_date_0,
            expiry_date_1=expiry_date_1,
            has_blanket_order_items=has_blanket_order_items,
            modified_date_0=modified_date_0,
            modified_date_1=modified_date_1,
            order_by=order_by,
            page=page,
            page_size=page_size,
            pref_vendor=pref_vendor,
            promise_date_0=promise_date_0,
            promise_date_1=promise_date_1,
        )
        return self._get_by_role_and_status_oapg(
            query_params=args.query,
            path_params=args.path,
        )

