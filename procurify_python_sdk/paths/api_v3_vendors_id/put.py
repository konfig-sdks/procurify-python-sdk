# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from procurify_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from procurify_python_sdk.api_response import AsyncGeneratorResponse
from procurify_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401

from procurify_python_sdk.model.shipping_term_request_nullable import ShippingTermRequestNullable as ShippingTermRequestNullableSchema
from procurify_python_sdk.model.vendor_type_enum import VendorTypeEnum as VendorTypeEnumSchema
from procurify_python_sdk.model.optimized_vendor_request import OptimizedVendorRequest as OptimizedVendorRequestSchema
from procurify_python_sdk.model.vendor_serializer_single import VendorSerializerSingle as VendorSerializerSingleSchema
from procurify_python_sdk.model.optimized_vendor_request_email import OptimizedVendorRequestEmail as OptimizedVendorRequestEmailSchema
from procurify_python_sdk.model.payment_term_request_nullable import PaymentTermRequestNullable as PaymentTermRequestNullableSchema
from procurify_python_sdk.model.payment_method_request_nullable import PaymentMethodRequestNullable as PaymentMethodRequestNullableSchema
from procurify_python_sdk.model.shipping_method_request_nullable import ShippingMethodRequestNullable as ShippingMethodRequestNullableSchema

from procurify_python_sdk.type.optimized_vendor_request_email import OptimizedVendorRequestEmail
from procurify_python_sdk.type.payment_term_request_nullable import PaymentTermRequestNullable
from procurify_python_sdk.type.shipping_term_request_nullable import ShippingTermRequestNullable
from procurify_python_sdk.type.vendor_type_enum import VendorTypeEnum
from procurify_python_sdk.type.vendor_serializer_single import VendorSerializerSingle
from procurify_python_sdk.type.payment_method_request_nullable import PaymentMethodRequestNullable
from procurify_python_sdk.type.shipping_method_request_nullable import ShippingMethodRequestNullable
from procurify_python_sdk.type.optimized_vendor_request import OptimizedVendorRequest

from ...api_client import Dictionary
from procurify_python_sdk.pydantic.vendor_serializer_single import VendorSerializerSingle as VendorSerializerSinglePydantic
from procurify_python_sdk.pydantic.optimized_vendor_request_email import OptimizedVendorRequestEmail as OptimizedVendorRequestEmailPydantic
from procurify_python_sdk.pydantic.shipping_term_request_nullable import ShippingTermRequestNullable as ShippingTermRequestNullablePydantic
from procurify_python_sdk.pydantic.vendor_type_enum import VendorTypeEnum as VendorTypeEnumPydantic
from procurify_python_sdk.pydantic.optimized_vendor_request import OptimizedVendorRequest as OptimizedVendorRequestPydantic
from procurify_python_sdk.pydantic.shipping_method_request_nullable import ShippingMethodRequestNullable as ShippingMethodRequestNullablePydantic
from procurify_python_sdk.pydantic.payment_term_request_nullable import PaymentTermRequestNullable as PaymentTermRequestNullablePydantic
from procurify_python_sdk.pydantic.payment_method_request_nullable import PaymentMethodRequestNullable as PaymentMethodRequestNullablePydantic

from . import path

# Query params


class FormatSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "csv": "CSV",
            "json": "JSON",
        }
    
    @schemas.classproperty
    def CSV(cls):
        return cls("csv")
    
    @schemas.classproperty
    def JSON(cls):
        return cls("json")
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'format': typing.Union[FormatSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_format = api_client.QueryParameter(
    name="format",
    style=api_client.ParameterStyle.FORM,
    schema=FormatSchema,
    explode=True,
)
# Path params
IdSchema = schemas.IntSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'id': typing.Union[IdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_id = api_client.PathParameter(
    name="id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = OptimizedVendorRequestSchema
SchemaForRequestBodyApplicationXWwwFormUrlencoded = OptimizedVendorRequestSchema
SchemaForRequestBody = OptimizedVendorRequestSchema
SchemaForRequestBodyApplicationXml = OptimizedVendorRequestSchema
SchemaForRequestBodyMultipartFormData = OptimizedVendorRequestSchema


request_body_optimized_vendor_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
        'application/x-www-form-urlencoded': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationXWwwFormUrlencoded),
        '': api_client.MediaType(
            schema=SchemaForRequestBody),
        'application/xml': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationXml),
        'multipart/form-data': api_client.MediaType(
            schema=SchemaForRequestBodyMultipartFormData),
    },
    required=True,
)
_auth = [
    'BasicAuthentication',
    'M2MAuthentication',
    'RemoteAuthentication',
    'cookieAuth',
    'tokenAuth',
]
SchemaFor200ResponseBodyApplicationJson = VendorSerializerSingleSchema
SchemaFor200ResponseBodyTextCsv = VendorSerializerSingleSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: VendorSerializerSingle


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: VendorSerializerSingle


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
    'text/csv',
)


class BaseApi(api_client.Api):

    def _update_mapped_args(
        self,
        name: str,
        email: OptimizedVendorRequestEmail,
        type: VendorTypeEnum,
        overall_score: typing.Optional[str],
        id: int,
        active: typing.Optional[bool] = None,
        address_line_one: typing.Optional[typing.Optional[str]] = None,
        address_line_two: typing.Optional[typing.Optional[str]] = None,
        postal_code: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        state_province: typing.Optional[typing.Optional[str]] = None,
        country: typing.Optional[typing.Optional[str]] = None,
        phone_one: typing.Optional[typing.Optional[str]] = None,
        phone_two: typing.Optional[typing.Optional[str]] = None,
        fax: typing.Optional[typing.Optional[str]] = None,
        comments: typing.Optional[typing.Optional[str]] = None,
        contact: typing.Optional[typing.Optional[str]] = None,
        url: typing.Optional[typing.Optional[str]] = None,
        external_id: typing.Optional[typing.Optional[str]] = None,
        currency: typing.Optional[typing.Optional[int]] = None,
        payment_term_ref: typing.Optional[PaymentTermRequestNullable] = None,
        shipping_term_ref: typing.Optional[ShippingTermRequestNullable] = None,
        payment_method_ref: typing.Optional[PaymentMethodRequestNullable] = None,
        shipping_method_ref: typing.Optional[ShippingMethodRequestNullable] = None,
        tax: typing.Optional[typing.Optional[int]] = None,
        default_payment_method: typing.Optional[typing.Optional[int]] = None,
        is_1099_eligible: typing.Optional[typing.Optional[bool]] = None,
        is_auto_email_po_enabled: typing.Optional[bool] = None,
        po_pdf_labels: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        _body = {}
        if name is not None:
            _body["name"] = name
        if active is not None:
            _body["active"] = active
        if address_line_one is not None:
            _body["addressLineOne"] = address_line_one
        if address_line_two is not None:
            _body["addressLineTwo"] = address_line_two
        if postal_code is not None:
            _body["postalCode"] = postal_code
        if city is not None:
            _body["city"] = city
        if state_province is not None:
            _body["state_province"] = state_province
        if country is not None:
            _body["country"] = country
        if phone_one is not None:
            _body["phoneOne"] = phone_one
        if phone_two is not None:
            _body["phoneTwo"] = phone_two
        if fax is not None:
            _body["fax"] = fax
        if email is not None:
            _body["email"] = email
        if comments is not None:
            _body["comments"] = comments
        if contact is not None:
            _body["contact"] = contact
        if url is not None:
            _body["url"] = url
        if external_id is not None:
            _body["external_id"] = external_id
        if currency is not None:
            _body["currency"] = currency
        if payment_term_ref is not None:
            _body["payment_term_ref"] = payment_term_ref
        if shipping_term_ref is not None:
            _body["shipping_term_ref"] = shipping_term_ref
        if payment_method_ref is not None:
            _body["payment_method_ref"] = payment_method_ref
        if shipping_method_ref is not None:
            _body["shipping_method_ref"] = shipping_method_ref
        if tax is not None:
            _body["tax"] = tax
        if type is not None:
            _body["type"] = type
        if default_payment_method is not None:
            _body["default_payment_method"] = default_payment_method
        if is_1099_eligible is not None:
            _body["is_1099_eligible"] = is_1099_eligible
        if overall_score is not None:
            _body["overall_score"] = overall_score
        if is_auto_email_po_enabled is not None:
            _body["is_auto_email_po_enabled"] = is_auto_email_po_enabled
        if po_pdf_labels is not None:
            _body["po_pdf_labels"] = po_pdf_labels
        args.body = _body
        if format is not None:
            _query_params["format"] = format
        if id is not None:
            _path_params["id"] = id
        args.query = _query_params
        args.path = _path_params
        return args

    async def _aupdate_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update Vendor
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_format,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v3/vendors/{id}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_optimized_vendor_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update Vendor
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_format,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v3/vendors/{id}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_optimized_vendor_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate(
        self,
        name: str,
        email: OptimizedVendorRequestEmail,
        type: VendorTypeEnum,
        overall_score: typing.Optional[str],
        id: int,
        active: typing.Optional[bool] = None,
        address_line_one: typing.Optional[typing.Optional[str]] = None,
        address_line_two: typing.Optional[typing.Optional[str]] = None,
        postal_code: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        state_province: typing.Optional[typing.Optional[str]] = None,
        country: typing.Optional[typing.Optional[str]] = None,
        phone_one: typing.Optional[typing.Optional[str]] = None,
        phone_two: typing.Optional[typing.Optional[str]] = None,
        fax: typing.Optional[typing.Optional[str]] = None,
        comments: typing.Optional[typing.Optional[str]] = None,
        contact: typing.Optional[typing.Optional[str]] = None,
        url: typing.Optional[typing.Optional[str]] = None,
        external_id: typing.Optional[typing.Optional[str]] = None,
        currency: typing.Optional[typing.Optional[int]] = None,
        payment_term_ref: typing.Optional[PaymentTermRequestNullable] = None,
        shipping_term_ref: typing.Optional[ShippingTermRequestNullable] = None,
        payment_method_ref: typing.Optional[PaymentMethodRequestNullable] = None,
        shipping_method_ref: typing.Optional[ShippingMethodRequestNullable] = None,
        tax: typing.Optional[typing.Optional[int]] = None,
        default_payment_method: typing.Optional[typing.Optional[int]] = None,
        is_1099_eligible: typing.Optional[typing.Optional[bool]] = None,
        is_auto_email_po_enabled: typing.Optional[bool] = None,
        po_pdf_labels: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_mapped_args(
            name=name,
            email=email,
            type=type,
            overall_score=overall_score,
            id=id,
            active=active,
            address_line_one=address_line_one,
            address_line_two=address_line_two,
            postal_code=postal_code,
            city=city,
            state_province=state_province,
            country=country,
            phone_one=phone_one,
            phone_two=phone_two,
            fax=fax,
            comments=comments,
            contact=contact,
            url=url,
            external_id=external_id,
            currency=currency,
            payment_term_ref=payment_term_ref,
            shipping_term_ref=shipping_term_ref,
            payment_method_ref=payment_method_ref,
            shipping_method_ref=shipping_method_ref,
            tax=tax,
            default_payment_method=default_payment_method,
            is_1099_eligible=is_1099_eligible,
            is_auto_email_po_enabled=is_auto_email_po_enabled,
            po_pdf_labels=po_pdf_labels,
            format=format,
        )
        return await self._aupdate_oapg(
            body=args.body,
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def update(
        self,
        name: str,
        email: OptimizedVendorRequestEmail,
        type: VendorTypeEnum,
        overall_score: typing.Optional[str],
        id: int,
        active: typing.Optional[bool] = None,
        address_line_one: typing.Optional[typing.Optional[str]] = None,
        address_line_two: typing.Optional[typing.Optional[str]] = None,
        postal_code: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        state_province: typing.Optional[typing.Optional[str]] = None,
        country: typing.Optional[typing.Optional[str]] = None,
        phone_one: typing.Optional[typing.Optional[str]] = None,
        phone_two: typing.Optional[typing.Optional[str]] = None,
        fax: typing.Optional[typing.Optional[str]] = None,
        comments: typing.Optional[typing.Optional[str]] = None,
        contact: typing.Optional[typing.Optional[str]] = None,
        url: typing.Optional[typing.Optional[str]] = None,
        external_id: typing.Optional[typing.Optional[str]] = None,
        currency: typing.Optional[typing.Optional[int]] = None,
        payment_term_ref: typing.Optional[PaymentTermRequestNullable] = None,
        shipping_term_ref: typing.Optional[ShippingTermRequestNullable] = None,
        payment_method_ref: typing.Optional[PaymentMethodRequestNullable] = None,
        shipping_method_ref: typing.Optional[ShippingMethodRequestNullable] = None,
        tax: typing.Optional[typing.Optional[int]] = None,
        default_payment_method: typing.Optional[typing.Optional[int]] = None,
        is_1099_eligible: typing.Optional[typing.Optional[bool]] = None,
        is_auto_email_po_enabled: typing.Optional[bool] = None,
        po_pdf_labels: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_mapped_args(
            name=name,
            email=email,
            type=type,
            overall_score=overall_score,
            id=id,
            active=active,
            address_line_one=address_line_one,
            address_line_two=address_line_two,
            postal_code=postal_code,
            city=city,
            state_province=state_province,
            country=country,
            phone_one=phone_one,
            phone_two=phone_two,
            fax=fax,
            comments=comments,
            contact=contact,
            url=url,
            external_id=external_id,
            currency=currency,
            payment_term_ref=payment_term_ref,
            shipping_term_ref=shipping_term_ref,
            payment_method_ref=payment_method_ref,
            shipping_method_ref=shipping_method_ref,
            tax=tax,
            default_payment_method=default_payment_method,
            is_1099_eligible=is_1099_eligible,
            is_auto_email_po_enabled=is_auto_email_po_enabled,
            po_pdf_labels=po_pdf_labels,
            format=format,
        )
        return self._update_oapg(
            body=args.body,
            query_params=args.query,
            path_params=args.path,
        )

class Update(BaseApi):

    async def aupdate(
        self,
        name: str,
        email: OptimizedVendorRequestEmail,
        type: VendorTypeEnum,
        overall_score: typing.Optional[str],
        id: int,
        active: typing.Optional[bool] = None,
        address_line_one: typing.Optional[typing.Optional[str]] = None,
        address_line_two: typing.Optional[typing.Optional[str]] = None,
        postal_code: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        state_province: typing.Optional[typing.Optional[str]] = None,
        country: typing.Optional[typing.Optional[str]] = None,
        phone_one: typing.Optional[typing.Optional[str]] = None,
        phone_two: typing.Optional[typing.Optional[str]] = None,
        fax: typing.Optional[typing.Optional[str]] = None,
        comments: typing.Optional[typing.Optional[str]] = None,
        contact: typing.Optional[typing.Optional[str]] = None,
        url: typing.Optional[typing.Optional[str]] = None,
        external_id: typing.Optional[typing.Optional[str]] = None,
        currency: typing.Optional[typing.Optional[int]] = None,
        payment_term_ref: typing.Optional[PaymentTermRequestNullable] = None,
        shipping_term_ref: typing.Optional[ShippingTermRequestNullable] = None,
        payment_method_ref: typing.Optional[PaymentMethodRequestNullable] = None,
        shipping_method_ref: typing.Optional[ShippingMethodRequestNullable] = None,
        tax: typing.Optional[typing.Optional[int]] = None,
        default_payment_method: typing.Optional[typing.Optional[int]] = None,
        is_1099_eligible: typing.Optional[typing.Optional[bool]] = None,
        is_auto_email_po_enabled: typing.Optional[bool] = None,
        po_pdf_labels: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> VendorSerializerSinglePydantic:
        raw_response = await self.raw.aupdate(
            name=name,
            email=email,
            type=type,
            overall_score=overall_score,
            id=id,
            active=active,
            address_line_one=address_line_one,
            address_line_two=address_line_two,
            postal_code=postal_code,
            city=city,
            state_province=state_province,
            country=country,
            phone_one=phone_one,
            phone_two=phone_two,
            fax=fax,
            comments=comments,
            contact=contact,
            url=url,
            external_id=external_id,
            currency=currency,
            payment_term_ref=payment_term_ref,
            shipping_term_ref=shipping_term_ref,
            payment_method_ref=payment_method_ref,
            shipping_method_ref=shipping_method_ref,
            tax=tax,
            default_payment_method=default_payment_method,
            is_1099_eligible=is_1099_eligible,
            is_auto_email_po_enabled=is_auto_email_po_enabled,
            po_pdf_labels=po_pdf_labels,
            format=format,
            **kwargs,
        )
        if validate:
            return VendorSerializerSinglePydantic(**raw_response.body)
        return api_client.construct_model_instance(VendorSerializerSinglePydantic, raw_response.body)
    
    
    def update(
        self,
        name: str,
        email: OptimizedVendorRequestEmail,
        type: VendorTypeEnum,
        overall_score: typing.Optional[str],
        id: int,
        active: typing.Optional[bool] = None,
        address_line_one: typing.Optional[typing.Optional[str]] = None,
        address_line_two: typing.Optional[typing.Optional[str]] = None,
        postal_code: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        state_province: typing.Optional[typing.Optional[str]] = None,
        country: typing.Optional[typing.Optional[str]] = None,
        phone_one: typing.Optional[typing.Optional[str]] = None,
        phone_two: typing.Optional[typing.Optional[str]] = None,
        fax: typing.Optional[typing.Optional[str]] = None,
        comments: typing.Optional[typing.Optional[str]] = None,
        contact: typing.Optional[typing.Optional[str]] = None,
        url: typing.Optional[typing.Optional[str]] = None,
        external_id: typing.Optional[typing.Optional[str]] = None,
        currency: typing.Optional[typing.Optional[int]] = None,
        payment_term_ref: typing.Optional[PaymentTermRequestNullable] = None,
        shipping_term_ref: typing.Optional[ShippingTermRequestNullable] = None,
        payment_method_ref: typing.Optional[PaymentMethodRequestNullable] = None,
        shipping_method_ref: typing.Optional[ShippingMethodRequestNullable] = None,
        tax: typing.Optional[typing.Optional[int]] = None,
        default_payment_method: typing.Optional[typing.Optional[int]] = None,
        is_1099_eligible: typing.Optional[typing.Optional[bool]] = None,
        is_auto_email_po_enabled: typing.Optional[bool] = None,
        po_pdf_labels: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        validate: bool = False,
    ) -> VendorSerializerSinglePydantic:
        raw_response = self.raw.update(
            name=name,
            email=email,
            type=type,
            overall_score=overall_score,
            id=id,
            active=active,
            address_line_one=address_line_one,
            address_line_two=address_line_two,
            postal_code=postal_code,
            city=city,
            state_province=state_province,
            country=country,
            phone_one=phone_one,
            phone_two=phone_two,
            fax=fax,
            comments=comments,
            contact=contact,
            url=url,
            external_id=external_id,
            currency=currency,
            payment_term_ref=payment_term_ref,
            shipping_term_ref=shipping_term_ref,
            payment_method_ref=payment_method_ref,
            shipping_method_ref=shipping_method_ref,
            tax=tax,
            default_payment_method=default_payment_method,
            is_1099_eligible=is_1099_eligible,
            is_auto_email_po_enabled=is_auto_email_po_enabled,
            po_pdf_labels=po_pdf_labels,
            format=format,
        )
        if validate:
            return VendorSerializerSinglePydantic(**raw_response.body)
        return api_client.construct_model_instance(VendorSerializerSinglePydantic, raw_response.body)


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        name: str,
        email: OptimizedVendorRequestEmail,
        type: VendorTypeEnum,
        overall_score: typing.Optional[str],
        id: int,
        active: typing.Optional[bool] = None,
        address_line_one: typing.Optional[typing.Optional[str]] = None,
        address_line_two: typing.Optional[typing.Optional[str]] = None,
        postal_code: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        state_province: typing.Optional[typing.Optional[str]] = None,
        country: typing.Optional[typing.Optional[str]] = None,
        phone_one: typing.Optional[typing.Optional[str]] = None,
        phone_two: typing.Optional[typing.Optional[str]] = None,
        fax: typing.Optional[typing.Optional[str]] = None,
        comments: typing.Optional[typing.Optional[str]] = None,
        contact: typing.Optional[typing.Optional[str]] = None,
        url: typing.Optional[typing.Optional[str]] = None,
        external_id: typing.Optional[typing.Optional[str]] = None,
        currency: typing.Optional[typing.Optional[int]] = None,
        payment_term_ref: typing.Optional[PaymentTermRequestNullable] = None,
        shipping_term_ref: typing.Optional[ShippingTermRequestNullable] = None,
        payment_method_ref: typing.Optional[PaymentMethodRequestNullable] = None,
        shipping_method_ref: typing.Optional[ShippingMethodRequestNullable] = None,
        tax: typing.Optional[typing.Optional[int]] = None,
        default_payment_method: typing.Optional[typing.Optional[int]] = None,
        is_1099_eligible: typing.Optional[typing.Optional[bool]] = None,
        is_auto_email_po_enabled: typing.Optional[bool] = None,
        po_pdf_labels: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_mapped_args(
            name=name,
            email=email,
            type=type,
            overall_score=overall_score,
            id=id,
            active=active,
            address_line_one=address_line_one,
            address_line_two=address_line_two,
            postal_code=postal_code,
            city=city,
            state_province=state_province,
            country=country,
            phone_one=phone_one,
            phone_two=phone_two,
            fax=fax,
            comments=comments,
            contact=contact,
            url=url,
            external_id=external_id,
            currency=currency,
            payment_term_ref=payment_term_ref,
            shipping_term_ref=shipping_term_ref,
            payment_method_ref=payment_method_ref,
            shipping_method_ref=shipping_method_ref,
            tax=tax,
            default_payment_method=default_payment_method,
            is_1099_eligible=is_1099_eligible,
            is_auto_email_po_enabled=is_auto_email_po_enabled,
            po_pdf_labels=po_pdf_labels,
            format=format,
        )
        return await self._aupdate_oapg(
            body=args.body,
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def put(
        self,
        name: str,
        email: OptimizedVendorRequestEmail,
        type: VendorTypeEnum,
        overall_score: typing.Optional[str],
        id: int,
        active: typing.Optional[bool] = None,
        address_line_one: typing.Optional[typing.Optional[str]] = None,
        address_line_two: typing.Optional[typing.Optional[str]] = None,
        postal_code: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        state_province: typing.Optional[typing.Optional[str]] = None,
        country: typing.Optional[typing.Optional[str]] = None,
        phone_one: typing.Optional[typing.Optional[str]] = None,
        phone_two: typing.Optional[typing.Optional[str]] = None,
        fax: typing.Optional[typing.Optional[str]] = None,
        comments: typing.Optional[typing.Optional[str]] = None,
        contact: typing.Optional[typing.Optional[str]] = None,
        url: typing.Optional[typing.Optional[str]] = None,
        external_id: typing.Optional[typing.Optional[str]] = None,
        currency: typing.Optional[typing.Optional[int]] = None,
        payment_term_ref: typing.Optional[PaymentTermRequestNullable] = None,
        shipping_term_ref: typing.Optional[ShippingTermRequestNullable] = None,
        payment_method_ref: typing.Optional[PaymentMethodRequestNullable] = None,
        shipping_method_ref: typing.Optional[ShippingMethodRequestNullable] = None,
        tax: typing.Optional[typing.Optional[int]] = None,
        default_payment_method: typing.Optional[typing.Optional[int]] = None,
        is_1099_eligible: typing.Optional[typing.Optional[bool]] = None,
        is_auto_email_po_enabled: typing.Optional[bool] = None,
        po_pdf_labels: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_mapped_args(
            name=name,
            email=email,
            type=type,
            overall_score=overall_score,
            id=id,
            active=active,
            address_line_one=address_line_one,
            address_line_two=address_line_two,
            postal_code=postal_code,
            city=city,
            state_province=state_province,
            country=country,
            phone_one=phone_one,
            phone_two=phone_two,
            fax=fax,
            comments=comments,
            contact=contact,
            url=url,
            external_id=external_id,
            currency=currency,
            payment_term_ref=payment_term_ref,
            shipping_term_ref=shipping_term_ref,
            payment_method_ref=payment_method_ref,
            shipping_method_ref=shipping_method_ref,
            tax=tax,
            default_payment_method=default_payment_method,
            is_1099_eligible=is_1099_eligible,
            is_auto_email_po_enabled=is_auto_email_po_enabled,
            po_pdf_labels=po_pdf_labels,
            format=format,
        )
        return self._update_oapg(
            body=args.body,
            query_params=args.query,
            path_params=args.path,
        )

