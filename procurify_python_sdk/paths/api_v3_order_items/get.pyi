# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from procurify_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from procurify_python_sdk.api_response import AsyncGeneratorResponse
from procurify_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401

from procurify_python_sdk.model.paginated_order_item_list import PaginatedOrderItemList as PaginatedOrderItemListSchema

from procurify_python_sdk.type.paginated_order_item_list import PaginatedOrderItemList

from ...api_client import Dictionary
from procurify_python_sdk.pydantic.paginated_order_item_list import PaginatedOrderItemList as PaginatedOrderItemListPydantic

# Query params
AccountSchema = schemas.IntSchema
AccountCodeSchema = schemas.IntSchema
ActiveSchema = schemas.BoolSchema
ApprovedDatetime0Schema = schemas.DateSchema
ApprovedDatetime1Schema = schemas.DateSchema
ApprovedPriceSchema = schemas.NumberSchema
ApprovedQuantitySchema = schemas.NumberSchema
ApproverSchema = schemas.NumberSchema
ApproverIdSchema = schemas.NumberSchema
BranchSchema = schemas.IntSchema
CatalogSchema = schemas.BoolSchema
CatalogItemSchema = schemas.StrSchema
CurrencySchema = schemas.IntSchema
DepartmentSchema = schemas.IntSchema
DepartmentsSchema = schemas.StrSchema
ExcludeSchema = schemas.StrSchema
ExcludePunchoutSchema = schemas.BoolSchema


class FormatSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def CSV(cls):
        return cls("csv")
    
    @schemas.classproperty
    def JSON(cls):
        return cls("json")
FulfilmentStatusSchema = schemas.StrSchema
IsPurchasedSchema = schemas.BoolSchema
IsRecurringSchema = schemas.BoolSchema
LastChangedBySchema = schemas.IntSchema
LastModified0Schema = schemas.DateSchema
LastModified1Schema = schemas.DateSchema
LineCommentSchema = schemas.StrSchema
LocationSchema = schemas.IntSchema
LocationsSchema = schemas.StrSchema
NameSchema = schemas.StrSchema
NumSchema = schemas.StrSchema
OrderNumSchema = schemas.IntSchema


class OrderNumStatusSchema(
    schemas.EnumBase,
    schemas.IntSchema
):
    
    @schemas.classproperty
    def POSITIVE_0(cls):
        return cls(0)
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)
    
    @schemas.classproperty
    def POSITIVE_2(cls):
        return cls(2)
    
    @schemas.classproperty
    def POSITIVE_3(cls):
        return cls(3)
    
    @schemas.classproperty
    def POSITIVE_4(cls):
        return cls(4)
    
    @schemas.classproperty
    def POSITIVE_5(cls):
        return cls(5)
    
    @schemas.classproperty
    def POSITIVE_6(cls):
        return cls(6)
OrderBySchema = schemas.StrSchema
OrderCreatedDate0Schema = schemas.DateSchema
OrderCreatedDate1Schema = schemas.DateSchema
PageSchema = schemas.IntSchema
PageSizeSchema = schemas.IntSchema
PoCreatedDate0Schema = schemas.DateSchema
PoCreatedDate1Schema = schemas.DateSchema
PoVendorSchema = schemas.IntSchema
PrefVendorSchema = schemas.IntSchema
PriceSchema = schemas.NumberSchema
PurchaseAgreementSchema = schemas.NumberSchema
PurchasedDate0Schema = schemas.DateSchema
PurchasedDate1Schema = schemas.DateSchema
PurchaserSchema = schemas.IntSchema
QuantitySchema = schemas.NumberSchema
ReceivedFailQtySchema = schemas.NumberSchema
ReceivedPassQtySchema = schemas.NumberSchema
RequesterSchema = schemas.IntSchema
SearchSchema = schemas.StrSchema
SkuSchema = schemas.StrSchema


class StatusSchema(
    schemas.EnumBase,
    schemas.IntBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneDecimalMixin
):


    class MetaOapg:
        enum_value_to_name = {
            0: "POSITIVE_0",
            1: "POSITIVE_1",
            2: "POSITIVE_2",
            3: "POSITIVE_3",
            4: "POSITIVE_4",
            5: "POSITIVE_5",
            6: "POSITIVE_6",
            7: "POSITIVE_7",
            8: "POSITIVE_8",
        }
    
    @schemas.classproperty
    def POSITIVE_0(cls):
        return cls(0)
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)
    
    @schemas.classproperty
    def POSITIVE_2(cls):
        return cls(2)
    
    @schemas.classproperty
    def POSITIVE_3(cls):
        return cls(3)
    
    @schemas.classproperty
    def POSITIVE_4(cls):
        return cls(4)
    
    @schemas.classproperty
    def POSITIVE_5(cls):
        return cls(5)
    
    @schemas.classproperty
    def POSITIVE_6(cls):
        return cls(6)
    
    @schemas.classproperty
    def POSITIVE_7(cls):
        return cls(7)
    
    @schemas.classproperty
    def POSITIVE_8(cls):
        return cls(8)


    def __new__(
        cls,
        *args: typing.Union[None, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StatusSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class TypeSchema(
    schemas.EnumBase,
    schemas.IntSchema
):
    
    @schemas.classproperty
    def POSITIVE_0(cls):
        return cls(0)
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)
    
    @schemas.classproperty
    def POSITIVE_2(cls):
        return cls(2)
UnitSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'account': typing.Union[AccountSchema, decimal.Decimal, int, ],
        'account_code': typing.Union[AccountCodeSchema, decimal.Decimal, int, ],
        'active': typing.Union[ActiveSchema, bool, ],
        'approved_datetime_0': typing.Union[ApprovedDatetime0Schema, str, date, ],
        'approved_datetime_1': typing.Union[ApprovedDatetime1Schema, str, date, ],
        'approved_price': typing.Union[ApprovedPriceSchema, decimal.Decimal, int, float, ],
        'approved_quantity': typing.Union[ApprovedQuantitySchema, decimal.Decimal, int, float, ],
        'approver': typing.Union[ApproverSchema, decimal.Decimal, int, float, ],
        'approver_id': typing.Union[ApproverIdSchema, decimal.Decimal, int, float, ],
        'branch': typing.Union[BranchSchema, decimal.Decimal, int, ],
        'catalog': typing.Union[CatalogSchema, bool, ],
        'catalog_item': typing.Union[CatalogItemSchema, str, ],
        'currency': typing.Union[CurrencySchema, decimal.Decimal, int, ],
        'department': typing.Union[DepartmentSchema, decimal.Decimal, int, ],
        'departments': typing.Union[DepartmentsSchema, str, ],
        'exclude': typing.Union[ExcludeSchema, str, ],
        'exclude_punchout': typing.Union[ExcludePunchoutSchema, bool, ],
        'format': typing.Union[FormatSchema, str, ],
        'fulfilment_status': typing.Union[FulfilmentStatusSchema, str, ],
        'is_purchased': typing.Union[IsPurchasedSchema, bool, ],
        'is_recurring': typing.Union[IsRecurringSchema, bool, ],
        'last_changed_by': typing.Union[LastChangedBySchema, decimal.Decimal, int, ],
        'last_modified_0': typing.Union[LastModified0Schema, str, date, ],
        'last_modified_1': typing.Union[LastModified1Schema, str, date, ],
        'lineComment': typing.Union[LineCommentSchema, str, ],
        'location': typing.Union[LocationSchema, decimal.Decimal, int, ],
        'locations': typing.Union[LocationsSchema, str, ],
        'name': typing.Union[NameSchema, str, ],
        'num': typing.Union[NumSchema, str, ],
        'orderNum': typing.Union[OrderNumSchema, decimal.Decimal, int, ],
        'orderNum__status': typing.Union[OrderNumStatusSchema, decimal.Decimal, int, ],
        'order_by': typing.Union[OrderBySchema, str, ],
        'order_created_date_0': typing.Union[OrderCreatedDate0Schema, str, date, ],
        'order_created_date_1': typing.Union[OrderCreatedDate1Schema, str, date, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'page_size': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        'po_created_date_0': typing.Union[PoCreatedDate0Schema, str, date, ],
        'po_created_date_1': typing.Union[PoCreatedDate1Schema, str, date, ],
        'po_vendor': typing.Union[PoVendorSchema, decimal.Decimal, int, ],
        'pref_vendor': typing.Union[PrefVendorSchema, decimal.Decimal, int, ],
        'price': typing.Union[PriceSchema, decimal.Decimal, int, float, ],
        'purchase_agreement': typing.Union[PurchaseAgreementSchema, decimal.Decimal, int, float, ],
        'purchased_date_0': typing.Union[PurchasedDate0Schema, str, date, ],
        'purchased_date_1': typing.Union[PurchasedDate1Schema, str, date, ],
        'purchaser': typing.Union[PurchaserSchema, decimal.Decimal, int, ],
        'quantity': typing.Union[QuantitySchema, decimal.Decimal, int, float, ],
        'receivedFailQty': typing.Union[ReceivedFailQtySchema, decimal.Decimal, int, float, ],
        'receivedPassQty': typing.Union[ReceivedPassQtySchema, decimal.Decimal, int, float, ],
        'requester': typing.Union[RequesterSchema, decimal.Decimal, int, ],
        'search': typing.Union[SearchSchema, str, ],
        'sku': typing.Union[SkuSchema, str, ],
        'status': typing.Union[StatusSchema, None, decimal.Decimal, int, ],
        'type': typing.Union[TypeSchema, decimal.Decimal, int, ],
        'unit': typing.Union[UnitSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_account = api_client.QueryParameter(
    name="account",
    style=api_client.ParameterStyle.FORM,
    schema=AccountSchema,
    explode=True,
)
request_query_account_code = api_client.QueryParameter(
    name="account_code",
    style=api_client.ParameterStyle.FORM,
    schema=AccountCodeSchema,
    explode=True,
)
request_query_active = api_client.QueryParameter(
    name="active",
    style=api_client.ParameterStyle.FORM,
    schema=ActiveSchema,
    explode=True,
)
request_query_approved_datetime_0 = api_client.QueryParameter(
    name="approved_datetime_0",
    style=api_client.ParameterStyle.FORM,
    schema=ApprovedDatetime0Schema,
    explode=True,
)
request_query_approved_datetime_1 = api_client.QueryParameter(
    name="approved_datetime_1",
    style=api_client.ParameterStyle.FORM,
    schema=ApprovedDatetime1Schema,
    explode=True,
)
request_query_approved_price = api_client.QueryParameter(
    name="approved_price",
    style=api_client.ParameterStyle.FORM,
    schema=ApprovedPriceSchema,
    explode=True,
)
request_query_approved_quantity = api_client.QueryParameter(
    name="approved_quantity",
    style=api_client.ParameterStyle.FORM,
    schema=ApprovedQuantitySchema,
    explode=True,
)
request_query_approver = api_client.QueryParameter(
    name="approver",
    style=api_client.ParameterStyle.FORM,
    schema=ApproverSchema,
    explode=True,
)
request_query_approver_id = api_client.QueryParameter(
    name="approver_id",
    style=api_client.ParameterStyle.FORM,
    schema=ApproverIdSchema,
    explode=True,
)
request_query_branch = api_client.QueryParameter(
    name="branch",
    style=api_client.ParameterStyle.FORM,
    schema=BranchSchema,
    explode=True,
)
request_query_catalog = api_client.QueryParameter(
    name="catalog",
    style=api_client.ParameterStyle.FORM,
    schema=CatalogSchema,
    explode=True,
)
request_query_catalog_item = api_client.QueryParameter(
    name="catalog_item",
    style=api_client.ParameterStyle.FORM,
    schema=CatalogItemSchema,
    explode=True,
)
request_query_currency = api_client.QueryParameter(
    name="currency",
    style=api_client.ParameterStyle.FORM,
    schema=CurrencySchema,
    explode=True,
)
request_query_department = api_client.QueryParameter(
    name="department",
    style=api_client.ParameterStyle.FORM,
    schema=DepartmentSchema,
    explode=True,
)
request_query_departments = api_client.QueryParameter(
    name="departments",
    style=api_client.ParameterStyle.FORM,
    schema=DepartmentsSchema,
    explode=True,
)
request_query_exclude = api_client.QueryParameter(
    name="exclude",
    style=api_client.ParameterStyle.FORM,
    schema=ExcludeSchema,
    explode=True,
)
request_query_exclude_punchout = api_client.QueryParameter(
    name="exclude_punchout",
    style=api_client.ParameterStyle.FORM,
    schema=ExcludePunchoutSchema,
    explode=True,
)
request_query_format = api_client.QueryParameter(
    name="format",
    style=api_client.ParameterStyle.FORM,
    schema=FormatSchema,
    explode=True,
)
request_query_fulfilment_status = api_client.QueryParameter(
    name="fulfilment_status",
    style=api_client.ParameterStyle.FORM,
    schema=FulfilmentStatusSchema,
    explode=True,
)
request_query_is_purchased = api_client.QueryParameter(
    name="is_purchased",
    style=api_client.ParameterStyle.FORM,
    schema=IsPurchasedSchema,
    explode=True,
)
request_query_is_recurring = api_client.QueryParameter(
    name="is_recurring",
    style=api_client.ParameterStyle.FORM,
    schema=IsRecurringSchema,
    explode=True,
)
request_query_last_changed_by = api_client.QueryParameter(
    name="last_changed_by",
    style=api_client.ParameterStyle.FORM,
    schema=LastChangedBySchema,
    explode=True,
)
request_query_last_modified_0 = api_client.QueryParameter(
    name="last_modified_0",
    style=api_client.ParameterStyle.FORM,
    schema=LastModified0Schema,
    explode=True,
)
request_query_last_modified_1 = api_client.QueryParameter(
    name="last_modified_1",
    style=api_client.ParameterStyle.FORM,
    schema=LastModified1Schema,
    explode=True,
)
request_query_line_comment = api_client.QueryParameter(
    name="lineComment",
    style=api_client.ParameterStyle.FORM,
    schema=LineCommentSchema,
    explode=True,
)
request_query_location = api_client.QueryParameter(
    name="location",
    style=api_client.ParameterStyle.FORM,
    schema=LocationSchema,
    explode=True,
)
request_query_locations = api_client.QueryParameter(
    name="locations",
    style=api_client.ParameterStyle.FORM,
    schema=LocationsSchema,
    explode=True,
)
request_query_name = api_client.QueryParameter(
    name="name",
    style=api_client.ParameterStyle.FORM,
    schema=NameSchema,
    explode=True,
)
request_query_num = api_client.QueryParameter(
    name="num",
    style=api_client.ParameterStyle.FORM,
    schema=NumSchema,
    explode=True,
)
request_query_order_num = api_client.QueryParameter(
    name="orderNum",
    style=api_client.ParameterStyle.FORM,
    schema=OrderNumSchema,
    explode=True,
)
request_query_order_num__status = api_client.QueryParameter(
    name="orderNum__status",
    style=api_client.ParameterStyle.FORM,
    schema=OrderNumStatusSchema,
    explode=True,
)
request_query_order_by = api_client.QueryParameter(
    name="order_by",
    style=api_client.ParameterStyle.FORM,
    schema=OrderBySchema,
    explode=True,
)
request_query_order_created_date_0 = api_client.QueryParameter(
    name="order_created_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=OrderCreatedDate0Schema,
    explode=True,
)
request_query_order_created_date_1 = api_client.QueryParameter(
    name="order_created_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=OrderCreatedDate1Schema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="page_size",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_po_created_date_0 = api_client.QueryParameter(
    name="po_created_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=PoCreatedDate0Schema,
    explode=True,
)
request_query_po_created_date_1 = api_client.QueryParameter(
    name="po_created_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=PoCreatedDate1Schema,
    explode=True,
)
request_query_po_vendor = api_client.QueryParameter(
    name="po_vendor",
    style=api_client.ParameterStyle.FORM,
    schema=PoVendorSchema,
    explode=True,
)
request_query_pref_vendor = api_client.QueryParameter(
    name="pref_vendor",
    style=api_client.ParameterStyle.FORM,
    schema=PrefVendorSchema,
    explode=True,
)
request_query_price = api_client.QueryParameter(
    name="price",
    style=api_client.ParameterStyle.FORM,
    schema=PriceSchema,
    explode=True,
)
request_query_purchase_agreement = api_client.QueryParameter(
    name="purchase_agreement",
    style=api_client.ParameterStyle.FORM,
    schema=PurchaseAgreementSchema,
    explode=True,
)
request_query_purchased_date_0 = api_client.QueryParameter(
    name="purchased_date_0",
    style=api_client.ParameterStyle.FORM,
    schema=PurchasedDate0Schema,
    explode=True,
)
request_query_purchased_date_1 = api_client.QueryParameter(
    name="purchased_date_1",
    style=api_client.ParameterStyle.FORM,
    schema=PurchasedDate1Schema,
    explode=True,
)
request_query_purchaser = api_client.QueryParameter(
    name="purchaser",
    style=api_client.ParameterStyle.FORM,
    schema=PurchaserSchema,
    explode=True,
)
request_query_quantity = api_client.QueryParameter(
    name="quantity",
    style=api_client.ParameterStyle.FORM,
    schema=QuantitySchema,
    explode=True,
)
request_query_received_fail_qty = api_client.QueryParameter(
    name="receivedFailQty",
    style=api_client.ParameterStyle.FORM,
    schema=ReceivedFailQtySchema,
    explode=True,
)
request_query_received_pass_qty = api_client.QueryParameter(
    name="receivedPassQty",
    style=api_client.ParameterStyle.FORM,
    schema=ReceivedPassQtySchema,
    explode=True,
)
request_query_requester = api_client.QueryParameter(
    name="requester",
    style=api_client.ParameterStyle.FORM,
    schema=RequesterSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
request_query_sku = api_client.QueryParameter(
    name="sku",
    style=api_client.ParameterStyle.FORM,
    schema=SkuSchema,
    explode=True,
)
request_query_status = api_client.QueryParameter(
    name="status",
    style=api_client.ParameterStyle.FORM,
    schema=StatusSchema,
    explode=True,
)
request_query_type = api_client.QueryParameter(
    name="type",
    style=api_client.ParameterStyle.FORM,
    schema=TypeSchema,
    explode=True,
)
request_query_unit = api_client.QueryParameter(
    name="unit",
    style=api_client.ParameterStyle.FORM,
    schema=UnitSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = PaginatedOrderItemListSchema
SchemaFor200ResponseBodyTextCsv = PaginatedOrderItemListSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: PaginatedOrderItemList


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: PaginatedOrderItemList


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/csv': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextCsv),
    },
)
_all_accept_content_types = (
    'application/json',
    'text/csv',
)


class BaseApi(api_client.Api):

    def _list_items_mapped_args(
        self,
        account: typing.Optional[int] = None,
        account_code: typing.Optional[int] = None,
        active: typing.Optional[bool] = None,
        approved_datetime_0: typing.Optional[date] = None,
        approved_datetime_1: typing.Optional[date] = None,
        approved_price: typing.Optional[typing.Union[int, float]] = None,
        approved_quantity: typing.Optional[typing.Union[int, float]] = None,
        approver: typing.Optional[typing.Union[int, float]] = None,
        approver_id: typing.Optional[typing.Union[int, float]] = None,
        branch: typing.Optional[int] = None,
        catalog: typing.Optional[bool] = None,
        catalog_item: typing.Optional[str] = None,
        currency: typing.Optional[int] = None,
        department: typing.Optional[int] = None,
        departments: typing.Optional[str] = None,
        exclude: typing.Optional[str] = None,
        exclude_punchout: typing.Optional[bool] = None,
        format: typing.Optional[str] = None,
        fulfilment_status: typing.Optional[str] = None,
        is_purchased: typing.Optional[bool] = None,
        is_recurring: typing.Optional[bool] = None,
        last_changed_by: typing.Optional[int] = None,
        last_modified_0: typing.Optional[date] = None,
        last_modified_1: typing.Optional[date] = None,
        line_comment: typing.Optional[str] = None,
        location: typing.Optional[int] = None,
        locations: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        num: typing.Optional[str] = None,
        order_num: typing.Optional[int] = None,
        order_num__status: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_created_date_0: typing.Optional[date] = None,
        order_created_date_1: typing.Optional[date] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        po_created_date_0: typing.Optional[date] = None,
        po_created_date_1: typing.Optional[date] = None,
        po_vendor: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        price: typing.Optional[typing.Union[int, float]] = None,
        purchase_agreement: typing.Optional[typing.Union[int, float]] = None,
        purchased_date_0: typing.Optional[date] = None,
        purchased_date_1: typing.Optional[date] = None,
        purchaser: typing.Optional[int] = None,
        quantity: typing.Optional[typing.Union[int, float]] = None,
        received_fail_qty: typing.Optional[typing.Union[int, float]] = None,
        received_pass_qty: typing.Optional[typing.Union[int, float]] = None,
        requester: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        type: typing.Optional[int] = None,
        unit: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if account is not None:
            _query_params["account"] = account
        if account_code is not None:
            _query_params["account_code"] = account_code
        if active is not None:
            _query_params["active"] = active
        if approved_datetime_0 is not None:
            _query_params["approved_datetime_0"] = approved_datetime_0
        if approved_datetime_1 is not None:
            _query_params["approved_datetime_1"] = approved_datetime_1
        if approved_price is not None:
            _query_params["approved_price"] = approved_price
        if approved_quantity is not None:
            _query_params["approved_quantity"] = approved_quantity
        if approver is not None:
            _query_params["approver"] = approver
        if approver_id is not None:
            _query_params["approver_id"] = approver_id
        if branch is not None:
            _query_params["branch"] = branch
        if catalog is not None:
            _query_params["catalog"] = catalog
        if catalog_item is not None:
            _query_params["catalog_item"] = catalog_item
        if currency is not None:
            _query_params["currency"] = currency
        if department is not None:
            _query_params["department"] = department
        if departments is not None:
            _query_params["departments"] = departments
        if exclude is not None:
            _query_params["exclude"] = exclude
        if exclude_punchout is not None:
            _query_params["exclude_punchout"] = exclude_punchout
        if format is not None:
            _query_params["format"] = format
        if fulfilment_status is not None:
            _query_params["fulfilment_status"] = fulfilment_status
        if is_purchased is not None:
            _query_params["is_purchased"] = is_purchased
        if is_recurring is not None:
            _query_params["is_recurring"] = is_recurring
        if last_changed_by is not None:
            _query_params["last_changed_by"] = last_changed_by
        if last_modified_0 is not None:
            _query_params["last_modified_0"] = last_modified_0
        if last_modified_1 is not None:
            _query_params["last_modified_1"] = last_modified_1
        if line_comment is not None:
            _query_params["lineComment"] = line_comment
        if location is not None:
            _query_params["location"] = location
        if locations is not None:
            _query_params["locations"] = locations
        if name is not None:
            _query_params["name"] = name
        if num is not None:
            _query_params["num"] = num
        if order_num is not None:
            _query_params["orderNum"] = order_num
        if order_num__status is not None:
            _query_params["orderNum__status"] = order_num__status
        if order_by is not None:
            _query_params["order_by"] = order_by
        if order_created_date_0 is not None:
            _query_params["order_created_date_0"] = order_created_date_0
        if order_created_date_1 is not None:
            _query_params["order_created_date_1"] = order_created_date_1
        if page is not None:
            _query_params["page"] = page
        if page_size is not None:
            _query_params["page_size"] = page_size
        if po_created_date_0 is not None:
            _query_params["po_created_date_0"] = po_created_date_0
        if po_created_date_1 is not None:
            _query_params["po_created_date_1"] = po_created_date_1
        if po_vendor is not None:
            _query_params["po_vendor"] = po_vendor
        if pref_vendor is not None:
            _query_params["pref_vendor"] = pref_vendor
        if price is not None:
            _query_params["price"] = price
        if purchase_agreement is not None:
            _query_params["purchase_agreement"] = purchase_agreement
        if purchased_date_0 is not None:
            _query_params["purchased_date_0"] = purchased_date_0
        if purchased_date_1 is not None:
            _query_params["purchased_date_1"] = purchased_date_1
        if purchaser is not None:
            _query_params["purchaser"] = purchaser
        if quantity is not None:
            _query_params["quantity"] = quantity
        if received_fail_qty is not None:
            _query_params["receivedFailQty"] = received_fail_qty
        if received_pass_qty is not None:
            _query_params["receivedPassQty"] = received_pass_qty
        if requester is not None:
            _query_params["requester"] = requester
        if search is not None:
            _query_params["search"] = search
        if sku is not None:
            _query_params["sku"] = sku
        if status is not None:
            _query_params["status"] = status
        if type is not None:
            _query_params["type"] = type
        if unit is not None:
            _query_params["unit"] = unit
        args.query = _query_params
        return args

    async def _alist_items_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get list of all order items
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_account,
            request_query_account_code,
            request_query_active,
            request_query_approved_datetime_0,
            request_query_approved_datetime_1,
            request_query_approved_price,
            request_query_approved_quantity,
            request_query_approver,
            request_query_approver_id,
            request_query_branch,
            request_query_catalog,
            request_query_catalog_item,
            request_query_currency,
            request_query_department,
            request_query_departments,
            request_query_exclude,
            request_query_exclude_punchout,
            request_query_format,
            request_query_fulfilment_status,
            request_query_is_purchased,
            request_query_is_recurring,
            request_query_last_changed_by,
            request_query_last_modified_0,
            request_query_last_modified_1,
            request_query_line_comment,
            request_query_location,
            request_query_locations,
            request_query_name,
            request_query_num,
            request_query_order_num,
            request_query_order_num__status,
            request_query_order_by,
            request_query_order_created_date_0,
            request_query_order_created_date_1,
            request_query_page,
            request_query_page_size,
            request_query_po_created_date_0,
            request_query_po_created_date_1,
            request_query_po_vendor,
            request_query_pref_vendor,
            request_query_price,
            request_query_purchase_agreement,
            request_query_purchased_date_0,
            request_query_purchased_date_1,
            request_query_purchaser,
            request_query_quantity,
            request_query_received_fail_qty,
            request_query_received_pass_qty,
            request_query_requester,
            request_query_search,
            request_query_sku,
            request_query_status,
            request_query_type,
            request_query_unit,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v3/order-items',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_items_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get list of all order items
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_account,
            request_query_account_code,
            request_query_active,
            request_query_approved_datetime_0,
            request_query_approved_datetime_1,
            request_query_approved_price,
            request_query_approved_quantity,
            request_query_approver,
            request_query_approver_id,
            request_query_branch,
            request_query_catalog,
            request_query_catalog_item,
            request_query_currency,
            request_query_department,
            request_query_departments,
            request_query_exclude,
            request_query_exclude_punchout,
            request_query_format,
            request_query_fulfilment_status,
            request_query_is_purchased,
            request_query_is_recurring,
            request_query_last_changed_by,
            request_query_last_modified_0,
            request_query_last_modified_1,
            request_query_line_comment,
            request_query_location,
            request_query_locations,
            request_query_name,
            request_query_num,
            request_query_order_num,
            request_query_order_num__status,
            request_query_order_by,
            request_query_order_created_date_0,
            request_query_order_created_date_1,
            request_query_page,
            request_query_page_size,
            request_query_po_created_date_0,
            request_query_po_created_date_1,
            request_query_po_vendor,
            request_query_pref_vendor,
            request_query_price,
            request_query_purchase_agreement,
            request_query_purchased_date_0,
            request_query_purchased_date_1,
            request_query_purchaser,
            request_query_quantity,
            request_query_received_fail_qty,
            request_query_received_pass_qty,
            request_query_requester,
            request_query_search,
            request_query_sku,
            request_query_status,
            request_query_type,
            request_query_unit,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v3/order-items',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListItemsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_items(
        self,
        account: typing.Optional[int] = None,
        account_code: typing.Optional[int] = None,
        active: typing.Optional[bool] = None,
        approved_datetime_0: typing.Optional[date] = None,
        approved_datetime_1: typing.Optional[date] = None,
        approved_price: typing.Optional[typing.Union[int, float]] = None,
        approved_quantity: typing.Optional[typing.Union[int, float]] = None,
        approver: typing.Optional[typing.Union[int, float]] = None,
        approver_id: typing.Optional[typing.Union[int, float]] = None,
        branch: typing.Optional[int] = None,
        catalog: typing.Optional[bool] = None,
        catalog_item: typing.Optional[str] = None,
        currency: typing.Optional[int] = None,
        department: typing.Optional[int] = None,
        departments: typing.Optional[str] = None,
        exclude: typing.Optional[str] = None,
        exclude_punchout: typing.Optional[bool] = None,
        format: typing.Optional[str] = None,
        fulfilment_status: typing.Optional[str] = None,
        is_purchased: typing.Optional[bool] = None,
        is_recurring: typing.Optional[bool] = None,
        last_changed_by: typing.Optional[int] = None,
        last_modified_0: typing.Optional[date] = None,
        last_modified_1: typing.Optional[date] = None,
        line_comment: typing.Optional[str] = None,
        location: typing.Optional[int] = None,
        locations: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        num: typing.Optional[str] = None,
        order_num: typing.Optional[int] = None,
        order_num__status: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_created_date_0: typing.Optional[date] = None,
        order_created_date_1: typing.Optional[date] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        po_created_date_0: typing.Optional[date] = None,
        po_created_date_1: typing.Optional[date] = None,
        po_vendor: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        price: typing.Optional[typing.Union[int, float]] = None,
        purchase_agreement: typing.Optional[typing.Union[int, float]] = None,
        purchased_date_0: typing.Optional[date] = None,
        purchased_date_1: typing.Optional[date] = None,
        purchaser: typing.Optional[int] = None,
        quantity: typing.Optional[typing.Union[int, float]] = None,
        received_fail_qty: typing.Optional[typing.Union[int, float]] = None,
        received_pass_qty: typing.Optional[typing.Union[int, float]] = None,
        requester: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        type: typing.Optional[int] = None,
        unit: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_items_mapped_args(
            account=account,
            account_code=account_code,
            active=active,
            approved_datetime_0=approved_datetime_0,
            approved_datetime_1=approved_datetime_1,
            approved_price=approved_price,
            approved_quantity=approved_quantity,
            approver=approver,
            approver_id=approver_id,
            branch=branch,
            catalog=catalog,
            catalog_item=catalog_item,
            currency=currency,
            department=department,
            departments=departments,
            exclude=exclude,
            exclude_punchout=exclude_punchout,
            format=format,
            fulfilment_status=fulfilment_status,
            is_purchased=is_purchased,
            is_recurring=is_recurring,
            last_changed_by=last_changed_by,
            last_modified_0=last_modified_0,
            last_modified_1=last_modified_1,
            line_comment=line_comment,
            location=location,
            locations=locations,
            name=name,
            num=num,
            order_num=order_num,
            order_num__status=order_num__status,
            order_by=order_by,
            order_created_date_0=order_created_date_0,
            order_created_date_1=order_created_date_1,
            page=page,
            page_size=page_size,
            po_created_date_0=po_created_date_0,
            po_created_date_1=po_created_date_1,
            po_vendor=po_vendor,
            pref_vendor=pref_vendor,
            price=price,
            purchase_agreement=purchase_agreement,
            purchased_date_0=purchased_date_0,
            purchased_date_1=purchased_date_1,
            purchaser=purchaser,
            quantity=quantity,
            received_fail_qty=received_fail_qty,
            received_pass_qty=received_pass_qty,
            requester=requester,
            search=search,
            sku=sku,
            status=status,
            type=type,
            unit=unit,
        )
        return await self._alist_items_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def list_items(
        self,
        account: typing.Optional[int] = None,
        account_code: typing.Optional[int] = None,
        active: typing.Optional[bool] = None,
        approved_datetime_0: typing.Optional[date] = None,
        approved_datetime_1: typing.Optional[date] = None,
        approved_price: typing.Optional[typing.Union[int, float]] = None,
        approved_quantity: typing.Optional[typing.Union[int, float]] = None,
        approver: typing.Optional[typing.Union[int, float]] = None,
        approver_id: typing.Optional[typing.Union[int, float]] = None,
        branch: typing.Optional[int] = None,
        catalog: typing.Optional[bool] = None,
        catalog_item: typing.Optional[str] = None,
        currency: typing.Optional[int] = None,
        department: typing.Optional[int] = None,
        departments: typing.Optional[str] = None,
        exclude: typing.Optional[str] = None,
        exclude_punchout: typing.Optional[bool] = None,
        format: typing.Optional[str] = None,
        fulfilment_status: typing.Optional[str] = None,
        is_purchased: typing.Optional[bool] = None,
        is_recurring: typing.Optional[bool] = None,
        last_changed_by: typing.Optional[int] = None,
        last_modified_0: typing.Optional[date] = None,
        last_modified_1: typing.Optional[date] = None,
        line_comment: typing.Optional[str] = None,
        location: typing.Optional[int] = None,
        locations: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        num: typing.Optional[str] = None,
        order_num: typing.Optional[int] = None,
        order_num__status: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_created_date_0: typing.Optional[date] = None,
        order_created_date_1: typing.Optional[date] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        po_created_date_0: typing.Optional[date] = None,
        po_created_date_1: typing.Optional[date] = None,
        po_vendor: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        price: typing.Optional[typing.Union[int, float]] = None,
        purchase_agreement: typing.Optional[typing.Union[int, float]] = None,
        purchased_date_0: typing.Optional[date] = None,
        purchased_date_1: typing.Optional[date] = None,
        purchaser: typing.Optional[int] = None,
        quantity: typing.Optional[typing.Union[int, float]] = None,
        received_fail_qty: typing.Optional[typing.Union[int, float]] = None,
        received_pass_qty: typing.Optional[typing.Union[int, float]] = None,
        requester: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        type: typing.Optional[int] = None,
        unit: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_items_mapped_args(
            account=account,
            account_code=account_code,
            active=active,
            approved_datetime_0=approved_datetime_0,
            approved_datetime_1=approved_datetime_1,
            approved_price=approved_price,
            approved_quantity=approved_quantity,
            approver=approver,
            approver_id=approver_id,
            branch=branch,
            catalog=catalog,
            catalog_item=catalog_item,
            currency=currency,
            department=department,
            departments=departments,
            exclude=exclude,
            exclude_punchout=exclude_punchout,
            format=format,
            fulfilment_status=fulfilment_status,
            is_purchased=is_purchased,
            is_recurring=is_recurring,
            last_changed_by=last_changed_by,
            last_modified_0=last_modified_0,
            last_modified_1=last_modified_1,
            line_comment=line_comment,
            location=location,
            locations=locations,
            name=name,
            num=num,
            order_num=order_num,
            order_num__status=order_num__status,
            order_by=order_by,
            order_created_date_0=order_created_date_0,
            order_created_date_1=order_created_date_1,
            page=page,
            page_size=page_size,
            po_created_date_0=po_created_date_0,
            po_created_date_1=po_created_date_1,
            po_vendor=po_vendor,
            pref_vendor=pref_vendor,
            price=price,
            purchase_agreement=purchase_agreement,
            purchased_date_0=purchased_date_0,
            purchased_date_1=purchased_date_1,
            purchaser=purchaser,
            quantity=quantity,
            received_fail_qty=received_fail_qty,
            received_pass_qty=received_pass_qty,
            requester=requester,
            search=search,
            sku=sku,
            status=status,
            type=type,
            unit=unit,
        )
        return self._list_items_oapg(
            query_params=args.query,
        )

class ListItems(BaseApi):

    async def alist_items(
        self,
        account: typing.Optional[int] = None,
        account_code: typing.Optional[int] = None,
        active: typing.Optional[bool] = None,
        approved_datetime_0: typing.Optional[date] = None,
        approved_datetime_1: typing.Optional[date] = None,
        approved_price: typing.Optional[typing.Union[int, float]] = None,
        approved_quantity: typing.Optional[typing.Union[int, float]] = None,
        approver: typing.Optional[typing.Union[int, float]] = None,
        approver_id: typing.Optional[typing.Union[int, float]] = None,
        branch: typing.Optional[int] = None,
        catalog: typing.Optional[bool] = None,
        catalog_item: typing.Optional[str] = None,
        currency: typing.Optional[int] = None,
        department: typing.Optional[int] = None,
        departments: typing.Optional[str] = None,
        exclude: typing.Optional[str] = None,
        exclude_punchout: typing.Optional[bool] = None,
        format: typing.Optional[str] = None,
        fulfilment_status: typing.Optional[str] = None,
        is_purchased: typing.Optional[bool] = None,
        is_recurring: typing.Optional[bool] = None,
        last_changed_by: typing.Optional[int] = None,
        last_modified_0: typing.Optional[date] = None,
        last_modified_1: typing.Optional[date] = None,
        line_comment: typing.Optional[str] = None,
        location: typing.Optional[int] = None,
        locations: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        num: typing.Optional[str] = None,
        order_num: typing.Optional[int] = None,
        order_num__status: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_created_date_0: typing.Optional[date] = None,
        order_created_date_1: typing.Optional[date] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        po_created_date_0: typing.Optional[date] = None,
        po_created_date_1: typing.Optional[date] = None,
        po_vendor: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        price: typing.Optional[typing.Union[int, float]] = None,
        purchase_agreement: typing.Optional[typing.Union[int, float]] = None,
        purchased_date_0: typing.Optional[date] = None,
        purchased_date_1: typing.Optional[date] = None,
        purchaser: typing.Optional[int] = None,
        quantity: typing.Optional[typing.Union[int, float]] = None,
        received_fail_qty: typing.Optional[typing.Union[int, float]] = None,
        received_pass_qty: typing.Optional[typing.Union[int, float]] = None,
        requester: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        type: typing.Optional[int] = None,
        unit: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> PaginatedOrderItemListPydantic:
        raw_response = await self.raw.alist_items(
            account=account,
            account_code=account_code,
            active=active,
            approved_datetime_0=approved_datetime_0,
            approved_datetime_1=approved_datetime_1,
            approved_price=approved_price,
            approved_quantity=approved_quantity,
            approver=approver,
            approver_id=approver_id,
            branch=branch,
            catalog=catalog,
            catalog_item=catalog_item,
            currency=currency,
            department=department,
            departments=departments,
            exclude=exclude,
            exclude_punchout=exclude_punchout,
            format=format,
            fulfilment_status=fulfilment_status,
            is_purchased=is_purchased,
            is_recurring=is_recurring,
            last_changed_by=last_changed_by,
            last_modified_0=last_modified_0,
            last_modified_1=last_modified_1,
            line_comment=line_comment,
            location=location,
            locations=locations,
            name=name,
            num=num,
            order_num=order_num,
            order_num__status=order_num__status,
            order_by=order_by,
            order_created_date_0=order_created_date_0,
            order_created_date_1=order_created_date_1,
            page=page,
            page_size=page_size,
            po_created_date_0=po_created_date_0,
            po_created_date_1=po_created_date_1,
            po_vendor=po_vendor,
            pref_vendor=pref_vendor,
            price=price,
            purchase_agreement=purchase_agreement,
            purchased_date_0=purchased_date_0,
            purchased_date_1=purchased_date_1,
            purchaser=purchaser,
            quantity=quantity,
            received_fail_qty=received_fail_qty,
            received_pass_qty=received_pass_qty,
            requester=requester,
            search=search,
            sku=sku,
            status=status,
            type=type,
            unit=unit,
            **kwargs,
        )
        if validate:
            return PaginatedOrderItemListPydantic(**raw_response.body)
        return api_client.construct_model_instance(PaginatedOrderItemListPydantic, raw_response.body)
    
    
    def list_items(
        self,
        account: typing.Optional[int] = None,
        account_code: typing.Optional[int] = None,
        active: typing.Optional[bool] = None,
        approved_datetime_0: typing.Optional[date] = None,
        approved_datetime_1: typing.Optional[date] = None,
        approved_price: typing.Optional[typing.Union[int, float]] = None,
        approved_quantity: typing.Optional[typing.Union[int, float]] = None,
        approver: typing.Optional[typing.Union[int, float]] = None,
        approver_id: typing.Optional[typing.Union[int, float]] = None,
        branch: typing.Optional[int] = None,
        catalog: typing.Optional[bool] = None,
        catalog_item: typing.Optional[str] = None,
        currency: typing.Optional[int] = None,
        department: typing.Optional[int] = None,
        departments: typing.Optional[str] = None,
        exclude: typing.Optional[str] = None,
        exclude_punchout: typing.Optional[bool] = None,
        format: typing.Optional[str] = None,
        fulfilment_status: typing.Optional[str] = None,
        is_purchased: typing.Optional[bool] = None,
        is_recurring: typing.Optional[bool] = None,
        last_changed_by: typing.Optional[int] = None,
        last_modified_0: typing.Optional[date] = None,
        last_modified_1: typing.Optional[date] = None,
        line_comment: typing.Optional[str] = None,
        location: typing.Optional[int] = None,
        locations: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        num: typing.Optional[str] = None,
        order_num: typing.Optional[int] = None,
        order_num__status: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_created_date_0: typing.Optional[date] = None,
        order_created_date_1: typing.Optional[date] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        po_created_date_0: typing.Optional[date] = None,
        po_created_date_1: typing.Optional[date] = None,
        po_vendor: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        price: typing.Optional[typing.Union[int, float]] = None,
        purchase_agreement: typing.Optional[typing.Union[int, float]] = None,
        purchased_date_0: typing.Optional[date] = None,
        purchased_date_1: typing.Optional[date] = None,
        purchaser: typing.Optional[int] = None,
        quantity: typing.Optional[typing.Union[int, float]] = None,
        received_fail_qty: typing.Optional[typing.Union[int, float]] = None,
        received_pass_qty: typing.Optional[typing.Union[int, float]] = None,
        requester: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        type: typing.Optional[int] = None,
        unit: typing.Optional[str] = None,
        validate: bool = False,
    ) -> PaginatedOrderItemListPydantic:
        raw_response = self.raw.list_items(
            account=account,
            account_code=account_code,
            active=active,
            approved_datetime_0=approved_datetime_0,
            approved_datetime_1=approved_datetime_1,
            approved_price=approved_price,
            approved_quantity=approved_quantity,
            approver=approver,
            approver_id=approver_id,
            branch=branch,
            catalog=catalog,
            catalog_item=catalog_item,
            currency=currency,
            department=department,
            departments=departments,
            exclude=exclude,
            exclude_punchout=exclude_punchout,
            format=format,
            fulfilment_status=fulfilment_status,
            is_purchased=is_purchased,
            is_recurring=is_recurring,
            last_changed_by=last_changed_by,
            last_modified_0=last_modified_0,
            last_modified_1=last_modified_1,
            line_comment=line_comment,
            location=location,
            locations=locations,
            name=name,
            num=num,
            order_num=order_num,
            order_num__status=order_num__status,
            order_by=order_by,
            order_created_date_0=order_created_date_0,
            order_created_date_1=order_created_date_1,
            page=page,
            page_size=page_size,
            po_created_date_0=po_created_date_0,
            po_created_date_1=po_created_date_1,
            po_vendor=po_vendor,
            pref_vendor=pref_vendor,
            price=price,
            purchase_agreement=purchase_agreement,
            purchased_date_0=purchased_date_0,
            purchased_date_1=purchased_date_1,
            purchaser=purchaser,
            quantity=quantity,
            received_fail_qty=received_fail_qty,
            received_pass_qty=received_pass_qty,
            requester=requester,
            search=search,
            sku=sku,
            status=status,
            type=type,
            unit=unit,
        )
        if validate:
            return PaginatedOrderItemListPydantic(**raw_response.body)
        return api_client.construct_model_instance(PaginatedOrderItemListPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        account: typing.Optional[int] = None,
        account_code: typing.Optional[int] = None,
        active: typing.Optional[bool] = None,
        approved_datetime_0: typing.Optional[date] = None,
        approved_datetime_1: typing.Optional[date] = None,
        approved_price: typing.Optional[typing.Union[int, float]] = None,
        approved_quantity: typing.Optional[typing.Union[int, float]] = None,
        approver: typing.Optional[typing.Union[int, float]] = None,
        approver_id: typing.Optional[typing.Union[int, float]] = None,
        branch: typing.Optional[int] = None,
        catalog: typing.Optional[bool] = None,
        catalog_item: typing.Optional[str] = None,
        currency: typing.Optional[int] = None,
        department: typing.Optional[int] = None,
        departments: typing.Optional[str] = None,
        exclude: typing.Optional[str] = None,
        exclude_punchout: typing.Optional[bool] = None,
        format: typing.Optional[str] = None,
        fulfilment_status: typing.Optional[str] = None,
        is_purchased: typing.Optional[bool] = None,
        is_recurring: typing.Optional[bool] = None,
        last_changed_by: typing.Optional[int] = None,
        last_modified_0: typing.Optional[date] = None,
        last_modified_1: typing.Optional[date] = None,
        line_comment: typing.Optional[str] = None,
        location: typing.Optional[int] = None,
        locations: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        num: typing.Optional[str] = None,
        order_num: typing.Optional[int] = None,
        order_num__status: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_created_date_0: typing.Optional[date] = None,
        order_created_date_1: typing.Optional[date] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        po_created_date_0: typing.Optional[date] = None,
        po_created_date_1: typing.Optional[date] = None,
        po_vendor: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        price: typing.Optional[typing.Union[int, float]] = None,
        purchase_agreement: typing.Optional[typing.Union[int, float]] = None,
        purchased_date_0: typing.Optional[date] = None,
        purchased_date_1: typing.Optional[date] = None,
        purchaser: typing.Optional[int] = None,
        quantity: typing.Optional[typing.Union[int, float]] = None,
        received_fail_qty: typing.Optional[typing.Union[int, float]] = None,
        received_pass_qty: typing.Optional[typing.Union[int, float]] = None,
        requester: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        type: typing.Optional[int] = None,
        unit: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_items_mapped_args(
            account=account,
            account_code=account_code,
            active=active,
            approved_datetime_0=approved_datetime_0,
            approved_datetime_1=approved_datetime_1,
            approved_price=approved_price,
            approved_quantity=approved_quantity,
            approver=approver,
            approver_id=approver_id,
            branch=branch,
            catalog=catalog,
            catalog_item=catalog_item,
            currency=currency,
            department=department,
            departments=departments,
            exclude=exclude,
            exclude_punchout=exclude_punchout,
            format=format,
            fulfilment_status=fulfilment_status,
            is_purchased=is_purchased,
            is_recurring=is_recurring,
            last_changed_by=last_changed_by,
            last_modified_0=last_modified_0,
            last_modified_1=last_modified_1,
            line_comment=line_comment,
            location=location,
            locations=locations,
            name=name,
            num=num,
            order_num=order_num,
            order_num__status=order_num__status,
            order_by=order_by,
            order_created_date_0=order_created_date_0,
            order_created_date_1=order_created_date_1,
            page=page,
            page_size=page_size,
            po_created_date_0=po_created_date_0,
            po_created_date_1=po_created_date_1,
            po_vendor=po_vendor,
            pref_vendor=pref_vendor,
            price=price,
            purchase_agreement=purchase_agreement,
            purchased_date_0=purchased_date_0,
            purchased_date_1=purchased_date_1,
            purchaser=purchaser,
            quantity=quantity,
            received_fail_qty=received_fail_qty,
            received_pass_qty=received_pass_qty,
            requester=requester,
            search=search,
            sku=sku,
            status=status,
            type=type,
            unit=unit,
        )
        return await self._alist_items_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        account: typing.Optional[int] = None,
        account_code: typing.Optional[int] = None,
        active: typing.Optional[bool] = None,
        approved_datetime_0: typing.Optional[date] = None,
        approved_datetime_1: typing.Optional[date] = None,
        approved_price: typing.Optional[typing.Union[int, float]] = None,
        approved_quantity: typing.Optional[typing.Union[int, float]] = None,
        approver: typing.Optional[typing.Union[int, float]] = None,
        approver_id: typing.Optional[typing.Union[int, float]] = None,
        branch: typing.Optional[int] = None,
        catalog: typing.Optional[bool] = None,
        catalog_item: typing.Optional[str] = None,
        currency: typing.Optional[int] = None,
        department: typing.Optional[int] = None,
        departments: typing.Optional[str] = None,
        exclude: typing.Optional[str] = None,
        exclude_punchout: typing.Optional[bool] = None,
        format: typing.Optional[str] = None,
        fulfilment_status: typing.Optional[str] = None,
        is_purchased: typing.Optional[bool] = None,
        is_recurring: typing.Optional[bool] = None,
        last_changed_by: typing.Optional[int] = None,
        last_modified_0: typing.Optional[date] = None,
        last_modified_1: typing.Optional[date] = None,
        line_comment: typing.Optional[str] = None,
        location: typing.Optional[int] = None,
        locations: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        num: typing.Optional[str] = None,
        order_num: typing.Optional[int] = None,
        order_num__status: typing.Optional[int] = None,
        order_by: typing.Optional[str] = None,
        order_created_date_0: typing.Optional[date] = None,
        order_created_date_1: typing.Optional[date] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        po_created_date_0: typing.Optional[date] = None,
        po_created_date_1: typing.Optional[date] = None,
        po_vendor: typing.Optional[int] = None,
        pref_vendor: typing.Optional[int] = None,
        price: typing.Optional[typing.Union[int, float]] = None,
        purchase_agreement: typing.Optional[typing.Union[int, float]] = None,
        purchased_date_0: typing.Optional[date] = None,
        purchased_date_1: typing.Optional[date] = None,
        purchaser: typing.Optional[int] = None,
        quantity: typing.Optional[typing.Union[int, float]] = None,
        received_fail_qty: typing.Optional[typing.Union[int, float]] = None,
        received_pass_qty: typing.Optional[typing.Union[int, float]] = None,
        requester: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        type: typing.Optional[int] = None,
        unit: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_items_mapped_args(
            account=account,
            account_code=account_code,
            active=active,
            approved_datetime_0=approved_datetime_0,
            approved_datetime_1=approved_datetime_1,
            approved_price=approved_price,
            approved_quantity=approved_quantity,
            approver=approver,
            approver_id=approver_id,
            branch=branch,
            catalog=catalog,
            catalog_item=catalog_item,
            currency=currency,
            department=department,
            departments=departments,
            exclude=exclude,
            exclude_punchout=exclude_punchout,
            format=format,
            fulfilment_status=fulfilment_status,
            is_purchased=is_purchased,
            is_recurring=is_recurring,
            last_changed_by=last_changed_by,
            last_modified_0=last_modified_0,
            last_modified_1=last_modified_1,
            line_comment=line_comment,
            location=location,
            locations=locations,
            name=name,
            num=num,
            order_num=order_num,
            order_num__status=order_num__status,
            order_by=order_by,
            order_created_date_0=order_created_date_0,
            order_created_date_1=order_created_date_1,
            page=page,
            page_size=page_size,
            po_created_date_0=po_created_date_0,
            po_created_date_1=po_created_date_1,
            po_vendor=po_vendor,
            pref_vendor=pref_vendor,
            price=price,
            purchase_agreement=purchase_agreement,
            purchased_date_0=purchased_date_0,
            purchased_date_1=purchased_date_1,
            purchaser=purchaser,
            quantity=quantity,
            received_fail_qty=received_fail_qty,
            received_pass_qty=received_pass_qty,
            requester=requester,
            search=search,
            sku=sku,
            status=status,
            type=type,
            unit=unit,
        )
        return self._list_items_oapg(
            query_params=args.query,
        )

