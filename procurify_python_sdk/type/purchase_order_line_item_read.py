# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING

from procurify_python_sdk.type.account_read import AccountRead
from procurify_python_sdk.type.adjustment import Adjustment
from procurify_python_sdk.type.allocation_read import AllocationRead
from procurify_python_sdk.type.attachment import Attachment
from procurify_python_sdk.type.blanket_order_item_read import BlanketOrderItemRead
from procurify_python_sdk.type.catalog_item_read_nullable import CatalogItemReadNullable
from procurify_python_sdk.type.comment import Comment
from procurify_python_sdk.type.cost_details_nullable import CostDetailsNullable
from procurify_python_sdk.type.currency_summary import CurrencySummary
from procurify_python_sdk.type.custom_field_value_read import CustomFieldValueRead
from procurify_python_sdk.type.flag_read import FlagRead
from procurify_python_sdk.type.master_logger import MasterLogger
from procurify_python_sdk.type.null_enum import NullEnum
from procurify_python_sdk.type.order_item_attachment import OrderItemAttachment
from procurify_python_sdk.type.order_item_status_enum import OrderItemStatusEnum
from procurify_python_sdk.type.purchase_order_line_item_read_po import PurchaseOrderLineItemReadPo
from procurify_python_sdk.type.recurring_order_item_nullable import RecurringOrderItemNullable
from procurify_python_sdk.type.simple_user_summary import SimpleUserSummary
from procurify_python_sdk.type.user_summary import UserSummary
from procurify_python_sdk.type.vendor_read import VendorRead
from procurify_python_sdk.type.zero_one_enum import ZeroOneEnum
from procurify_python_sdk.type.zero_one_two_enum import ZeroOneTwoEnum

class RequiredPurchaseOrderLineItemRead(TypedDict):
    account: AccountRead

    approved_datetime: typing.Optional[datetime]

    approved_quantity: typing.Union[int, float]

    attachments: typing.Optional[typing.List[OrderItemAttachment]]

    catalog_item: typing.Optional[CatalogItemReadNullable]

    currency: CurrencySummary

    item_attachments: typing.List[Attachment]

    name: str

    num: str

    pref_vendor: VendorRead

    price: str

    purchaser: UserSummary

    quantity: typing.Union[int, float]

    receivedFailQty: typing.Union[int, float]

    receivedPassQty: typing.Union[int, float]

    unit: str

    recurrence: typing.Optional[RecurringOrderItemNullable]

class OptionalPurchaseOrderLineItemRead(TypedDict, total=False):
    PO: PurchaseOrderLineItemReadPo

    PO_line_num: int

    accountCode: str

    active: bool

    approved_currency_rate: typing.Optional[str]

    approved_price: typing.Optional[str]

    approved_shipping_amount: typing.Optional[str]

    approved_tax_amount: typing.Optional[str]

    created_at: datetime

    dateInvoiced: typing.Optional[datetime]

    # External id of the order item
    external_id: str

    hot: bool

    id: int

    inventoryItem: typing.Optional[int]

    is_active: bool

    last_changed_by: typing.Optional[int]

    last_modified: datetime

    lineComment: typing.Optional[str]

    orderNum: typing.Optional[int]

    po_note: str

    po_version: int

    purchase_order: typing.Optional[int]

    shipping_amount: typing.Optional[str]

    sku: str

    status: typing.Union[OrderItemStatusEnum, NullEnum]

    tax_amount: typing.Optional[str]

    total_cost: str

    updated_at: datetime

    vendor: str

    receive_method: ZeroOneEnum

    type: ZeroOneTwoEnum

    blanket: BlanketOrderItemRead

    comments: typing.List[Comment]

    confirmation_status: typing.Optional[int]

    confirmation_status_description: typing.Optional[str]

    cost_details: typing.Optional[CostDetailsNullable]

    custom_fields: typing.List[CustomFieldValueRead]

    date_required: datetime

    has_sibling_items: bool

    line_comment: str

    logs: typing.List[MasterLogger]

    order_description: str

    order_status: int

    order_uuid: str

    punchout_supplier_icon: typing.Optional[str]

    punchout_supplier_name: typing.Optional[str]

    punchout_system: typing.Optional[int]

    punchout_vendor_reference: typing.Optional[int]

    punchout_supplier_can_update_quantity: bool

    purchase_order_number: str

    purchase_order_uuid: str

    purchased_currency_rate: str

    requester: SimpleUserSummary

    spend_allocation: typing.List[AllocationRead]

    submitted_date: datetime

    taxes: typing.Optional[typing.List[Adjustment]]

    receive_log_count: int

    approval_history: typing.List[MasterLogger]

    flags: typing.List[FlagRead]

class PurchaseOrderLineItemRead(RequiredPurchaseOrderLineItemRead, OptionalPurchaseOrderLineItemRead):
    pass
