# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class ExpenseRead(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "expense_type_fields",
            "currency_rate_final",
            "expenseReport",
            "tax_percentage",
            "transDate",
            "merchant",
            "localCurrency",
            "account",
        }
        
        class properties:
        
            @staticmethod
            def account() -> typing.Type['Account']:
                return Account
        
            @staticmethod
            def localCurrency() -> typing.Type['CurrencySummary']:
                return CurrencySummary
        
            @staticmethod
            def expense_type_fields() -> typing.Type['ExpenseReadExpenseTypeFields']:
                return ExpenseReadExpenseTypeFields
        
            @staticmethod
            def expenseReport() -> typing.Type['SimpleExpenseReport']:
                return SimpleExpenseReport
            
            
            class merchant(
                schemas.StrSchema
            ):
                pass
            transDate = schemas.DateTimeSchema
            
            
            class currency_rate_final(
                schemas.StrSchema
            ):
                pass
            
            
            class tax_percentage(
                schemas.StrSchema
            ):
                pass
            id = schemas.IntSchema
        
            @staticmethod
            def requester() -> typing.Type['SimpleUserSummary']:
                return SimpleUserSummary
        
            @staticmethod
            def approver() -> typing.Type['SimpleUserSummary']:
                return SimpleUserSummary
            approved_date = schemas.DateTimeSchema
            is_active = schemas.BoolSchema
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            reimburse = schemas.BoolSchema
        
            @staticmethod
            def expense_type() -> typing.Type['ExpenseTypeEnum']:
                return ExpenseTypeEnum
        
            @staticmethod
            def paymentType() -> typing.Type['PaymentMethodTypeEnum']:
                return PaymentMethodTypeEnum
            
            
            class amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            exchange_rate_override = schemas.BoolSchema
            
            
            class tax_name(
                schemas.StrSchema
            ):
                pass
            
            
            class tax_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            tax_is_inclusive = schemas.BoolSchema
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            attachment = schemas.StrSchema
            active = schemas.BoolSchema
            
            
            class last_changed_by(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_changed_by':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class creditcard(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'creditcard':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tax(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "account": account,
                "localCurrency": localCurrency,
                "expense_type_fields": expense_type_fields,
                "expenseReport": expenseReport,
                "merchant": merchant,
                "transDate": transDate,
                "currency_rate_final": currency_rate_final,
                "tax_percentage": tax_percentage,
                "id": id,
                "requester": requester,
                "approver": approver,
                "approved_date": approved_date,
                "is_active": is_active,
                "created_at": created_at,
                "updated_at": updated_at,
                "reimburse": reimburse,
                "expense_type": expense_type,
                "paymentType": paymentType,
                "amount": amount,
                "exchange_rate_override": exchange_rate_override,
                "tax_name": tax_name,
                "tax_amount": tax_amount,
                "tax_is_inclusive": tax_is_inclusive,
                "notes": notes,
                "attachment": attachment,
                "active": active,
                "last_changed_by": last_changed_by,
                "creditcard": creditcard,
                "tax": tax,
            }
    
    expense_type_fields: 'ExpenseReadExpenseTypeFields'
    currency_rate_final: MetaOapg.properties.currency_rate_final
    expenseReport: 'SimpleExpenseReport'
    tax_percentage: MetaOapg.properties.tax_percentage
    transDate: MetaOapg.properties.transDate
    merchant: MetaOapg.properties.merchant
    localCurrency: 'CurrencySummary'
    account: 'Account'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> 'Account': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localCurrency"]) -> 'CurrencySummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expense_type_fields"]) -> 'ExpenseReadExpenseTypeFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenseReport"]) -> 'SimpleExpenseReport': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant"]) -> MetaOapg.properties.merchant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transDate"]) -> MetaOapg.properties.transDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_rate_final"]) -> MetaOapg.properties.currency_rate_final: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_percentage"]) -> MetaOapg.properties.tax_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requester"]) -> 'SimpleUserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approver"]) -> 'SimpleUserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_date"]) -> MetaOapg.properties.approved_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reimburse"]) -> MetaOapg.properties.reimburse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expense_type"]) -> 'ExpenseTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentType"]) -> 'PaymentMethodTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchange_rate_override"]) -> MetaOapg.properties.exchange_rate_override: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_name"]) -> MetaOapg.properties.tax_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_is_inclusive"]) -> MetaOapg.properties.tax_is_inclusive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachment"]) -> MetaOapg.properties.attachment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_changed_by"]) -> MetaOapg.properties.last_changed_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditcard"]) -> MetaOapg.properties.creditcard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> MetaOapg.properties.tax: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "localCurrency", "expense_type_fields", "expenseReport", "merchant", "transDate", "currency_rate_final", "tax_percentage", "id", "requester", "approver", "approved_date", "is_active", "created_at", "updated_at", "reimburse", "expense_type", "paymentType", "amount", "exchange_rate_override", "tax_name", "tax_amount", "tax_is_inclusive", "notes", "attachment", "active", "last_changed_by", "creditcard", "tax", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> 'Account': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localCurrency"]) -> 'CurrencySummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expense_type_fields"]) -> 'ExpenseReadExpenseTypeFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenseReport"]) -> 'SimpleExpenseReport': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant"]) -> MetaOapg.properties.merchant: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transDate"]) -> MetaOapg.properties.transDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_rate_final"]) -> MetaOapg.properties.currency_rate_final: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_percentage"]) -> MetaOapg.properties.tax_percentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requester"]) -> typing.Union['SimpleUserSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approver"]) -> typing.Union['SimpleUserSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_date"]) -> typing.Union[MetaOapg.properties.approved_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reimburse"]) -> typing.Union[MetaOapg.properties.reimburse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expense_type"]) -> typing.Union['ExpenseTypeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentType"]) -> typing.Union['PaymentMethodTypeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchange_rate_override"]) -> typing.Union[MetaOapg.properties.exchange_rate_override, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_name"]) -> typing.Union[MetaOapg.properties.tax_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> typing.Union[MetaOapg.properties.tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_is_inclusive"]) -> typing.Union[MetaOapg.properties.tax_is_inclusive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachment"]) -> typing.Union[MetaOapg.properties.attachment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_changed_by"]) -> typing.Union[MetaOapg.properties.last_changed_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditcard"]) -> typing.Union[MetaOapg.properties.creditcard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union[MetaOapg.properties.tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "localCurrency", "expense_type_fields", "expenseReport", "merchant", "transDate", "currency_rate_final", "tax_percentage", "id", "requester", "approver", "approved_date", "is_active", "created_at", "updated_at", "reimburse", "expense_type", "paymentType", "amount", "exchange_rate_override", "tax_name", "tax_amount", "tax_is_inclusive", "notes", "attachment", "active", "last_changed_by", "creditcard", "tax", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expense_type_fields: 'ExpenseReadExpenseTypeFields',
        currency_rate_final: typing.Union[MetaOapg.properties.currency_rate_final, str, ],
        expenseReport: 'SimpleExpenseReport',
        tax_percentage: typing.Union[MetaOapg.properties.tax_percentage, str, ],
        transDate: typing.Union[MetaOapg.properties.transDate, str, datetime, ],
        merchant: typing.Union[MetaOapg.properties.merchant, str, ],
        localCurrency: 'CurrencySummary',
        account: 'Account',
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        requester: typing.Union['SimpleUserSummary', schemas.Unset] = schemas.unset,
        approver: typing.Union['SimpleUserSummary', schemas.Unset] = schemas.unset,
        approved_date: typing.Union[MetaOapg.properties.approved_date, str, datetime, schemas.Unset] = schemas.unset,
        is_active: typing.Union[MetaOapg.properties.is_active, bool, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        reimburse: typing.Union[MetaOapg.properties.reimburse, bool, schemas.Unset] = schemas.unset,
        expense_type: typing.Union['ExpenseTypeEnum', schemas.Unset] = schemas.unset,
        paymentType: typing.Union['PaymentMethodTypeEnum', schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, None, str, schemas.Unset] = schemas.unset,
        exchange_rate_override: typing.Union[MetaOapg.properties.exchange_rate_override, bool, schemas.Unset] = schemas.unset,
        tax_name: typing.Union[MetaOapg.properties.tax_name, str, schemas.Unset] = schemas.unset,
        tax_amount: typing.Union[MetaOapg.properties.tax_amount, None, str, schemas.Unset] = schemas.unset,
        tax_is_inclusive: typing.Union[MetaOapg.properties.tax_is_inclusive, bool, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        attachment: typing.Union[MetaOapg.properties.attachment, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        last_changed_by: typing.Union[MetaOapg.properties.last_changed_by, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creditcard: typing.Union[MetaOapg.properties.creditcard, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tax: typing.Union[MetaOapg.properties.tax, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExpenseRead':
        return super().__new__(
            cls,
            *args,
            expense_type_fields=expense_type_fields,
            currency_rate_final=currency_rate_final,
            expenseReport=expenseReport,
            tax_percentage=tax_percentage,
            transDate=transDate,
            merchant=merchant,
            localCurrency=localCurrency,
            account=account,
            id=id,
            requester=requester,
            approver=approver,
            approved_date=approved_date,
            is_active=is_active,
            created_at=created_at,
            updated_at=updated_at,
            reimburse=reimburse,
            expense_type=expense_type,
            paymentType=paymentType,
            amount=amount,
            exchange_rate_override=exchange_rate_override,
            tax_name=tax_name,
            tax_amount=tax_amount,
            tax_is_inclusive=tax_is_inclusive,
            notes=notes,
            attachment=attachment,
            active=active,
            last_changed_by=last_changed_by,
            creditcard=creditcard,
            tax=tax,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.account import Account
from procurify_python_sdk.model.currency_summary import CurrencySummary
from procurify_python_sdk.model.expense_read_expense_type_fields import ExpenseReadExpenseTypeFields
from procurify_python_sdk.model.expense_type_enum import ExpenseTypeEnum
from procurify_python_sdk.model.payment_method_type_enum import PaymentMethodTypeEnum
from procurify_python_sdk.model.simple_expense_report import SimpleExpenseReport
from procurify_python_sdk.model.simple_user_summary import SimpleUserSummary
