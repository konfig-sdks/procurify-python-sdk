# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class OrderItemRead(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "quantity",
            "purchaser",
            "num",
            "catalog_item",
            "approved_quantity",
            "pref_vendor",
            "item_attachments",
            "recurrence",
            "unit",
            "receivedPassQty",
            "price",
            "name",
            "currency",
            "account",
            "approved_datetime",
            "receivedFailQty",
        }
        
        class properties:
        
            @staticmethod
            def account() -> typing.Type['AccountRead']:
                return AccountRead
            
            
            class approved_datetime(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_datetime':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            approved_quantity = schemas.Float32Schema
        
            @staticmethod
            def catalog_item() -> typing.Type['CatalogItemReadNullable']:
                return CatalogItemReadNullable
        
            @staticmethod
            def currency() -> typing.Type['CurrencySummary']:
                return CurrencySummary
            
            
            class item_attachments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Attachment']:
                        return Attachment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Attachment'], typing.List['Attachment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'item_attachments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Attachment':
                    return super().__getitem__(i)
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class num(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
        
            @staticmethod
            def pref_vendor() -> typing.Type['VendorRead']:
                return VendorRead
            
            
            class price(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
        
            @staticmethod
            def purchaser() -> typing.Type['UserSummary']:
                return UserSummary
            quantity = schemas.Float32Schema
            receivedFailQty = schemas.Float32Schema
            receivedPassQty = schemas.Float32Schema
            
            
            class unit(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 30
        
            @staticmethod
            def recurrence() -> typing.Type['RecurringOrderItemNullable']:
                return RecurringOrderItemNullable
        
            @staticmethod
            def PO() -> typing.Type['OrderItemReadPo']:
                return OrderItemReadPo
            
            
            class PO_line_num(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
            class accountCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            active = schemas.BoolSchema
            
            
            class approved_currency_rate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,9}(?:\.\d{0,6})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_currency_rate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approved_price(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approved_shipping_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_shipping_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approved_tax_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_tax_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            attachments = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            
            
            class dateInvoiced(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateInvoiced':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class external_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            hot = schemas.BoolSchema
            id = schemas.IntSchema
            
            
            class inventoryItem(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inventoryItem':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_active = schemas.BoolSchema
            
            
            class last_changed_by(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_changed_by':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            last_modified = schemas.DateTimeSchema
            
            
            class lineComment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lineComment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class orderNum(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orderNum':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            po_note = schemas.StrSchema
            
            
            class po_version(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
            class purchase_order(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchase_order':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shipping_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipping_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sku(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class status(
                schemas.ComposedBase,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            OrderItemStatusEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tax_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class total_cost(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,16}(?:\.\d{0,2})?$',
                    }]
            updated_at = schemas.DateTimeSchema
            vendor = schemas.StrSchema
        
            @staticmethod
            def receive_method() -> typing.Type['ZeroOneEnum']:
                return ZeroOneEnum
        
            @staticmethod
            def type() -> typing.Type['ZeroOneTwoEnum']:
                return ZeroOneTwoEnum
        
            @staticmethod
            def blanket() -> typing.Type['BlanketOrderItemRead']:
                return BlanketOrderItemRead
            
            
            class comments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Comment']:
                        return Comment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Comment'], typing.List['Comment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Comment':
                    return super().__getitem__(i)
            
            
            class confirmation_status(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'confirmation_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class confirmation_status_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'confirmation_status_description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def cost_details() -> typing.Type['CostDetailsNullable']:
                return CostDetailsNullable
            
            
            class custom_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFieldValueRead']:
                        return CustomFieldValueRead
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomFieldValueRead'], typing.List['CustomFieldValueRead']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFieldValueRead':
                    return super().__getitem__(i)
            date_required = schemas.DateTimeSchema
            has_sibling_items = schemas.BoolSchema
            line_comment = schemas.StrSchema
            
            
            class logs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MasterLogger']:
                        return MasterLogger
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MasterLogger'], typing.List['MasterLogger']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MasterLogger':
                    return super().__getitem__(i)
            order_description = schemas.StrSchema
            order_status = schemas.IntSchema
            order_uuid = schemas.UUIDSchema
            
            
            class punchout_supplier_icon(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_supplier_icon':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_supplier_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_supplier_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_system(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_system':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_vendor_reference(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_vendor_reference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            punchout_supplier_can_update_quantity = schemas.BoolSchema
            purchase_order_number = schemas.StrSchema
            purchase_order_uuid = schemas.UUIDSchema
            
            
            class purchased_currency_rate(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,9}(?:\.\d{0,6})?$',
                    }]
        
            @staticmethod
            def requester() -> typing.Type['SimpleUserSummary']:
                return SimpleUserSummary
            
            
            class spend_allocation(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AllocationRead']:
                        return AllocationRead
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AllocationRead'], typing.List['AllocationRead']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'spend_allocation':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AllocationRead':
                    return super().__getitem__(i)
            submitted_date = schemas.DateTimeSchema
            
            
            class taxes(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Adjustment']:
                        return Adjustment
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taxes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "account": account,
                "approved_datetime": approved_datetime,
                "approved_quantity": approved_quantity,
                "catalog_item": catalog_item,
                "currency": currency,
                "item_attachments": item_attachments,
                "name": name,
                "num": num,
                "pref_vendor": pref_vendor,
                "price": price,
                "purchaser": purchaser,
                "quantity": quantity,
                "receivedFailQty": receivedFailQty,
                "receivedPassQty": receivedPassQty,
                "unit": unit,
                "recurrence": recurrence,
                "PO": PO,
                "PO_line_num": PO_line_num,
                "accountCode": accountCode,
                "active": active,
                "approved_currency_rate": approved_currency_rate,
                "approved_price": approved_price,
                "approved_shipping_amount": approved_shipping_amount,
                "approved_tax_amount": approved_tax_amount,
                "attachments": attachments,
                "created_at": created_at,
                "dateInvoiced": dateInvoiced,
                "external_id": external_id,
                "hot": hot,
                "id": id,
                "inventoryItem": inventoryItem,
                "is_active": is_active,
                "last_changed_by": last_changed_by,
                "last_modified": last_modified,
                "lineComment": lineComment,
                "orderNum": orderNum,
                "po_note": po_note,
                "po_version": po_version,
                "purchase_order": purchase_order,
                "shipping_amount": shipping_amount,
                "sku": sku,
                "status": status,
                "tax_amount": tax_amount,
                "total_cost": total_cost,
                "updated_at": updated_at,
                "vendor": vendor,
                "receive_method": receive_method,
                "type": type,
                "blanket": blanket,
                "comments": comments,
                "confirmation_status": confirmation_status,
                "confirmation_status_description": confirmation_status_description,
                "cost_details": cost_details,
                "custom_fields": custom_fields,
                "date_required": date_required,
                "has_sibling_items": has_sibling_items,
                "line_comment": line_comment,
                "logs": logs,
                "order_description": order_description,
                "order_status": order_status,
                "order_uuid": order_uuid,
                "punchout_supplier_icon": punchout_supplier_icon,
                "punchout_supplier_name": punchout_supplier_name,
                "punchout_system": punchout_system,
                "punchout_vendor_reference": punchout_vendor_reference,
                "punchout_supplier_can_update_quantity": punchout_supplier_can_update_quantity,
                "purchase_order_number": purchase_order_number,
                "purchase_order_uuid": purchase_order_uuid,
                "purchased_currency_rate": purchased_currency_rate,
                "requester": requester,
                "spend_allocation": spend_allocation,
                "submitted_date": submitted_date,
                "taxes": taxes,
            }
    
    quantity: MetaOapg.properties.quantity
    purchaser: 'UserSummary'
    num: MetaOapg.properties.num
    catalog_item: 'CatalogItemReadNullable'
    approved_quantity: MetaOapg.properties.approved_quantity
    pref_vendor: 'VendorRead'
    item_attachments: MetaOapg.properties.item_attachments
    recurrence: 'RecurringOrderItemNullable'
    unit: MetaOapg.properties.unit
    receivedPassQty: MetaOapg.properties.receivedPassQty
    price: MetaOapg.properties.price
    name: MetaOapg.properties.name
    currency: 'CurrencySummary'
    account: 'AccountRead'
    approved_datetime: MetaOapg.properties.approved_datetime
    receivedFailQty: MetaOapg.properties.receivedFailQty
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> 'AccountRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_datetime"]) -> MetaOapg.properties.approved_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_quantity"]) -> MetaOapg.properties.approved_quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catalog_item"]) -> 'CatalogItemReadNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'CurrencySummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_attachments"]) -> MetaOapg.properties.item_attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num"]) -> MetaOapg.properties.num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pref_vendor"]) -> 'VendorRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaser"]) -> 'UserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receivedFailQty"]) -> MetaOapg.properties.receivedFailQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receivedPassQty"]) -> MetaOapg.properties.receivedPassQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurrence"]) -> 'RecurringOrderItemNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PO"]) -> 'OrderItemReadPo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PO_line_num"]) -> MetaOapg.properties.PO_line_num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountCode"]) -> MetaOapg.properties.accountCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_currency_rate"]) -> MetaOapg.properties.approved_currency_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_price"]) -> MetaOapg.properties.approved_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_shipping_amount"]) -> MetaOapg.properties.approved_shipping_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_tax_amount"]) -> MetaOapg.properties.approved_tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateInvoiced"]) -> MetaOapg.properties.dateInvoiced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hot"]) -> MetaOapg.properties.hot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inventoryItem"]) -> MetaOapg.properties.inventoryItem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_changed_by"]) -> MetaOapg.properties.last_changed_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineComment"]) -> MetaOapg.properties.lineComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderNum"]) -> MetaOapg.properties.orderNum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["po_note"]) -> MetaOapg.properties.po_note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["po_version"]) -> MetaOapg.properties.po_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_order"]) -> MetaOapg.properties.purchase_order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_amount"]) -> MetaOapg.properties.shipping_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost"]) -> MetaOapg.properties.total_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receive_method"]) -> 'ZeroOneEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ZeroOneTwoEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blanket"]) -> 'BlanketOrderItemRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmation_status"]) -> MetaOapg.properties.confirmation_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmation_status_description"]) -> MetaOapg.properties.confirmation_status_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_details"]) -> 'CostDetailsNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_required"]) -> MetaOapg.properties.date_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_sibling_items"]) -> MetaOapg.properties.has_sibling_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line_comment"]) -> MetaOapg.properties.line_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logs"]) -> MetaOapg.properties.logs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_description"]) -> MetaOapg.properties.order_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_status"]) -> MetaOapg.properties.order_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_uuid"]) -> MetaOapg.properties.order_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_icon"]) -> MetaOapg.properties.punchout_supplier_icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_name"]) -> MetaOapg.properties.punchout_supplier_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_system"]) -> MetaOapg.properties.punchout_system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_vendor_reference"]) -> MetaOapg.properties.punchout_vendor_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_can_update_quantity"]) -> MetaOapg.properties.punchout_supplier_can_update_quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_order_number"]) -> MetaOapg.properties.purchase_order_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_order_uuid"]) -> MetaOapg.properties.purchase_order_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchased_currency_rate"]) -> MetaOapg.properties.purchased_currency_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requester"]) -> 'SimpleUserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spend_allocation"]) -> MetaOapg.properties.spend_allocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitted_date"]) -> MetaOapg.properties.submitted_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxes"]) -> MetaOapg.properties.taxes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "approved_datetime", "approved_quantity", "catalog_item", "currency", "item_attachments", "name", "num", "pref_vendor", "price", "purchaser", "quantity", "receivedFailQty", "receivedPassQty", "unit", "recurrence", "PO", "PO_line_num", "accountCode", "active", "approved_currency_rate", "approved_price", "approved_shipping_amount", "approved_tax_amount", "attachments", "created_at", "dateInvoiced", "external_id", "hot", "id", "inventoryItem", "is_active", "last_changed_by", "last_modified", "lineComment", "orderNum", "po_note", "po_version", "purchase_order", "shipping_amount", "sku", "status", "tax_amount", "total_cost", "updated_at", "vendor", "receive_method", "type", "blanket", "comments", "confirmation_status", "confirmation_status_description", "cost_details", "custom_fields", "date_required", "has_sibling_items", "line_comment", "logs", "order_description", "order_status", "order_uuid", "punchout_supplier_icon", "punchout_supplier_name", "punchout_system", "punchout_vendor_reference", "punchout_supplier_can_update_quantity", "purchase_order_number", "purchase_order_uuid", "purchased_currency_rate", "requester", "spend_allocation", "submitted_date", "taxes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> 'AccountRead': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_datetime"]) -> MetaOapg.properties.approved_datetime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_quantity"]) -> MetaOapg.properties.approved_quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catalog_item"]) -> 'CatalogItemReadNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'CurrencySummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_attachments"]) -> MetaOapg.properties.item_attachments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num"]) -> MetaOapg.properties.num: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pref_vendor"]) -> 'VendorRead': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaser"]) -> 'UserSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receivedFailQty"]) -> MetaOapg.properties.receivedFailQty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receivedPassQty"]) -> MetaOapg.properties.receivedPassQty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurrence"]) -> 'RecurringOrderItemNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PO"]) -> typing.Union['OrderItemReadPo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PO_line_num"]) -> typing.Union[MetaOapg.properties.PO_line_num, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountCode"]) -> typing.Union[MetaOapg.properties.accountCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_currency_rate"]) -> typing.Union[MetaOapg.properties.approved_currency_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_price"]) -> typing.Union[MetaOapg.properties.approved_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_shipping_amount"]) -> typing.Union[MetaOapg.properties.approved_shipping_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_tax_amount"]) -> typing.Union[MetaOapg.properties.approved_tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union[MetaOapg.properties.attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateInvoiced"]) -> typing.Union[MetaOapg.properties.dateInvoiced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hot"]) -> typing.Union[MetaOapg.properties.hot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inventoryItem"]) -> typing.Union[MetaOapg.properties.inventoryItem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_changed_by"]) -> typing.Union[MetaOapg.properties.last_changed_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineComment"]) -> typing.Union[MetaOapg.properties.lineComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderNum"]) -> typing.Union[MetaOapg.properties.orderNum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["po_note"]) -> typing.Union[MetaOapg.properties.po_note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["po_version"]) -> typing.Union[MetaOapg.properties.po_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_order"]) -> typing.Union[MetaOapg.properties.purchase_order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_amount"]) -> typing.Union[MetaOapg.properties.shipping_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> typing.Union[MetaOapg.properties.tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost"]) -> typing.Union[MetaOapg.properties.total_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union[MetaOapg.properties.vendor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receive_method"]) -> typing.Union['ZeroOneEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['ZeroOneTwoEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blanket"]) -> typing.Union['BlanketOrderItemRead', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmation_status"]) -> typing.Union[MetaOapg.properties.confirmation_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmation_status_description"]) -> typing.Union[MetaOapg.properties.confirmation_status_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_details"]) -> typing.Union['CostDetailsNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> typing.Union[MetaOapg.properties.custom_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_required"]) -> typing.Union[MetaOapg.properties.date_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_sibling_items"]) -> typing.Union[MetaOapg.properties.has_sibling_items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line_comment"]) -> typing.Union[MetaOapg.properties.line_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logs"]) -> typing.Union[MetaOapg.properties.logs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_description"]) -> typing.Union[MetaOapg.properties.order_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_status"]) -> typing.Union[MetaOapg.properties.order_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_uuid"]) -> typing.Union[MetaOapg.properties.order_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_icon"]) -> typing.Union[MetaOapg.properties.punchout_supplier_icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_name"]) -> typing.Union[MetaOapg.properties.punchout_supplier_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_system"]) -> typing.Union[MetaOapg.properties.punchout_system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_vendor_reference"]) -> typing.Union[MetaOapg.properties.punchout_vendor_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_can_update_quantity"]) -> typing.Union[MetaOapg.properties.punchout_supplier_can_update_quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_order_number"]) -> typing.Union[MetaOapg.properties.purchase_order_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_order_uuid"]) -> typing.Union[MetaOapg.properties.purchase_order_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchased_currency_rate"]) -> typing.Union[MetaOapg.properties.purchased_currency_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requester"]) -> typing.Union['SimpleUserSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spend_allocation"]) -> typing.Union[MetaOapg.properties.spend_allocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitted_date"]) -> typing.Union[MetaOapg.properties.submitted_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxes"]) -> typing.Union[MetaOapg.properties.taxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "approved_datetime", "approved_quantity", "catalog_item", "currency", "item_attachments", "name", "num", "pref_vendor", "price", "purchaser", "quantity", "receivedFailQty", "receivedPassQty", "unit", "recurrence", "PO", "PO_line_num", "accountCode", "active", "approved_currency_rate", "approved_price", "approved_shipping_amount", "approved_tax_amount", "attachments", "created_at", "dateInvoiced", "external_id", "hot", "id", "inventoryItem", "is_active", "last_changed_by", "last_modified", "lineComment", "orderNum", "po_note", "po_version", "purchase_order", "shipping_amount", "sku", "status", "tax_amount", "total_cost", "updated_at", "vendor", "receive_method", "type", "blanket", "comments", "confirmation_status", "confirmation_status_description", "cost_details", "custom_fields", "date_required", "has_sibling_items", "line_comment", "logs", "order_description", "order_status", "order_uuid", "punchout_supplier_icon", "punchout_supplier_name", "punchout_system", "punchout_vendor_reference", "punchout_supplier_can_update_quantity", "purchase_order_number", "purchase_order_uuid", "purchased_currency_rate", "requester", "spend_allocation", "submitted_date", "taxes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, ],
        purchaser: 'UserSummary',
        num: typing.Union[MetaOapg.properties.num, str, ],
        catalog_item: 'CatalogItemReadNullable',
        approved_quantity: typing.Union[MetaOapg.properties.approved_quantity, decimal.Decimal, int, float, ],
        pref_vendor: 'VendorRead',
        item_attachments: typing.Union[MetaOapg.properties.item_attachments, list, tuple, ],
        recurrence: 'RecurringOrderItemNullable',
        unit: typing.Union[MetaOapg.properties.unit, str, ],
        receivedPassQty: typing.Union[MetaOapg.properties.receivedPassQty, decimal.Decimal, int, float, ],
        price: typing.Union[MetaOapg.properties.price, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        currency: 'CurrencySummary',
        account: 'AccountRead',
        approved_datetime: typing.Union[MetaOapg.properties.approved_datetime, None, str, datetime, ],
        receivedFailQty: typing.Union[MetaOapg.properties.receivedFailQty, decimal.Decimal, int, float, ],
        PO: typing.Union['OrderItemReadPo', schemas.Unset] = schemas.unset,
        PO_line_num: typing.Union[MetaOapg.properties.PO_line_num, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accountCode: typing.Union[MetaOapg.properties.accountCode, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        approved_currency_rate: typing.Union[MetaOapg.properties.approved_currency_rate, None, str, schemas.Unset] = schemas.unset,
        approved_price: typing.Union[MetaOapg.properties.approved_price, None, str, schemas.Unset] = schemas.unset,
        approved_shipping_amount: typing.Union[MetaOapg.properties.approved_shipping_amount, None, str, schemas.Unset] = schemas.unset,
        approved_tax_amount: typing.Union[MetaOapg.properties.approved_tax_amount, None, str, schemas.Unset] = schemas.unset,
        attachments: typing.Union[MetaOapg.properties.attachments, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        dateInvoiced: typing.Union[MetaOapg.properties.dateInvoiced, None, str, datetime, schemas.Unset] = schemas.unset,
        external_id: typing.Union[MetaOapg.properties.external_id, str, schemas.Unset] = schemas.unset,
        hot: typing.Union[MetaOapg.properties.hot, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        inventoryItem: typing.Union[MetaOapg.properties.inventoryItem, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_active: typing.Union[MetaOapg.properties.is_active, bool, schemas.Unset] = schemas.unset,
        last_changed_by: typing.Union[MetaOapg.properties.last_changed_by, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, datetime, schemas.Unset] = schemas.unset,
        lineComment: typing.Union[MetaOapg.properties.lineComment, None, str, schemas.Unset] = schemas.unset,
        orderNum: typing.Union[MetaOapg.properties.orderNum, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        po_note: typing.Union[MetaOapg.properties.po_note, str, schemas.Unset] = schemas.unset,
        po_version: typing.Union[MetaOapg.properties.po_version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchase_order: typing.Union[MetaOapg.properties.purchase_order, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        shipping_amount: typing.Union[MetaOapg.properties.shipping_amount, None, str, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tax_amount: typing.Union[MetaOapg.properties.tax_amount, None, str, schemas.Unset] = schemas.unset,
        total_cost: typing.Union[MetaOapg.properties.total_cost, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        vendor: typing.Union[MetaOapg.properties.vendor, str, schemas.Unset] = schemas.unset,
        receive_method: typing.Union['ZeroOneEnum', schemas.Unset] = schemas.unset,
        type: typing.Union['ZeroOneTwoEnum', schemas.Unset] = schemas.unset,
        blanket: typing.Union['BlanketOrderItemRead', schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, list, tuple, schemas.Unset] = schemas.unset,
        confirmation_status: typing.Union[MetaOapg.properties.confirmation_status, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        confirmation_status_description: typing.Union[MetaOapg.properties.confirmation_status_description, None, str, schemas.Unset] = schemas.unset,
        cost_details: typing.Union['CostDetailsNullable', schemas.Unset] = schemas.unset,
        custom_fields: typing.Union[MetaOapg.properties.custom_fields, list, tuple, schemas.Unset] = schemas.unset,
        date_required: typing.Union[MetaOapg.properties.date_required, str, datetime, schemas.Unset] = schemas.unset,
        has_sibling_items: typing.Union[MetaOapg.properties.has_sibling_items, bool, schemas.Unset] = schemas.unset,
        line_comment: typing.Union[MetaOapg.properties.line_comment, str, schemas.Unset] = schemas.unset,
        logs: typing.Union[MetaOapg.properties.logs, list, tuple, schemas.Unset] = schemas.unset,
        order_description: typing.Union[MetaOapg.properties.order_description, str, schemas.Unset] = schemas.unset,
        order_status: typing.Union[MetaOapg.properties.order_status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        order_uuid: typing.Union[MetaOapg.properties.order_uuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        punchout_supplier_icon: typing.Union[MetaOapg.properties.punchout_supplier_icon, None, str, schemas.Unset] = schemas.unset,
        punchout_supplier_name: typing.Union[MetaOapg.properties.punchout_supplier_name, None, str, schemas.Unset] = schemas.unset,
        punchout_system: typing.Union[MetaOapg.properties.punchout_system, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        punchout_vendor_reference: typing.Union[MetaOapg.properties.punchout_vendor_reference, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        punchout_supplier_can_update_quantity: typing.Union[MetaOapg.properties.punchout_supplier_can_update_quantity, bool, schemas.Unset] = schemas.unset,
        purchase_order_number: typing.Union[MetaOapg.properties.purchase_order_number, str, schemas.Unset] = schemas.unset,
        purchase_order_uuid: typing.Union[MetaOapg.properties.purchase_order_uuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        purchased_currency_rate: typing.Union[MetaOapg.properties.purchased_currency_rate, str, schemas.Unset] = schemas.unset,
        requester: typing.Union['SimpleUserSummary', schemas.Unset] = schemas.unset,
        spend_allocation: typing.Union[MetaOapg.properties.spend_allocation, list, tuple, schemas.Unset] = schemas.unset,
        submitted_date: typing.Union[MetaOapg.properties.submitted_date, str, datetime, schemas.Unset] = schemas.unset,
        taxes: typing.Union[MetaOapg.properties.taxes, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderItemRead':
        return super().__new__(
            cls,
            *args,
            quantity=quantity,
            purchaser=purchaser,
            num=num,
            catalog_item=catalog_item,
            approved_quantity=approved_quantity,
            pref_vendor=pref_vendor,
            item_attachments=item_attachments,
            recurrence=recurrence,
            unit=unit,
            receivedPassQty=receivedPassQty,
            price=price,
            name=name,
            currency=currency,
            account=account,
            approved_datetime=approved_datetime,
            receivedFailQty=receivedFailQty,
            PO=PO,
            PO_line_num=PO_line_num,
            accountCode=accountCode,
            active=active,
            approved_currency_rate=approved_currency_rate,
            approved_price=approved_price,
            approved_shipping_amount=approved_shipping_amount,
            approved_tax_amount=approved_tax_amount,
            attachments=attachments,
            created_at=created_at,
            dateInvoiced=dateInvoiced,
            external_id=external_id,
            hot=hot,
            id=id,
            inventoryItem=inventoryItem,
            is_active=is_active,
            last_changed_by=last_changed_by,
            last_modified=last_modified,
            lineComment=lineComment,
            orderNum=orderNum,
            po_note=po_note,
            po_version=po_version,
            purchase_order=purchase_order,
            shipping_amount=shipping_amount,
            sku=sku,
            status=status,
            tax_amount=tax_amount,
            total_cost=total_cost,
            updated_at=updated_at,
            vendor=vendor,
            receive_method=receive_method,
            type=type,
            blanket=blanket,
            comments=comments,
            confirmation_status=confirmation_status,
            confirmation_status_description=confirmation_status_description,
            cost_details=cost_details,
            custom_fields=custom_fields,
            date_required=date_required,
            has_sibling_items=has_sibling_items,
            line_comment=line_comment,
            logs=logs,
            order_description=order_description,
            order_status=order_status,
            order_uuid=order_uuid,
            punchout_supplier_icon=punchout_supplier_icon,
            punchout_supplier_name=punchout_supplier_name,
            punchout_system=punchout_system,
            punchout_vendor_reference=punchout_vendor_reference,
            punchout_supplier_can_update_quantity=punchout_supplier_can_update_quantity,
            purchase_order_number=purchase_order_number,
            purchase_order_uuid=purchase_order_uuid,
            purchased_currency_rate=purchased_currency_rate,
            requester=requester,
            spend_allocation=spend_allocation,
            submitted_date=submitted_date,
            taxes=taxes,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.account_read import AccountRead
from procurify_python_sdk.model.adjustment import Adjustment
from procurify_python_sdk.model.allocation_read import AllocationRead
from procurify_python_sdk.model.attachment import Attachment
from procurify_python_sdk.model.blanket_order_item_read import BlanketOrderItemRead
from procurify_python_sdk.model.catalog_item_read_nullable import CatalogItemReadNullable
from procurify_python_sdk.model.comment import Comment
from procurify_python_sdk.model.cost_details_nullable import CostDetailsNullable
from procurify_python_sdk.model.currency_summary import CurrencySummary
from procurify_python_sdk.model.custom_field_value_read import CustomFieldValueRead
from procurify_python_sdk.model.master_logger import MasterLogger
from procurify_python_sdk.model.null_enum import NullEnum
from procurify_python_sdk.model.order_item_read_po import OrderItemReadPo
from procurify_python_sdk.model.order_item_status_enum import OrderItemStatusEnum
from procurify_python_sdk.model.recurring_order_item_nullable import RecurringOrderItemNullable
from procurify_python_sdk.model.simple_user_summary import SimpleUserSummary
from procurify_python_sdk.model.user_summary import UserSummary
from procurify_python_sdk.model.vendor_read import VendorRead
from procurify_python_sdk.model.zero_one_enum import ZeroOneEnum
from procurify_python_sdk.model.zero_one_two_enum import ZeroOneTwoEnum
