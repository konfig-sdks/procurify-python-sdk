# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class CostDetailsNullable(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "tax_amount",
            "total_cost",
            "total_cost_in_base_currency",
        }
        
        class properties:
            
            
            class total_cost(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,8}(?:\.\d{0,8})?$',
                    }]
            
            
            class total_cost_in_base_currency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,8}(?:\.\d{0,8})?$',
                    }]
            
            
            class tax_amount(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,8}(?:\.\d{0,8})?$',
                    }]
            
            
            class subtotal(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,8}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subtotal':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "total_cost": total_cost,
                "total_cost_in_base_currency": total_cost_in_base_currency,
                "tax_amount": tax_amount,
                "subtotal": subtotal,
            }

    
    tax_amount: MetaOapg.properties.tax_amount
    total_cost: MetaOapg.properties.total_cost
    total_cost_in_base_currency: MetaOapg.properties.total_cost_in_base_currency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost"]) -> MetaOapg.properties.total_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost_in_base_currency"]) -> MetaOapg.properties.total_cost_in_base_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtotal"]) -> MetaOapg.properties.subtotal: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_cost", "total_cost_in_base_currency", "tax_amount", "subtotal", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost"]) -> MetaOapg.properties.total_cost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost_in_base_currency"]) -> MetaOapg.properties.total_cost_in_base_currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtotal"]) -> typing.Union[MetaOapg.properties.subtotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_cost", "total_cost_in_base_currency", "tax_amount", "subtotal", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        subtotal: typing.Union[MetaOapg.properties.subtotal, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CostDetailsNullable':
        return super().__new__(
            cls,
            *args,
            subtotal=subtotal,
            _configuration=_configuration,
            **kwargs,
        )
