# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class PurchaseOrderDocs(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "buyer_country",
            "promise_date",
            "receiver_city",
            "receiver_postalCode",
            "buyer_addressLineOne",
            "buyer_name",
            "payment_terms",
            "uuid",
            "total",
            "shipping_method",
            "receiver_name",
            "buyer_postalCode",
            "receiver_country",
            "purchased_currency",
            "buyer_address",
            "purchaser",
            "contract",
            "pref_vendor",
            "receiver_contact",
            "buyer_city",
            "subtotal",
            "receiver_address",
            "shipping_terms",
            "receiver_addressLineOne",
            "buyer_contact",
        }
        
        class properties:
            uuid = schemas.UUIDSchema
        
            @staticmethod
            def purchaser() -> typing.Type['UserSummary']:
                return UserSummary
            
            
            class buyer_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class buyer_contact(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class buyer_addressLineOne(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 300
            
            
            class buyer_postalCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 20
            
            
            class buyer_city(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
            class buyer_country(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 80
        
            @staticmethod
            def buyer_address() -> typing.Type['AddressSummary']:
                return AddressSummary
            
            
            class receiver_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class receiver_contact(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class receiver_addressLineOne(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 300
            
            
            class receiver_postalCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 20
            
            
            class receiver_city(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
            class receiver_country(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 80
        
            @staticmethod
            def receiver_address() -> typing.Type['AddressSummary']:
                return AddressSummary
        
            @staticmethod
            def pref_vendor() -> typing.Type['VendorRead']:
                return VendorRead
            
            
            class payment_terms(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class shipping_terms(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class shipping_method(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            promise_date = schemas.DateTimeSchema
            
            
            class subtotal(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,17}(?:\.\d{0,2})?$',
                    }]
            
            
            class total(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,17}(?:\.\d{0,2})?$',
                    }]
        
            @staticmethod
            def purchased_currency() -> typing.Type['CurrencySummary']:
                return CurrencySummary
        
            @staticmethod
            def contract() -> typing.Type['PurchaseOrderContract']:
                return PurchaseOrderContract
            
            
            class version(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            number = schemas.StrSchema
            procurify_PO = schemas.IntSchema
            
            
            class PO_Num(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 30
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PO_Num':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            date = schemas.DateTimeSchema
            
            
            class buyer_state_province(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 40
            
            
            class receiver_state_province(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 40
            
            
            class vendor_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 150
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class vendor_contact(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor_contact':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class vendor_addressLineOne(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 300
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor_addressLineOne':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class vendor_postalCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 20
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor_postalCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class vendor_city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor_city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class vendor_state_province(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 40
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor_state_province':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class vendor_country(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 80
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor_country':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class freight(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,6})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'freight':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def tax() -> typing.Type['PriceModifierDocs']:
                return PriceModifierDocs
        
            @staticmethod
            def discount() -> typing.Type['PriceModifierDocs']:
                return PriceModifierDocs
            
            
            class other(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,6})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'other':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class comment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class purchased_currency_rate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,9}(?:\.\d{0,6})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchased_currency_rate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            active = schemas.BoolSchema
            
            
            class state(
                schemas.ComposedBase,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            PurchaseOrderStateEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def fulfilment_status() -> typing.Type['FulfilmentStatusEnum']:
                return FulfilmentStatusEnum
            
            
            class disclaimer_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disclaimer_description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class disclaimer_text(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disclaimer_text':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class recorded_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recorded_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class closed_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'closed_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            last_modified = schemas.DateTimeSchema
            staged_for_export = schemas.BoolSchema
            item_count = schemas.IntSchema
            
            
            class most_recent_version(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
            class punchout_system(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_system':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class purchase_agreement(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchase_agreement':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def purchase_agreement_status() -> typing.Type['ExpenseTypeEnumNullable']:
                return ExpenseTypeEnumNullable
            
            
            class punchout_vendor_reference(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_vendor_reference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_supplier_icon(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_supplier_icon':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_supplier_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_supplier_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            has_blanket_order_items = schemas.BoolSchema
            
            
            class expiry_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expiry_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "uuid": uuid,
                "purchaser": purchaser,
                "buyer_name": buyer_name,
                "buyer_contact": buyer_contact,
                "buyer_addressLineOne": buyer_addressLineOne,
                "buyer_postalCode": buyer_postalCode,
                "buyer_city": buyer_city,
                "buyer_country": buyer_country,
                "buyer_address": buyer_address,
                "receiver_name": receiver_name,
                "receiver_contact": receiver_contact,
                "receiver_addressLineOne": receiver_addressLineOne,
                "receiver_postalCode": receiver_postalCode,
                "receiver_city": receiver_city,
                "receiver_country": receiver_country,
                "receiver_address": receiver_address,
                "pref_vendor": pref_vendor,
                "payment_terms": payment_terms,
                "shipping_terms": shipping_terms,
                "shipping_method": shipping_method,
                "promise_date": promise_date,
                "subtotal": subtotal,
                "total": total,
                "purchased_currency": purchased_currency,
                "contract": contract,
                "version": version,
                "number": number,
                "procurify_PO": procurify_PO,
                "PO_Num": PO_Num,
                "date": date,
                "buyer_state_province": buyer_state_province,
                "receiver_state_province": receiver_state_province,
                "vendor_name": vendor_name,
                "vendor_contact": vendor_contact,
                "vendor_addressLineOne": vendor_addressLineOne,
                "vendor_postalCode": vendor_postalCode,
                "vendor_city": vendor_city,
                "vendor_state_province": vendor_state_province,
                "vendor_country": vendor_country,
                "freight": freight,
                "tax": tax,
                "discount": discount,
                "other": other,
                "comment": comment,
                "purchased_currency_rate": purchased_currency_rate,
                "active": active,
                "state": state,
                "fulfilment_status": fulfilment_status,
                "disclaimer_description": disclaimer_description,
                "disclaimer_text": disclaimer_text,
                "recorded_date": recorded_date,
                "closed_date": closed_date,
                "last_modified": last_modified,
                "staged_for_export": staged_for_export,
                "item_count": item_count,
                "most_recent_version": most_recent_version,
                "punchout_system": punchout_system,
                "purchase_agreement": purchase_agreement,
                "purchase_agreement_status": purchase_agreement_status,
                "punchout_vendor_reference": punchout_vendor_reference,
                "punchout_supplier_icon": punchout_supplier_icon,
                "punchout_supplier_name": punchout_supplier_name,
                "has_blanket_order_items": has_blanket_order_items,
                "expiry_date": expiry_date,
            }
    
    buyer_country: MetaOapg.properties.buyer_country
    promise_date: MetaOapg.properties.promise_date
    receiver_city: MetaOapg.properties.receiver_city
    receiver_postalCode: MetaOapg.properties.receiver_postalCode
    buyer_addressLineOne: MetaOapg.properties.buyer_addressLineOne
    buyer_name: MetaOapg.properties.buyer_name
    payment_terms: MetaOapg.properties.payment_terms
    uuid: MetaOapg.properties.uuid
    total: MetaOapg.properties.total
    shipping_method: MetaOapg.properties.shipping_method
    receiver_name: MetaOapg.properties.receiver_name
    buyer_postalCode: MetaOapg.properties.buyer_postalCode
    receiver_country: MetaOapg.properties.receiver_country
    purchased_currency: 'CurrencySummary'
    buyer_address: 'AddressSummary'
    purchaser: 'UserSummary'
    contract: 'PurchaseOrderContract'
    pref_vendor: 'VendorRead'
    receiver_contact: MetaOapg.properties.receiver_contact
    buyer_city: MetaOapg.properties.buyer_city
    subtotal: MetaOapg.properties.subtotal
    receiver_address: 'AddressSummary'
    shipping_terms: MetaOapg.properties.shipping_terms
    receiver_addressLineOne: MetaOapg.properties.receiver_addressLineOne
    buyer_contact: MetaOapg.properties.buyer_contact
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaser"]) -> 'UserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyer_name"]) -> MetaOapg.properties.buyer_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyer_contact"]) -> MetaOapg.properties.buyer_contact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyer_addressLineOne"]) -> MetaOapg.properties.buyer_addressLineOne: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyer_postalCode"]) -> MetaOapg.properties.buyer_postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyer_city"]) -> MetaOapg.properties.buyer_city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyer_country"]) -> MetaOapg.properties.buyer_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyer_address"]) -> 'AddressSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver_name"]) -> MetaOapg.properties.receiver_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver_contact"]) -> MetaOapg.properties.receiver_contact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver_addressLineOne"]) -> MetaOapg.properties.receiver_addressLineOne: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver_postalCode"]) -> MetaOapg.properties.receiver_postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver_city"]) -> MetaOapg.properties.receiver_city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver_country"]) -> MetaOapg.properties.receiver_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver_address"]) -> 'AddressSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pref_vendor"]) -> 'VendorRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_terms"]) -> MetaOapg.properties.payment_terms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_terms"]) -> MetaOapg.properties.shipping_terms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_method"]) -> MetaOapg.properties.shipping_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promise_date"]) -> MetaOapg.properties.promise_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtotal"]) -> MetaOapg.properties.subtotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchased_currency"]) -> 'CurrencySummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract"]) -> 'PurchaseOrderContract': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["procurify_PO"]) -> MetaOapg.properties.procurify_PO: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PO_Num"]) -> MetaOapg.properties.PO_Num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyer_state_province"]) -> MetaOapg.properties.buyer_state_province: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiver_state_province"]) -> MetaOapg.properties.receiver_state_province: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_name"]) -> MetaOapg.properties.vendor_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_contact"]) -> MetaOapg.properties.vendor_contact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_addressLineOne"]) -> MetaOapg.properties.vendor_addressLineOne: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_postalCode"]) -> MetaOapg.properties.vendor_postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_city"]) -> MetaOapg.properties.vendor_city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_state_province"]) -> MetaOapg.properties.vendor_state_province: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_country"]) -> MetaOapg.properties.vendor_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freight"]) -> MetaOapg.properties.freight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> 'PriceModifierDocs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount"]) -> 'PriceModifierDocs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchased_currency_rate"]) -> MetaOapg.properties.purchased_currency_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fulfilment_status"]) -> 'FulfilmentStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disclaimer_description"]) -> MetaOapg.properties.disclaimer_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disclaimer_text"]) -> MetaOapg.properties.disclaimer_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recorded_date"]) -> MetaOapg.properties.recorded_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_date"]) -> MetaOapg.properties.closed_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staged_for_export"]) -> MetaOapg.properties.staged_for_export: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_count"]) -> MetaOapg.properties.item_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["most_recent_version"]) -> MetaOapg.properties.most_recent_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_system"]) -> MetaOapg.properties.punchout_system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_agreement"]) -> MetaOapg.properties.purchase_agreement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_agreement_status"]) -> 'ExpenseTypeEnumNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_vendor_reference"]) -> MetaOapg.properties.punchout_vendor_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_icon"]) -> MetaOapg.properties.punchout_supplier_icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_name"]) -> MetaOapg.properties.punchout_supplier_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_blanket_order_items"]) -> MetaOapg.properties.has_blanket_order_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiry_date"]) -> MetaOapg.properties.expiry_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "purchaser", "buyer_name", "buyer_contact", "buyer_addressLineOne", "buyer_postalCode", "buyer_city", "buyer_country", "buyer_address", "receiver_name", "receiver_contact", "receiver_addressLineOne", "receiver_postalCode", "receiver_city", "receiver_country", "receiver_address", "pref_vendor", "payment_terms", "shipping_terms", "shipping_method", "promise_date", "subtotal", "total", "purchased_currency", "contract", "version", "number", "procurify_PO", "PO_Num", "date", "buyer_state_province", "receiver_state_province", "vendor_name", "vendor_contact", "vendor_addressLineOne", "vendor_postalCode", "vendor_city", "vendor_state_province", "vendor_country", "freight", "tax", "discount", "other", "comment", "purchased_currency_rate", "active", "state", "fulfilment_status", "disclaimer_description", "disclaimer_text", "recorded_date", "closed_date", "last_modified", "staged_for_export", "item_count", "most_recent_version", "punchout_system", "purchase_agreement", "purchase_agreement_status", "punchout_vendor_reference", "punchout_supplier_icon", "punchout_supplier_name", "has_blanket_order_items", "expiry_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaser"]) -> 'UserSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyer_name"]) -> MetaOapg.properties.buyer_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyer_contact"]) -> MetaOapg.properties.buyer_contact: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyer_addressLineOne"]) -> MetaOapg.properties.buyer_addressLineOne: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyer_postalCode"]) -> MetaOapg.properties.buyer_postalCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyer_city"]) -> MetaOapg.properties.buyer_city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyer_country"]) -> MetaOapg.properties.buyer_country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyer_address"]) -> 'AddressSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver_name"]) -> MetaOapg.properties.receiver_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver_contact"]) -> MetaOapg.properties.receiver_contact: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver_addressLineOne"]) -> MetaOapg.properties.receiver_addressLineOne: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver_postalCode"]) -> MetaOapg.properties.receiver_postalCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver_city"]) -> MetaOapg.properties.receiver_city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver_country"]) -> MetaOapg.properties.receiver_country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver_address"]) -> 'AddressSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pref_vendor"]) -> 'VendorRead': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_terms"]) -> MetaOapg.properties.payment_terms: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_terms"]) -> MetaOapg.properties.shipping_terms: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_method"]) -> MetaOapg.properties.shipping_method: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promise_date"]) -> MetaOapg.properties.promise_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtotal"]) -> MetaOapg.properties.subtotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchased_currency"]) -> 'CurrencySummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract"]) -> 'PurchaseOrderContract': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["procurify_PO"]) -> typing.Union[MetaOapg.properties.procurify_PO, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PO_Num"]) -> typing.Union[MetaOapg.properties.PO_Num, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyer_state_province"]) -> typing.Union[MetaOapg.properties.buyer_state_province, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiver_state_province"]) -> typing.Union[MetaOapg.properties.receiver_state_province, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_name"]) -> typing.Union[MetaOapg.properties.vendor_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_contact"]) -> typing.Union[MetaOapg.properties.vendor_contact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_addressLineOne"]) -> typing.Union[MetaOapg.properties.vendor_addressLineOne, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_postalCode"]) -> typing.Union[MetaOapg.properties.vendor_postalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_city"]) -> typing.Union[MetaOapg.properties.vendor_city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_state_province"]) -> typing.Union[MetaOapg.properties.vendor_state_province, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_country"]) -> typing.Union[MetaOapg.properties.vendor_country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freight"]) -> typing.Union[MetaOapg.properties.freight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union['PriceModifierDocs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount"]) -> typing.Union['PriceModifierDocs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other"]) -> typing.Union[MetaOapg.properties.other, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchased_currency_rate"]) -> typing.Union[MetaOapg.properties.purchased_currency_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fulfilment_status"]) -> typing.Union['FulfilmentStatusEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disclaimer_description"]) -> typing.Union[MetaOapg.properties.disclaimer_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disclaimer_text"]) -> typing.Union[MetaOapg.properties.disclaimer_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recorded_date"]) -> typing.Union[MetaOapg.properties.recorded_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_date"]) -> typing.Union[MetaOapg.properties.closed_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staged_for_export"]) -> typing.Union[MetaOapg.properties.staged_for_export, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_count"]) -> typing.Union[MetaOapg.properties.item_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["most_recent_version"]) -> typing.Union[MetaOapg.properties.most_recent_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_system"]) -> typing.Union[MetaOapg.properties.punchout_system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_agreement"]) -> typing.Union[MetaOapg.properties.purchase_agreement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_agreement_status"]) -> typing.Union['ExpenseTypeEnumNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_vendor_reference"]) -> typing.Union[MetaOapg.properties.punchout_vendor_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_icon"]) -> typing.Union[MetaOapg.properties.punchout_supplier_icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_name"]) -> typing.Union[MetaOapg.properties.punchout_supplier_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_blanket_order_items"]) -> typing.Union[MetaOapg.properties.has_blanket_order_items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiry_date"]) -> typing.Union[MetaOapg.properties.expiry_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "purchaser", "buyer_name", "buyer_contact", "buyer_addressLineOne", "buyer_postalCode", "buyer_city", "buyer_country", "buyer_address", "receiver_name", "receiver_contact", "receiver_addressLineOne", "receiver_postalCode", "receiver_city", "receiver_country", "receiver_address", "pref_vendor", "payment_terms", "shipping_terms", "shipping_method", "promise_date", "subtotal", "total", "purchased_currency", "contract", "version", "number", "procurify_PO", "PO_Num", "date", "buyer_state_province", "receiver_state_province", "vendor_name", "vendor_contact", "vendor_addressLineOne", "vendor_postalCode", "vendor_city", "vendor_state_province", "vendor_country", "freight", "tax", "discount", "other", "comment", "purchased_currency_rate", "active", "state", "fulfilment_status", "disclaimer_description", "disclaimer_text", "recorded_date", "closed_date", "last_modified", "staged_for_export", "item_count", "most_recent_version", "punchout_system", "purchase_agreement", "purchase_agreement_status", "punchout_vendor_reference", "punchout_supplier_icon", "punchout_supplier_name", "has_blanket_order_items", "expiry_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        buyer_country: typing.Union[MetaOapg.properties.buyer_country, str, ],
        promise_date: typing.Union[MetaOapg.properties.promise_date, str, datetime, ],
        receiver_city: typing.Union[MetaOapg.properties.receiver_city, str, ],
        receiver_postalCode: typing.Union[MetaOapg.properties.receiver_postalCode, str, ],
        buyer_addressLineOne: typing.Union[MetaOapg.properties.buyer_addressLineOne, str, ],
        buyer_name: typing.Union[MetaOapg.properties.buyer_name, str, ],
        payment_terms: typing.Union[MetaOapg.properties.payment_terms, str, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        total: typing.Union[MetaOapg.properties.total, str, ],
        shipping_method: typing.Union[MetaOapg.properties.shipping_method, str, ],
        receiver_name: typing.Union[MetaOapg.properties.receiver_name, str, ],
        buyer_postalCode: typing.Union[MetaOapg.properties.buyer_postalCode, str, ],
        receiver_country: typing.Union[MetaOapg.properties.receiver_country, str, ],
        purchased_currency: 'CurrencySummary',
        buyer_address: 'AddressSummary',
        purchaser: 'UserSummary',
        contract: 'PurchaseOrderContract',
        pref_vendor: 'VendorRead',
        receiver_contact: typing.Union[MetaOapg.properties.receiver_contact, str, ],
        buyer_city: typing.Union[MetaOapg.properties.buyer_city, str, ],
        subtotal: typing.Union[MetaOapg.properties.subtotal, str, ],
        receiver_address: 'AddressSummary',
        shipping_terms: typing.Union[MetaOapg.properties.shipping_terms, str, ],
        receiver_addressLineOne: typing.Union[MetaOapg.properties.receiver_addressLineOne, str, ],
        buyer_contact: typing.Union[MetaOapg.properties.buyer_contact, str, ],
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        number: typing.Union[MetaOapg.properties.number, str, schemas.Unset] = schemas.unset,
        procurify_PO: typing.Union[MetaOapg.properties.procurify_PO, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PO_Num: typing.Union[MetaOapg.properties.PO_Num, None, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, datetime, schemas.Unset] = schemas.unset,
        buyer_state_province: typing.Union[MetaOapg.properties.buyer_state_province, str, schemas.Unset] = schemas.unset,
        receiver_state_province: typing.Union[MetaOapg.properties.receiver_state_province, str, schemas.Unset] = schemas.unset,
        vendor_name: typing.Union[MetaOapg.properties.vendor_name, None, str, schemas.Unset] = schemas.unset,
        vendor_contact: typing.Union[MetaOapg.properties.vendor_contact, None, str, schemas.Unset] = schemas.unset,
        vendor_addressLineOne: typing.Union[MetaOapg.properties.vendor_addressLineOne, None, str, schemas.Unset] = schemas.unset,
        vendor_postalCode: typing.Union[MetaOapg.properties.vendor_postalCode, None, str, schemas.Unset] = schemas.unset,
        vendor_city: typing.Union[MetaOapg.properties.vendor_city, None, str, schemas.Unset] = schemas.unset,
        vendor_state_province: typing.Union[MetaOapg.properties.vendor_state_province, None, str, schemas.Unset] = schemas.unset,
        vendor_country: typing.Union[MetaOapg.properties.vendor_country, None, str, schemas.Unset] = schemas.unset,
        freight: typing.Union[MetaOapg.properties.freight, None, str, schemas.Unset] = schemas.unset,
        tax: typing.Union['PriceModifierDocs', schemas.Unset] = schemas.unset,
        discount: typing.Union['PriceModifierDocs', schemas.Unset] = schemas.unset,
        other: typing.Union[MetaOapg.properties.other, None, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, None, str, schemas.Unset] = schemas.unset,
        purchased_currency_rate: typing.Union[MetaOapg.properties.purchased_currency_rate, None, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        fulfilment_status: typing.Union['FulfilmentStatusEnum', schemas.Unset] = schemas.unset,
        disclaimer_description: typing.Union[MetaOapg.properties.disclaimer_description, None, str, schemas.Unset] = schemas.unset,
        disclaimer_text: typing.Union[MetaOapg.properties.disclaimer_text, None, str, schemas.Unset] = schemas.unset,
        recorded_date: typing.Union[MetaOapg.properties.recorded_date, None, str, datetime, schemas.Unset] = schemas.unset,
        closed_date: typing.Union[MetaOapg.properties.closed_date, None, str, datetime, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, datetime, schemas.Unset] = schemas.unset,
        staged_for_export: typing.Union[MetaOapg.properties.staged_for_export, bool, schemas.Unset] = schemas.unset,
        item_count: typing.Union[MetaOapg.properties.item_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        most_recent_version: typing.Union[MetaOapg.properties.most_recent_version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        punchout_system: typing.Union[MetaOapg.properties.punchout_system, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchase_agreement: typing.Union[MetaOapg.properties.purchase_agreement, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchase_agreement_status: typing.Union['ExpenseTypeEnumNullable', schemas.Unset] = schemas.unset,
        punchout_vendor_reference: typing.Union[MetaOapg.properties.punchout_vendor_reference, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        punchout_supplier_icon: typing.Union[MetaOapg.properties.punchout_supplier_icon, None, str, schemas.Unset] = schemas.unset,
        punchout_supplier_name: typing.Union[MetaOapg.properties.punchout_supplier_name, None, str, schemas.Unset] = schemas.unset,
        has_blanket_order_items: typing.Union[MetaOapg.properties.has_blanket_order_items, bool, schemas.Unset] = schemas.unset,
        expiry_date: typing.Union[MetaOapg.properties.expiry_date, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PurchaseOrderDocs':
        return super().__new__(
            cls,
            *args,
            buyer_country=buyer_country,
            promise_date=promise_date,
            receiver_city=receiver_city,
            receiver_postalCode=receiver_postalCode,
            buyer_addressLineOne=buyer_addressLineOne,
            buyer_name=buyer_name,
            payment_terms=payment_terms,
            uuid=uuid,
            total=total,
            shipping_method=shipping_method,
            receiver_name=receiver_name,
            buyer_postalCode=buyer_postalCode,
            receiver_country=receiver_country,
            purchased_currency=purchased_currency,
            buyer_address=buyer_address,
            purchaser=purchaser,
            contract=contract,
            pref_vendor=pref_vendor,
            receiver_contact=receiver_contact,
            buyer_city=buyer_city,
            subtotal=subtotal,
            receiver_address=receiver_address,
            shipping_terms=shipping_terms,
            receiver_addressLineOne=receiver_addressLineOne,
            buyer_contact=buyer_contact,
            version=version,
            number=number,
            procurify_PO=procurify_PO,
            PO_Num=PO_Num,
            date=date,
            buyer_state_province=buyer_state_province,
            receiver_state_province=receiver_state_province,
            vendor_name=vendor_name,
            vendor_contact=vendor_contact,
            vendor_addressLineOne=vendor_addressLineOne,
            vendor_postalCode=vendor_postalCode,
            vendor_city=vendor_city,
            vendor_state_province=vendor_state_province,
            vendor_country=vendor_country,
            freight=freight,
            tax=tax,
            discount=discount,
            other=other,
            comment=comment,
            purchased_currency_rate=purchased_currency_rate,
            active=active,
            state=state,
            fulfilment_status=fulfilment_status,
            disclaimer_description=disclaimer_description,
            disclaimer_text=disclaimer_text,
            recorded_date=recorded_date,
            closed_date=closed_date,
            last_modified=last_modified,
            staged_for_export=staged_for_export,
            item_count=item_count,
            most_recent_version=most_recent_version,
            punchout_system=punchout_system,
            purchase_agreement=purchase_agreement,
            purchase_agreement_status=purchase_agreement_status,
            punchout_vendor_reference=punchout_vendor_reference,
            punchout_supplier_icon=punchout_supplier_icon,
            punchout_supplier_name=punchout_supplier_name,
            has_blanket_order_items=has_blanket_order_items,
            expiry_date=expiry_date,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.address_summary import AddressSummary
from procurify_python_sdk.model.currency_summary import CurrencySummary
from procurify_python_sdk.model.expense_type_enum_nullable import ExpenseTypeEnumNullable
from procurify_python_sdk.model.fulfilment_status_enum import FulfilmentStatusEnum
from procurify_python_sdk.model.null_enum import NullEnum
from procurify_python_sdk.model.price_modifier_docs import PriceModifierDocs
from procurify_python_sdk.model.purchase_order_contract import PurchaseOrderContract
from procurify_python_sdk.model.purchase_order_state_enum import PurchaseOrderStateEnum
from procurify_python_sdk.model.user_summary import UserSummary
from procurify_python_sdk.model.vendor_read import VendorRead
