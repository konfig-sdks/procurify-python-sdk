# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class OrderItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "unit",
            "quantity",
            "price",
            "num",
            "name",
            "currency",
            "pref_vendor",
            "account",
            "approved_datetime",
        }
        
        class properties:
            account = schemas.IntSchema
            
            
            class approved_datetime(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_datetime':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            currency = schemas.IntSchema
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class num(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
            pref_vendor = schemas.IntSchema
            
            
            class price(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
            class quantity(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,10}(?:\.\d{0,5})?$',
                    }]
            
            
            class unit(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 30
        
            @staticmethod
            def PO() -> typing.Type['OrderItemPo']:
                return OrderItemPo
            
            
            class PO_line_num(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
            class accountCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            active = schemas.BoolSchema
            
            
            class approved_currency_rate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,9}(?:\.\d{0,6})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_currency_rate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approved_price(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approved_quantity(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,10}(?:\.\d{0,5})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_quantity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approved_shipping_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_shipping_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approved_tax_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approved_tax_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            attachments = schemas.StrSchema
            
            
            class catalog_item(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'catalog_item':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created_at = schemas.DateTimeSchema
            
            
            class dateInvoiced(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateInvoiced':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class external_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            hot = schemas.BoolSchema
            id = schemas.IntSchema
            
            
            class inventoryItem(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inventoryItem':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_active = schemas.BoolSchema
        
            @staticmethod
            def item_attachments() -> typing.Type['OrderItemItemAttachments']:
                return OrderItemItemAttachments
            
            
            class last_changed_by(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_changed_by':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            last_modified = schemas.DateTimeSchema
            
            
            class lineComment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lineComment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class orderNum(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orderNum':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            po_note = schemas.StrSchema
            
            
            class po_version(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
            class purchase_order(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchase_order':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class purchaser(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchaser':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class receivedFailQty(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,10}(?:\.\d{0,5})?$',
                    }]
            
            
            class receivedPassQty(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,10}(?:\.\d{0,5})?$',
                    }]
            
            
            class shipping_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipping_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sku(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class status(
                schemas.ComposedBase,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            OrderItemStatusEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tax_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class total_cost(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,16}(?:\.\d{0,2})?$',
                    }]
            updated_at = schemas.DateTimeSchema
            
            
            class vendor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def receive_method() -> typing.Type['ZeroOneEnum']:
                return ZeroOneEnum
        
            @staticmethod
            def type() -> typing.Type['ZeroOneTwoEnum']:
                return ZeroOneTwoEnum
        
            @staticmethod
            def blanket() -> typing.Type['BlanketOrderItemRead']:
                return BlanketOrderItemRead
            __annotations__ = {
                "account": account,
                "approved_datetime": approved_datetime,
                "currency": currency,
                "name": name,
                "num": num,
                "pref_vendor": pref_vendor,
                "price": price,
                "quantity": quantity,
                "unit": unit,
                "PO": PO,
                "PO_line_num": PO_line_num,
                "accountCode": accountCode,
                "active": active,
                "approved_currency_rate": approved_currency_rate,
                "approved_price": approved_price,
                "approved_quantity": approved_quantity,
                "approved_shipping_amount": approved_shipping_amount,
                "approved_tax_amount": approved_tax_amount,
                "attachments": attachments,
                "catalog_item": catalog_item,
                "created_at": created_at,
                "dateInvoiced": dateInvoiced,
                "external_id": external_id,
                "hot": hot,
                "id": id,
                "inventoryItem": inventoryItem,
                "is_active": is_active,
                "item_attachments": item_attachments,
                "last_changed_by": last_changed_by,
                "last_modified": last_modified,
                "lineComment": lineComment,
                "orderNum": orderNum,
                "po_note": po_note,
                "po_version": po_version,
                "purchase_order": purchase_order,
                "purchaser": purchaser,
                "receivedFailQty": receivedFailQty,
                "receivedPassQty": receivedPassQty,
                "shipping_amount": shipping_amount,
                "sku": sku,
                "status": status,
                "tax_amount": tax_amount,
                "total_cost": total_cost,
                "updated_at": updated_at,
                "vendor": vendor,
                "receive_method": receive_method,
                "type": type,
                "blanket": blanket,
            }
    
    unit: MetaOapg.properties.unit
    quantity: MetaOapg.properties.quantity
    price: MetaOapg.properties.price
    num: MetaOapg.properties.num
    name: MetaOapg.properties.name
    currency: MetaOapg.properties.currency
    pref_vendor: MetaOapg.properties.pref_vendor
    account: MetaOapg.properties.account
    approved_datetime: MetaOapg.properties.approved_datetime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_datetime"]) -> MetaOapg.properties.approved_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num"]) -> MetaOapg.properties.num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pref_vendor"]) -> MetaOapg.properties.pref_vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PO"]) -> 'OrderItemPo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PO_line_num"]) -> MetaOapg.properties.PO_line_num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountCode"]) -> MetaOapg.properties.accountCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_currency_rate"]) -> MetaOapg.properties.approved_currency_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_price"]) -> MetaOapg.properties.approved_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_quantity"]) -> MetaOapg.properties.approved_quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_shipping_amount"]) -> MetaOapg.properties.approved_shipping_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_tax_amount"]) -> MetaOapg.properties.approved_tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catalog_item"]) -> MetaOapg.properties.catalog_item: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateInvoiced"]) -> MetaOapg.properties.dateInvoiced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hot"]) -> MetaOapg.properties.hot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inventoryItem"]) -> MetaOapg.properties.inventoryItem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_attachments"]) -> 'OrderItemItemAttachments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_changed_by"]) -> MetaOapg.properties.last_changed_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineComment"]) -> MetaOapg.properties.lineComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderNum"]) -> MetaOapg.properties.orderNum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["po_note"]) -> MetaOapg.properties.po_note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["po_version"]) -> MetaOapg.properties.po_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_order"]) -> MetaOapg.properties.purchase_order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaser"]) -> MetaOapg.properties.purchaser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receivedFailQty"]) -> MetaOapg.properties.receivedFailQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receivedPassQty"]) -> MetaOapg.properties.receivedPassQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_amount"]) -> MetaOapg.properties.shipping_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost"]) -> MetaOapg.properties.total_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receive_method"]) -> 'ZeroOneEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ZeroOneTwoEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blanket"]) -> 'BlanketOrderItemRead': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "approved_datetime", "currency", "name", "num", "pref_vendor", "price", "quantity", "unit", "PO", "PO_line_num", "accountCode", "active", "approved_currency_rate", "approved_price", "approved_quantity", "approved_shipping_amount", "approved_tax_amount", "attachments", "catalog_item", "created_at", "dateInvoiced", "external_id", "hot", "id", "inventoryItem", "is_active", "item_attachments", "last_changed_by", "last_modified", "lineComment", "orderNum", "po_note", "po_version", "purchase_order", "purchaser", "receivedFailQty", "receivedPassQty", "shipping_amount", "sku", "status", "tax_amount", "total_cost", "updated_at", "vendor", "receive_method", "type", "blanket", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_datetime"]) -> MetaOapg.properties.approved_datetime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num"]) -> MetaOapg.properties.num: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pref_vendor"]) -> MetaOapg.properties.pref_vendor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PO"]) -> typing.Union['OrderItemPo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PO_line_num"]) -> typing.Union[MetaOapg.properties.PO_line_num, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountCode"]) -> typing.Union[MetaOapg.properties.accountCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_currency_rate"]) -> typing.Union[MetaOapg.properties.approved_currency_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_price"]) -> typing.Union[MetaOapg.properties.approved_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_quantity"]) -> typing.Union[MetaOapg.properties.approved_quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_shipping_amount"]) -> typing.Union[MetaOapg.properties.approved_shipping_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_tax_amount"]) -> typing.Union[MetaOapg.properties.approved_tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union[MetaOapg.properties.attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catalog_item"]) -> typing.Union[MetaOapg.properties.catalog_item, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateInvoiced"]) -> typing.Union[MetaOapg.properties.dateInvoiced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hot"]) -> typing.Union[MetaOapg.properties.hot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inventoryItem"]) -> typing.Union[MetaOapg.properties.inventoryItem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_attachments"]) -> typing.Union['OrderItemItemAttachments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_changed_by"]) -> typing.Union[MetaOapg.properties.last_changed_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineComment"]) -> typing.Union[MetaOapg.properties.lineComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderNum"]) -> typing.Union[MetaOapg.properties.orderNum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["po_note"]) -> typing.Union[MetaOapg.properties.po_note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["po_version"]) -> typing.Union[MetaOapg.properties.po_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_order"]) -> typing.Union[MetaOapg.properties.purchase_order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaser"]) -> typing.Union[MetaOapg.properties.purchaser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receivedFailQty"]) -> typing.Union[MetaOapg.properties.receivedFailQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receivedPassQty"]) -> typing.Union[MetaOapg.properties.receivedPassQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_amount"]) -> typing.Union[MetaOapg.properties.shipping_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> typing.Union[MetaOapg.properties.tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost"]) -> typing.Union[MetaOapg.properties.total_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union[MetaOapg.properties.vendor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receive_method"]) -> typing.Union['ZeroOneEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['ZeroOneTwoEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blanket"]) -> typing.Union['BlanketOrderItemRead', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "approved_datetime", "currency", "name", "num", "pref_vendor", "price", "quantity", "unit", "PO", "PO_line_num", "accountCode", "active", "approved_currency_rate", "approved_price", "approved_quantity", "approved_shipping_amount", "approved_tax_amount", "attachments", "catalog_item", "created_at", "dateInvoiced", "external_id", "hot", "id", "inventoryItem", "is_active", "item_attachments", "last_changed_by", "last_modified", "lineComment", "orderNum", "po_note", "po_version", "purchase_order", "purchaser", "receivedFailQty", "receivedPassQty", "shipping_amount", "sku", "status", "tax_amount", "total_cost", "updated_at", "vendor", "receive_method", "type", "blanket", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        unit: typing.Union[MetaOapg.properties.unit, str, ],
        quantity: typing.Union[MetaOapg.properties.quantity, str, ],
        price: typing.Union[MetaOapg.properties.price, str, ],
        num: typing.Union[MetaOapg.properties.num, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        currency: typing.Union[MetaOapg.properties.currency, decimal.Decimal, int, ],
        pref_vendor: typing.Union[MetaOapg.properties.pref_vendor, decimal.Decimal, int, ],
        account: typing.Union[MetaOapg.properties.account, decimal.Decimal, int, ],
        approved_datetime: typing.Union[MetaOapg.properties.approved_datetime, None, str, datetime, ],
        PO: typing.Union['OrderItemPo', schemas.Unset] = schemas.unset,
        PO_line_num: typing.Union[MetaOapg.properties.PO_line_num, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accountCode: typing.Union[MetaOapg.properties.accountCode, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        approved_currency_rate: typing.Union[MetaOapg.properties.approved_currency_rate, None, str, schemas.Unset] = schemas.unset,
        approved_price: typing.Union[MetaOapg.properties.approved_price, None, str, schemas.Unset] = schemas.unset,
        approved_quantity: typing.Union[MetaOapg.properties.approved_quantity, None, str, schemas.Unset] = schemas.unset,
        approved_shipping_amount: typing.Union[MetaOapg.properties.approved_shipping_amount, None, str, schemas.Unset] = schemas.unset,
        approved_tax_amount: typing.Union[MetaOapg.properties.approved_tax_amount, None, str, schemas.Unset] = schemas.unset,
        attachments: typing.Union[MetaOapg.properties.attachments, str, schemas.Unset] = schemas.unset,
        catalog_item: typing.Union[MetaOapg.properties.catalog_item, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        dateInvoiced: typing.Union[MetaOapg.properties.dateInvoiced, None, str, datetime, schemas.Unset] = schemas.unset,
        external_id: typing.Union[MetaOapg.properties.external_id, str, schemas.Unset] = schemas.unset,
        hot: typing.Union[MetaOapg.properties.hot, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        inventoryItem: typing.Union[MetaOapg.properties.inventoryItem, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_active: typing.Union[MetaOapg.properties.is_active, bool, schemas.Unset] = schemas.unset,
        item_attachments: typing.Union['OrderItemItemAttachments', schemas.Unset] = schemas.unset,
        last_changed_by: typing.Union[MetaOapg.properties.last_changed_by, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, datetime, schemas.Unset] = schemas.unset,
        lineComment: typing.Union[MetaOapg.properties.lineComment, None, str, schemas.Unset] = schemas.unset,
        orderNum: typing.Union[MetaOapg.properties.orderNum, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        po_note: typing.Union[MetaOapg.properties.po_note, str, schemas.Unset] = schemas.unset,
        po_version: typing.Union[MetaOapg.properties.po_version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchase_order: typing.Union[MetaOapg.properties.purchase_order, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchaser: typing.Union[MetaOapg.properties.purchaser, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        receivedFailQty: typing.Union[MetaOapg.properties.receivedFailQty, str, schemas.Unset] = schemas.unset,
        receivedPassQty: typing.Union[MetaOapg.properties.receivedPassQty, str, schemas.Unset] = schemas.unset,
        shipping_amount: typing.Union[MetaOapg.properties.shipping_amount, None, str, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tax_amount: typing.Union[MetaOapg.properties.tax_amount, None, str, schemas.Unset] = schemas.unset,
        total_cost: typing.Union[MetaOapg.properties.total_cost, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        vendor: typing.Union[MetaOapg.properties.vendor, None, str, schemas.Unset] = schemas.unset,
        receive_method: typing.Union['ZeroOneEnum', schemas.Unset] = schemas.unset,
        type: typing.Union['ZeroOneTwoEnum', schemas.Unset] = schemas.unset,
        blanket: typing.Union['BlanketOrderItemRead', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderItem':
        return super().__new__(
            cls,
            *args,
            unit=unit,
            quantity=quantity,
            price=price,
            num=num,
            name=name,
            currency=currency,
            pref_vendor=pref_vendor,
            account=account,
            approved_datetime=approved_datetime,
            PO=PO,
            PO_line_num=PO_line_num,
            accountCode=accountCode,
            active=active,
            approved_currency_rate=approved_currency_rate,
            approved_price=approved_price,
            approved_quantity=approved_quantity,
            approved_shipping_amount=approved_shipping_amount,
            approved_tax_amount=approved_tax_amount,
            attachments=attachments,
            catalog_item=catalog_item,
            created_at=created_at,
            dateInvoiced=dateInvoiced,
            external_id=external_id,
            hot=hot,
            id=id,
            inventoryItem=inventoryItem,
            is_active=is_active,
            item_attachments=item_attachments,
            last_changed_by=last_changed_by,
            last_modified=last_modified,
            lineComment=lineComment,
            orderNum=orderNum,
            po_note=po_note,
            po_version=po_version,
            purchase_order=purchase_order,
            purchaser=purchaser,
            receivedFailQty=receivedFailQty,
            receivedPassQty=receivedPassQty,
            shipping_amount=shipping_amount,
            sku=sku,
            status=status,
            tax_amount=tax_amount,
            total_cost=total_cost,
            updated_at=updated_at,
            vendor=vendor,
            receive_method=receive_method,
            type=type,
            blanket=blanket,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.blanket_order_item_read import BlanketOrderItemRead
from procurify_python_sdk.model.null_enum import NullEnum
from procurify_python_sdk.model.order_item_item_attachments import OrderItemItemAttachments
from procurify_python_sdk.model.order_item_po import OrderItemPo
from procurify_python_sdk.model.order_item_status_enum import OrderItemStatusEnum
from procurify_python_sdk.model.zero_one_enum import ZeroOneEnum
from procurify_python_sdk.model.zero_one_two_enum import ZeroOneTwoEnum
