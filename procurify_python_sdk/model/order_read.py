# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class OrderRead(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "dateRequired",
            "next_approver",
            "department",
            "branch",
            "logs",
            "user",
            "uuid",
        }
        
        class properties:
            uuid = schemas.UUIDSchema
        
            @staticmethod
            def branch() -> typing.Type['Branch']:
                return Branch
        
            @staticmethod
            def user() -> typing.Type['UserSummary']:
                return UserSummary
        
            @staticmethod
            def department() -> typing.Type['DepartmentSummary']:
                return DepartmentSummary
            
            
            class logs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MasterLogger']:
                        return MasterLogger
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MasterLogger'], typing.List['MasterLogger']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MasterLogger':
                    return super().__getitem__(i)
            dateRequired = schemas.DateTimeSchema
        
            @staticmethod
            def next_approver() -> typing.Type['UserSummary']:
                return UserSummary
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            num = schemas.IntSchema
        
            @staticmethod
            def currency() -> typing.Type['CurrencySummary']:
                return CurrencySummary
            total_cost_in_base_currency = schemas.Float32Schema
            item_count = schemas.IntSchema
            
            
            class ip_address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ip_address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            date = schemas.DateTimeSchema
            dateModified = schemas.DateTimeSchema
            
            
            class lineCount(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lineCount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class purchasedCount(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
            class totalPrice(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,14}(?:\.\d{0,2})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'totalPrice':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def status() -> typing.Type['OrderStatusEnum']:
                return OrderStatusEnum
            
            
            class approval_delegatee(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approval_delegatee':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def punchout_group() -> typing.Type['PunchOutReadDocsNullable']:
                return PunchOutReadDocsNullable
        
            @staticmethod
            def punchout_shipping_address() -> typing.Type['AddressDocsNullable']:
                return AddressDocsNullable
            punchout_items_rejected = schemas.BoolSchema
            
            
            class punchout_supplier_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_supplier_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_supplier_icon(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_supplier_icon':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_vendor_reference(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_vendor_reference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            has_blanket_order_items = schemas.BoolSchema
            __annotations__ = {
                "uuid": uuid,
                "branch": branch,
                "user": user,
                "department": department,
                "logs": logs,
                "dateRequired": dateRequired,
                "next_approver": next_approver,
                "description": description,
                "num": num,
                "currency": currency,
                "total_cost_in_base_currency": total_cost_in_base_currency,
                "item_count": item_count,
                "ip_address": ip_address,
                "date": date,
                "dateModified": dateModified,
                "lineCount": lineCount,
                "purchasedCount": purchasedCount,
                "totalPrice": totalPrice,
                "status": status,
                "approval_delegatee": approval_delegatee,
                "punchout_group": punchout_group,
                "punchout_shipping_address": punchout_shipping_address,
                "punchout_items_rejected": punchout_items_rejected,
                "punchout_supplier_name": punchout_supplier_name,
                "punchout_supplier_icon": punchout_supplier_icon,
                "punchout_vendor_reference": punchout_vendor_reference,
                "has_blanket_order_items": has_blanket_order_items,
            }
    
    dateRequired: MetaOapg.properties.dateRequired
    next_approver: 'UserSummary'
    department: 'DepartmentSummary'
    branch: 'Branch'
    logs: MetaOapg.properties.logs
    user: 'UserSummary'
    uuid: MetaOapg.properties.uuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch"]) -> 'Branch': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'UserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> 'DepartmentSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logs"]) -> MetaOapg.properties.logs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateRequired"]) -> MetaOapg.properties.dateRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_approver"]) -> 'UserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num"]) -> MetaOapg.properties.num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'CurrencySummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost_in_base_currency"]) -> MetaOapg.properties.total_cost_in_base_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_count"]) -> MetaOapg.properties.item_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateModified"]) -> MetaOapg.properties.dateModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineCount"]) -> MetaOapg.properties.lineCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchasedCount"]) -> MetaOapg.properties.purchasedCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPrice"]) -> MetaOapg.properties.totalPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'OrderStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval_delegatee"]) -> MetaOapg.properties.approval_delegatee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_group"]) -> 'PunchOutReadDocsNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_shipping_address"]) -> 'AddressDocsNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_items_rejected"]) -> MetaOapg.properties.punchout_items_rejected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_name"]) -> MetaOapg.properties.punchout_supplier_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_icon"]) -> MetaOapg.properties.punchout_supplier_icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_vendor_reference"]) -> MetaOapg.properties.punchout_vendor_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_blanket_order_items"]) -> MetaOapg.properties.has_blanket_order_items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "branch", "user", "department", "logs", "dateRequired", "next_approver", "description", "num", "currency", "total_cost_in_base_currency", "item_count", "ip_address", "date", "dateModified", "lineCount", "purchasedCount", "totalPrice", "status", "approval_delegatee", "punchout_group", "punchout_shipping_address", "punchout_items_rejected", "punchout_supplier_name", "punchout_supplier_icon", "punchout_vendor_reference", "has_blanket_order_items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch"]) -> 'Branch': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'UserSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> 'DepartmentSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logs"]) -> MetaOapg.properties.logs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateRequired"]) -> MetaOapg.properties.dateRequired: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_approver"]) -> 'UserSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num"]) -> typing.Union[MetaOapg.properties.num, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['CurrencySummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost_in_base_currency"]) -> typing.Union[MetaOapg.properties.total_cost_in_base_currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_count"]) -> typing.Union[MetaOapg.properties.item_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> typing.Union[MetaOapg.properties.ip_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateModified"]) -> typing.Union[MetaOapg.properties.dateModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineCount"]) -> typing.Union[MetaOapg.properties.lineCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchasedCount"]) -> typing.Union[MetaOapg.properties.purchasedCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPrice"]) -> typing.Union[MetaOapg.properties.totalPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['OrderStatusEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval_delegatee"]) -> typing.Union[MetaOapg.properties.approval_delegatee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_group"]) -> typing.Union['PunchOutReadDocsNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_shipping_address"]) -> typing.Union['AddressDocsNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_items_rejected"]) -> typing.Union[MetaOapg.properties.punchout_items_rejected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_name"]) -> typing.Union[MetaOapg.properties.punchout_supplier_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_icon"]) -> typing.Union[MetaOapg.properties.punchout_supplier_icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_vendor_reference"]) -> typing.Union[MetaOapg.properties.punchout_vendor_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_blanket_order_items"]) -> typing.Union[MetaOapg.properties.has_blanket_order_items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "branch", "user", "department", "logs", "dateRequired", "next_approver", "description", "num", "currency", "total_cost_in_base_currency", "item_count", "ip_address", "date", "dateModified", "lineCount", "purchasedCount", "totalPrice", "status", "approval_delegatee", "punchout_group", "punchout_shipping_address", "punchout_items_rejected", "punchout_supplier_name", "punchout_supplier_icon", "punchout_vendor_reference", "has_blanket_order_items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dateRequired: typing.Union[MetaOapg.properties.dateRequired, str, datetime, ],
        next_approver: 'UserSummary',
        department: 'DepartmentSummary',
        branch: 'Branch',
        logs: typing.Union[MetaOapg.properties.logs, list, tuple, ],
        user: 'UserSummary',
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        num: typing.Union[MetaOapg.properties.num, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currency: typing.Union['CurrencySummary', schemas.Unset] = schemas.unset,
        total_cost_in_base_currency: typing.Union[MetaOapg.properties.total_cost_in_base_currency, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        item_count: typing.Union[MetaOapg.properties.item_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ip_address: typing.Union[MetaOapg.properties.ip_address, None, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, datetime, schemas.Unset] = schemas.unset,
        dateModified: typing.Union[MetaOapg.properties.dateModified, str, datetime, schemas.Unset] = schemas.unset,
        lineCount: typing.Union[MetaOapg.properties.lineCount, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchasedCount: typing.Union[MetaOapg.properties.purchasedCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalPrice: typing.Union[MetaOapg.properties.totalPrice, None, str, schemas.Unset] = schemas.unset,
        status: typing.Union['OrderStatusEnum', schemas.Unset] = schemas.unset,
        approval_delegatee: typing.Union[MetaOapg.properties.approval_delegatee, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        punchout_group: typing.Union['PunchOutReadDocsNullable', schemas.Unset] = schemas.unset,
        punchout_shipping_address: typing.Union['AddressDocsNullable', schemas.Unset] = schemas.unset,
        punchout_items_rejected: typing.Union[MetaOapg.properties.punchout_items_rejected, bool, schemas.Unset] = schemas.unset,
        punchout_supplier_name: typing.Union[MetaOapg.properties.punchout_supplier_name, None, str, schemas.Unset] = schemas.unset,
        punchout_supplier_icon: typing.Union[MetaOapg.properties.punchout_supplier_icon, None, str, schemas.Unset] = schemas.unset,
        punchout_vendor_reference: typing.Union[MetaOapg.properties.punchout_vendor_reference, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        has_blanket_order_items: typing.Union[MetaOapg.properties.has_blanket_order_items, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderRead':
        return super().__new__(
            cls,
            *args,
            dateRequired=dateRequired,
            next_approver=next_approver,
            department=department,
            branch=branch,
            logs=logs,
            user=user,
            uuid=uuid,
            description=description,
            num=num,
            currency=currency,
            total_cost_in_base_currency=total_cost_in_base_currency,
            item_count=item_count,
            ip_address=ip_address,
            date=date,
            dateModified=dateModified,
            lineCount=lineCount,
            purchasedCount=purchasedCount,
            totalPrice=totalPrice,
            status=status,
            approval_delegatee=approval_delegatee,
            punchout_group=punchout_group,
            punchout_shipping_address=punchout_shipping_address,
            punchout_items_rejected=punchout_items_rejected,
            punchout_supplier_name=punchout_supplier_name,
            punchout_supplier_icon=punchout_supplier_icon,
            punchout_vendor_reference=punchout_vendor_reference,
            has_blanket_order_items=has_blanket_order_items,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.address_docs_nullable import AddressDocsNullable
from procurify_python_sdk.model.branch import Branch
from procurify_python_sdk.model.currency_summary import CurrencySummary
from procurify_python_sdk.model.department_summary import DepartmentSummary
from procurify_python_sdk.model.master_logger import MasterLogger
from procurify_python_sdk.model.order_status_enum import OrderStatusEnum
from procurify_python_sdk.model.punch_out_read_docs_nullable import PunchOutReadDocsNullable
from procurify_python_sdk.model.user_summary import UserSummary
