# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class SimpleBill(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "vendor",
            "currency",
            "user",
            "uuid",
        }
        
        class properties:
        
            @staticmethod
            def currency() -> typing.Type['SimpleCurrency']:
                return SimpleCurrency
            uuid = schemas.UUIDSchema
        
            @staticmethod
            def vendor() -> typing.Type['SimpleAPVendor']:
                return SimpleAPVendor
        
            @staticmethod
            def user() -> typing.Type['SimpleUser']:
                return SimpleUser
            
            
            class version(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_maximum = 4294967295
                    inclusive_minimum = 0
            id = schemas.IntSchema
        
            @staticmethod
            def status() -> typing.Type['BillStatusEnum']:
                return BillStatusEnum
            locked = schemas.BoolSchema
        
            @staticmethod
            def items() -> typing.Type['SimpleBillItems']:
                return SimpleBillItems
            
            
            class due_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'due_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            total_cost_with_tax = schemas.Float32Schema
            
            
            class invoice_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invoice_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class next_approver_choices(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApproverRead']:
                        return ApproverRead
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_approver_choices':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def last_export_user() -> typing.Type['SimpleUserProfile']:
                return SimpleUserProfile
            last_modified_datetime = schemas.DateTimeSchema
            last_export_date = schemas.DateSchema
            
            
            class submitted_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'submitted_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gl_post_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gl_post_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class invoice_number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
            class group(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'group':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def type() -> typing.Type['ZeroOneTwoEnum']:
                return ZeroOneTwoEnum
        
            @staticmethod
            def approver() -> typing.Type['BillListViewApproverUserDocsNullable']:
                return BillListViewApproverUserDocsNullable
            past_due = schemas.BoolSchema
            
            
            class payment_uuid(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_uuid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            invoice_uuid = schemas.StrSchema
            __annotations__ = {
                "currency": currency,
                "uuid": uuid,
                "vendor": vendor,
                "user": user,
                "version": version,
                "id": id,
                "status": status,
                "locked": locked,
                "items": items,
                "due_date": due_date,
                "total_cost_with_tax": total_cost_with_tax,
                "invoice_date": invoice_date,
                "next_approver_choices": next_approver_choices,
                "last_export_user": last_export_user,
                "last_modified_datetime": last_modified_datetime,
                "last_export_date": last_export_date,
                "submitted_date": submitted_date,
                "gl_post_date": gl_post_date,
                "invoice_number": invoice_number,
                "group": group,
                "type": type,
                "approver": approver,
                "past_due": past_due,
                "payment_uuid": payment_uuid,
                "invoice_uuid": invoice_uuid,
            }
    
    vendor: 'SimpleAPVendor'
    currency: 'SimpleCurrency'
    user: 'SimpleUser'
    uuid: MetaOapg.properties.uuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'SimpleCurrency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> 'SimpleAPVendor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'SimpleUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'BillStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> 'SimpleBillItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost_with_tax"]) -> MetaOapg.properties.total_cost_with_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_date"]) -> MetaOapg.properties.invoice_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_approver_choices"]) -> MetaOapg.properties.next_approver_choices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_export_user"]) -> 'SimpleUserProfile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified_datetime"]) -> MetaOapg.properties.last_modified_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_export_date"]) -> MetaOapg.properties.last_export_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitted_date"]) -> MetaOapg.properties.submitted_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gl_post_date"]) -> MetaOapg.properties.gl_post_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_number"]) -> MetaOapg.properties.invoice_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ZeroOneTwoEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approver"]) -> 'BillListViewApproverUserDocsNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["past_due"]) -> MetaOapg.properties.past_due: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_uuid"]) -> MetaOapg.properties.payment_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_uuid"]) -> MetaOapg.properties.invoice_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency", "uuid", "vendor", "user", "version", "id", "status", "locked", "items", "due_date", "total_cost_with_tax", "invoice_date", "next_approver_choices", "last_export_user", "last_modified_datetime", "last_export_date", "submitted_date", "gl_post_date", "invoice_number", "group", "type", "approver", "past_due", "payment_uuid", "invoice_uuid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'SimpleCurrency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> 'SimpleAPVendor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'SimpleUser': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['BillStatusEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> typing.Union[MetaOapg.properties.locked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union['SimpleBillItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> typing.Union[MetaOapg.properties.due_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost_with_tax"]) -> typing.Union[MetaOapg.properties.total_cost_with_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_date"]) -> typing.Union[MetaOapg.properties.invoice_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_approver_choices"]) -> typing.Union[MetaOapg.properties.next_approver_choices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_export_user"]) -> typing.Union['SimpleUserProfile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified_datetime"]) -> typing.Union[MetaOapg.properties.last_modified_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_export_date"]) -> typing.Union[MetaOapg.properties.last_export_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitted_date"]) -> typing.Union[MetaOapg.properties.submitted_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gl_post_date"]) -> typing.Union[MetaOapg.properties.gl_post_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_number"]) -> typing.Union[MetaOapg.properties.invoice_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['ZeroOneTwoEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approver"]) -> typing.Union['BillListViewApproverUserDocsNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["past_due"]) -> typing.Union[MetaOapg.properties.past_due, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_uuid"]) -> typing.Union[MetaOapg.properties.payment_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_uuid"]) -> typing.Union[MetaOapg.properties.invoice_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency", "uuid", "vendor", "user", "version", "id", "status", "locked", "items", "due_date", "total_cost_with_tax", "invoice_date", "next_approver_choices", "last_export_user", "last_modified_datetime", "last_export_date", "submitted_date", "gl_post_date", "invoice_number", "group", "type", "approver", "past_due", "payment_uuid", "invoice_uuid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        vendor: 'SimpleAPVendor',
        currency: 'SimpleCurrency',
        user: 'SimpleUser',
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union['BillStatusEnum', schemas.Unset] = schemas.unset,
        locked: typing.Union[MetaOapg.properties.locked, bool, schemas.Unset] = schemas.unset,
        items: typing.Union['SimpleBillItems', schemas.Unset] = schemas.unset,
        due_date: typing.Union[MetaOapg.properties.due_date, None, str, datetime, schemas.Unset] = schemas.unset,
        total_cost_with_tax: typing.Union[MetaOapg.properties.total_cost_with_tax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        invoice_date: typing.Union[MetaOapg.properties.invoice_date, None, str, datetime, schemas.Unset] = schemas.unset,
        next_approver_choices: typing.Union[MetaOapg.properties.next_approver_choices, list, tuple, None, schemas.Unset] = schemas.unset,
        last_export_user: typing.Union['SimpleUserProfile', schemas.Unset] = schemas.unset,
        last_modified_datetime: typing.Union[MetaOapg.properties.last_modified_datetime, str, datetime, schemas.Unset] = schemas.unset,
        last_export_date: typing.Union[MetaOapg.properties.last_export_date, str, date, schemas.Unset] = schemas.unset,
        submitted_date: typing.Union[MetaOapg.properties.submitted_date, None, str, datetime, schemas.Unset] = schemas.unset,
        gl_post_date: typing.Union[MetaOapg.properties.gl_post_date, None, str, datetime, schemas.Unset] = schemas.unset,
        invoice_number: typing.Union[MetaOapg.properties.invoice_number, str, schemas.Unset] = schemas.unset,
        group: typing.Union[MetaOapg.properties.group, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union['ZeroOneTwoEnum', schemas.Unset] = schemas.unset,
        approver: typing.Union['BillListViewApproverUserDocsNullable', schemas.Unset] = schemas.unset,
        past_due: typing.Union[MetaOapg.properties.past_due, bool, schemas.Unset] = schemas.unset,
        payment_uuid: typing.Union[MetaOapg.properties.payment_uuid, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        invoice_uuid: typing.Union[MetaOapg.properties.invoice_uuid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SimpleBill':
        return super().__new__(
            cls,
            *args,
            vendor=vendor,
            currency=currency,
            user=user,
            uuid=uuid,
            version=version,
            id=id,
            status=status,
            locked=locked,
            items=items,
            due_date=due_date,
            total_cost_with_tax=total_cost_with_tax,
            invoice_date=invoice_date,
            next_approver_choices=next_approver_choices,
            last_export_user=last_export_user,
            last_modified_datetime=last_modified_datetime,
            last_export_date=last_export_date,
            submitted_date=submitted_date,
            gl_post_date=gl_post_date,
            invoice_number=invoice_number,
            group=group,
            type=type,
            approver=approver,
            past_due=past_due,
            payment_uuid=payment_uuid,
            invoice_uuid=invoice_uuid,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.approver_read import ApproverRead
from procurify_python_sdk.model.bill_list_view_approver_user_docs_nullable import BillListViewApproverUserDocsNullable
from procurify_python_sdk.model.bill_status_enum import BillStatusEnum
from procurify_python_sdk.model.simple_ap_vendor import SimpleAPVendor
from procurify_python_sdk.model.simple_bill_items import SimpleBillItems
from procurify_python_sdk.model.simple_currency import SimpleCurrency
from procurify_python_sdk.model.simple_user import SimpleUser
from procurify_python_sdk.model.simple_user_profile import SimpleUserProfile
from procurify_python_sdk.model.zero_one_two_enum import ZeroOneTwoEnum
