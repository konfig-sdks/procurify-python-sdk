# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class ItemReadSerializerV2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "cost_allocations",
            "creditcard_item",
            "quantity",
            "vendor",
            "description",
            "currency",
            "expense",
        }
        
        class properties:
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1000
        
            @staticmethod
            def expense() -> typing.Type['ExpenseReadNullable']:
                return ExpenseReadNullable
        
            @staticmethod
            def vendor() -> typing.Type['VendorRead']:
                return VendorRead
            
            
            class quantity(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            
            
            class cost_allocations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CostAllocationRead']:
                        return CostAllocationRead
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CostAllocationRead'], typing.List['CostAllocationRead']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cost_allocations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CostAllocationRead':
                    return super().__getitem__(i)
        
            @staticmethod
            def creditcard_item() -> typing.Type['CreditCardItemReadNullable']:
                return CreditCardItemReadNullable
            id = schemas.IntSchema
        
            @staticmethod
            def orderitem() -> typing.Type['OrderItemRead']:
                return OrderItemRead
            
            
            class bill(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bill':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sku(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
        
            @staticmethod
            def po() -> typing.Type['PODocs']:
                return PODocs
            
            
            class unit(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 30
            total_cost = schemas.Float64Schema
            received_on = schemas.DateTimeSchema
            
            
            class packing_slips(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Attachment']:
                        return Attachment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Attachment'], typing.List['Attachment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'packing_slips':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Attachment':
                    return super().__getitem__(i)
            archived = schemas.BoolSchema
        
            @staticmethod
            def expense_report() -> typing.Type['ExpenseReportDocs']:
                return ExpenseReportDocs
            same_unit_cost = schemas.BoolSchema
            is_edited = schemas.BoolSchema
        
            @staticmethod
            def unit_cost_diff_log() -> typing.Type['UnitCostDiffLogDocsNullable']:
                return UnitCostDiffLogDocsNullable
            
            
            class tax_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 30
            
            
            class tax_percentage(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,8}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax_percentage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            tax_amount = schemas.Float64Schema
            tax_is_inclusive = schemas.BoolSchema
            
            
            class tax(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            total_cost_with_tax = schemas.Float64Schema
            
            
            class shipping_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,8})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipping_amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            unit_cost = schemas.Float32Schema
            
            
            class custom_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFieldValueRead']:
                        return CustomFieldValueRead
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomFieldValueRead'], typing.List['CustomFieldValueRead']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFieldValueRead':
                    return super().__getitem__(i)
            item_type = schemas.IntSchema
            type = schemas.StrSchema
            bill_by_cost = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "expense": expense,
                "vendor": vendor,
                "quantity": quantity,
                "currency": currency,
                "cost_allocations": cost_allocations,
                "creditcard_item": creditcard_item,
                "id": id,
                "orderitem": orderitem,
                "bill": bill,
                "sku": sku,
                "po": po,
                "unit": unit,
                "total_cost": total_cost,
                "received_on": received_on,
                "packing_slips": packing_slips,
                "archived": archived,
                "expense_report": expense_report,
                "same_unit_cost": same_unit_cost,
                "is_edited": is_edited,
                "unit_cost_diff_log": unit_cost_diff_log,
                "tax_name": tax_name,
                "tax_percentage": tax_percentage,
                "tax_amount": tax_amount,
                "tax_is_inclusive": tax_is_inclusive,
                "tax": tax,
                "total_cost_with_tax": total_cost_with_tax,
                "shipping_amount": shipping_amount,
                "unit_cost": unit_cost,
                "custom_fields": custom_fields,
                "item_type": item_type,
                "type": type,
                "bill_by_cost": bill_by_cost,
            }
    
    cost_allocations: MetaOapg.properties.cost_allocations
    creditcard_item: 'CreditCardItemReadNullable'
    quantity: MetaOapg.properties.quantity
    vendor: 'VendorRead'
    description: MetaOapg.properties.description
    currency: 'Currency'
    expense: 'ExpenseReadNullable'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expense"]) -> 'ExpenseReadNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> 'VendorRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cost_allocations"]) -> MetaOapg.properties.cost_allocations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditcard_item"]) -> 'CreditCardItemReadNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderitem"]) -> 'OrderItemRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill"]) -> MetaOapg.properties.bill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["po"]) -> 'PODocs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost"]) -> MetaOapg.properties.total_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["received_on"]) -> MetaOapg.properties.received_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packing_slips"]) -> MetaOapg.properties.packing_slips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expense_report"]) -> 'ExpenseReportDocs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["same_unit_cost"]) -> MetaOapg.properties.same_unit_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_edited"]) -> MetaOapg.properties.is_edited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_cost_diff_log"]) -> 'UnitCostDiffLogDocsNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_name"]) -> MetaOapg.properties.tax_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_percentage"]) -> MetaOapg.properties.tax_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_is_inclusive"]) -> MetaOapg.properties.tax_is_inclusive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> MetaOapg.properties.tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost_with_tax"]) -> MetaOapg.properties.total_cost_with_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_amount"]) -> MetaOapg.properties.shipping_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_cost"]) -> MetaOapg.properties.unit_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_type"]) -> MetaOapg.properties.item_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_by_cost"]) -> MetaOapg.properties.bill_by_cost: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "expense", "vendor", "quantity", "currency", "cost_allocations", "creditcard_item", "id", "orderitem", "bill", "sku", "po", "unit", "total_cost", "received_on", "packing_slips", "archived", "expense_report", "same_unit_cost", "is_edited", "unit_cost_diff_log", "tax_name", "tax_percentage", "tax_amount", "tax_is_inclusive", "tax", "total_cost_with_tax", "shipping_amount", "unit_cost", "custom_fields", "item_type", "type", "bill_by_cost", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expense"]) -> 'ExpenseReadNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> 'VendorRead': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cost_allocations"]) -> MetaOapg.properties.cost_allocations: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditcard_item"]) -> 'CreditCardItemReadNullable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderitem"]) -> typing.Union['OrderItemRead', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill"]) -> typing.Union[MetaOapg.properties.bill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["po"]) -> typing.Union['PODocs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> typing.Union[MetaOapg.properties.unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost"]) -> typing.Union[MetaOapg.properties.total_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["received_on"]) -> typing.Union[MetaOapg.properties.received_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packing_slips"]) -> typing.Union[MetaOapg.properties.packing_slips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expense_report"]) -> typing.Union['ExpenseReportDocs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["same_unit_cost"]) -> typing.Union[MetaOapg.properties.same_unit_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_edited"]) -> typing.Union[MetaOapg.properties.is_edited, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_cost_diff_log"]) -> typing.Union['UnitCostDiffLogDocsNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_name"]) -> typing.Union[MetaOapg.properties.tax_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_percentage"]) -> typing.Union[MetaOapg.properties.tax_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> typing.Union[MetaOapg.properties.tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_is_inclusive"]) -> typing.Union[MetaOapg.properties.tax_is_inclusive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union[MetaOapg.properties.tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost_with_tax"]) -> typing.Union[MetaOapg.properties.total_cost_with_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_amount"]) -> typing.Union[MetaOapg.properties.shipping_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_cost"]) -> typing.Union[MetaOapg.properties.unit_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> typing.Union[MetaOapg.properties.custom_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_type"]) -> typing.Union[MetaOapg.properties.item_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_by_cost"]) -> typing.Union[MetaOapg.properties.bill_by_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "expense", "vendor", "quantity", "currency", "cost_allocations", "creditcard_item", "id", "orderitem", "bill", "sku", "po", "unit", "total_cost", "received_on", "packing_slips", "archived", "expense_report", "same_unit_cost", "is_edited", "unit_cost_diff_log", "tax_name", "tax_percentage", "tax_amount", "tax_is_inclusive", "tax", "total_cost_with_tax", "shipping_amount", "unit_cost", "custom_fields", "item_type", "type", "bill_by_cost", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cost_allocations: typing.Union[MetaOapg.properties.cost_allocations, list, tuple, ],
        creditcard_item: 'CreditCardItemReadNullable',
        quantity: typing.Union[MetaOapg.properties.quantity, str, ],
        vendor: 'VendorRead',
        description: typing.Union[MetaOapg.properties.description, str, ],
        currency: 'Currency',
        expense: 'ExpenseReadNullable',
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        orderitem: typing.Union['OrderItemRead', schemas.Unset] = schemas.unset,
        bill: typing.Union[MetaOapg.properties.bill, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
        po: typing.Union['PODocs', schemas.Unset] = schemas.unset,
        unit: typing.Union[MetaOapg.properties.unit, str, schemas.Unset] = schemas.unset,
        total_cost: typing.Union[MetaOapg.properties.total_cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        received_on: typing.Union[MetaOapg.properties.received_on, str, datetime, schemas.Unset] = schemas.unset,
        packing_slips: typing.Union[MetaOapg.properties.packing_slips, list, tuple, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        expense_report: typing.Union['ExpenseReportDocs', schemas.Unset] = schemas.unset,
        same_unit_cost: typing.Union[MetaOapg.properties.same_unit_cost, bool, schemas.Unset] = schemas.unset,
        is_edited: typing.Union[MetaOapg.properties.is_edited, bool, schemas.Unset] = schemas.unset,
        unit_cost_diff_log: typing.Union['UnitCostDiffLogDocsNullable', schemas.Unset] = schemas.unset,
        tax_name: typing.Union[MetaOapg.properties.tax_name, str, schemas.Unset] = schemas.unset,
        tax_percentage: typing.Union[MetaOapg.properties.tax_percentage, None, str, schemas.Unset] = schemas.unset,
        tax_amount: typing.Union[MetaOapg.properties.tax_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tax_is_inclusive: typing.Union[MetaOapg.properties.tax_is_inclusive, bool, schemas.Unset] = schemas.unset,
        tax: typing.Union[MetaOapg.properties.tax, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_cost_with_tax: typing.Union[MetaOapg.properties.total_cost_with_tax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        shipping_amount: typing.Union[MetaOapg.properties.shipping_amount, None, str, schemas.Unset] = schemas.unset,
        unit_cost: typing.Union[MetaOapg.properties.unit_cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        custom_fields: typing.Union[MetaOapg.properties.custom_fields, list, tuple, schemas.Unset] = schemas.unset,
        item_type: typing.Union[MetaOapg.properties.item_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        bill_by_cost: typing.Union[MetaOapg.properties.bill_by_cost, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ItemReadSerializerV2':
        return super().__new__(
            cls,
            *args,
            cost_allocations=cost_allocations,
            creditcard_item=creditcard_item,
            quantity=quantity,
            vendor=vendor,
            description=description,
            currency=currency,
            expense=expense,
            id=id,
            orderitem=orderitem,
            bill=bill,
            sku=sku,
            po=po,
            unit=unit,
            total_cost=total_cost,
            received_on=received_on,
            packing_slips=packing_slips,
            archived=archived,
            expense_report=expense_report,
            same_unit_cost=same_unit_cost,
            is_edited=is_edited,
            unit_cost_diff_log=unit_cost_diff_log,
            tax_name=tax_name,
            tax_percentage=tax_percentage,
            tax_amount=tax_amount,
            tax_is_inclusive=tax_is_inclusive,
            tax=tax,
            total_cost_with_tax=total_cost_with_tax,
            shipping_amount=shipping_amount,
            unit_cost=unit_cost,
            custom_fields=custom_fields,
            item_type=item_type,
            type=type,
            bill_by_cost=bill_by_cost,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.attachment import Attachment
from procurify_python_sdk.model.cost_allocation_read import CostAllocationRead
from procurify_python_sdk.model.credit_card_item_read_nullable import CreditCardItemReadNullable
from procurify_python_sdk.model.currency import Currency
from procurify_python_sdk.model.custom_field_value_read import CustomFieldValueRead
from procurify_python_sdk.model.expense_read_nullable import ExpenseReadNullable
from procurify_python_sdk.model.expense_report_docs import ExpenseReportDocs
from procurify_python_sdk.model.order_item_read import OrderItemRead
from procurify_python_sdk.model.po_docs import PODocs
from procurify_python_sdk.model.unit_cost_diff_log_docs_nullable import UnitCostDiffLogDocsNullable
from procurify_python_sdk.model.vendor_read import VendorRead
