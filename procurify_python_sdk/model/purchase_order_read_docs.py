# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class PurchaseOrderReadDocs(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "number",
            "purchased_currency",
            "total",
            "promise_date",
            "total_amount",
            "purchaser",
            "subtotal",
            "id",
            "pref_vendor",
            "uuid",
        }
        
        class properties:
            id = schemas.IntSchema
            number = schemas.StrSchema
        
            @staticmethod
            def pref_vendor() -> typing.Type['SimpleVendor']:
                return SimpleVendor
            promise_date = schemas.DateTimeSchema
        
            @staticmethod
            def purchased_currency() -> typing.Type['SimpleCurrency']:
                return SimpleCurrency
        
            @staticmethod
            def purchaser() -> typing.Type['SimpleUser']:
                return SimpleUser
            
            
            class subtotal(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,17}(?:\.\d{0,2})?$',
                    }]
            
            
            class total(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,17}(?:\.\d{0,2})?$',
                    }]
            uuid = schemas.UUIDSchema
            
            
            class total_amount(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,2})?$',
                    }]
            
            
            class version(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
            class PO_Num(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 30
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PO_Num':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            date = schemas.DateTimeSchema
        
            @staticmethod
            def discount() -> typing.Type['PriceModifierDocs']:
                return PriceModifierDocs
            
            
            class freight(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,6})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'freight':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def fulfilment_status() -> typing.Type['FulfilmentStatusEnum']:
                return FulfilmentStatusEnum
            item_count = schemas.IntSchema
            last_modified = schemas.DateTimeSchema
            
            
            class other(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,13}(?:\.\d{0,6})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'other':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            procurify_PO = schemas.IntSchema
            
            
            class punchout_system(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_system':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class purchase_agreement(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchase_agreement':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def purchase_agreement_status() -> typing.Type['ExpenseTypeEnumNullable']:
                return ExpenseTypeEnumNullable
            
            
            class purchased_currency_rate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
                    regex=[{
                        'pattern': r'^\d{0,9}(?:\.\d{0,6})?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchased_currency_rate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class state(
                schemas.ComposedBase,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            PurchaseOrderStateEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            punchout_items_rejected = schemas.BoolSchema
            currency = schemas.StrSchema
            
            
            class email_status(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'email_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class email_status_updated_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'email_status_updated_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_supplier_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_supplier_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_supplier_icon(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_supplier_icon':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punchout_vendor_reference(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punchout_vendor_reference':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            has_blanket_order_items = schemas.BoolSchema
            
            
            class expiry_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expiry_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "number": number,
                "pref_vendor": pref_vendor,
                "promise_date": promise_date,
                "purchased_currency": purchased_currency,
                "purchaser": purchaser,
                "subtotal": subtotal,
                "total": total,
                "uuid": uuid,
                "total_amount": total_amount,
                "version": version,
                "PO_Num": PO_Num,
                "date": date,
                "discount": discount,
                "freight": freight,
                "fulfilment_status": fulfilment_status,
                "item_count": item_count,
                "last_modified": last_modified,
                "other": other,
                "procurify_PO": procurify_PO,
                "punchout_system": punchout_system,
                "purchase_agreement": purchase_agreement,
                "purchase_agreement_status": purchase_agreement_status,
                "purchased_currency_rate": purchased_currency_rate,
                "state": state,
                "punchout_items_rejected": punchout_items_rejected,
                "currency": currency,
                "email_status": email_status,
                "email_status_updated_at": email_status_updated_at,
                "punchout_supplier_name": punchout_supplier_name,
                "punchout_supplier_icon": punchout_supplier_icon,
                "punchout_vendor_reference": punchout_vendor_reference,
                "has_blanket_order_items": has_blanket_order_items,
                "expiry_date": expiry_date,
            }
    
    number: MetaOapg.properties.number
    purchased_currency: 'SimpleCurrency'
    total: MetaOapg.properties.total
    promise_date: MetaOapg.properties.promise_date
    total_amount: MetaOapg.properties.total_amount
    purchaser: 'SimpleUser'
    subtotal: MetaOapg.properties.subtotal
    id: MetaOapg.properties.id
    pref_vendor: 'SimpleVendor'
    uuid: MetaOapg.properties.uuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pref_vendor"]) -> 'SimpleVendor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promise_date"]) -> MetaOapg.properties.promise_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchased_currency"]) -> 'SimpleCurrency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaser"]) -> 'SimpleUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtotal"]) -> MetaOapg.properties.subtotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_amount"]) -> MetaOapg.properties.total_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PO_Num"]) -> MetaOapg.properties.PO_Num: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount"]) -> 'PriceModifierDocs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freight"]) -> MetaOapg.properties.freight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fulfilment_status"]) -> 'FulfilmentStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_count"]) -> MetaOapg.properties.item_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["procurify_PO"]) -> MetaOapg.properties.procurify_PO: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_system"]) -> MetaOapg.properties.punchout_system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_agreement"]) -> MetaOapg.properties.purchase_agreement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_agreement_status"]) -> 'ExpenseTypeEnumNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchased_currency_rate"]) -> MetaOapg.properties.purchased_currency_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_items_rejected"]) -> MetaOapg.properties.punchout_items_rejected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_status"]) -> MetaOapg.properties.email_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_status_updated_at"]) -> MetaOapg.properties.email_status_updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_name"]) -> MetaOapg.properties.punchout_supplier_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_supplier_icon"]) -> MetaOapg.properties.punchout_supplier_icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punchout_vendor_reference"]) -> MetaOapg.properties.punchout_vendor_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_blanket_order_items"]) -> MetaOapg.properties.has_blanket_order_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiry_date"]) -> MetaOapg.properties.expiry_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "number", "pref_vendor", "promise_date", "purchased_currency", "purchaser", "subtotal", "total", "uuid", "total_amount", "version", "PO_Num", "date", "discount", "freight", "fulfilment_status", "item_count", "last_modified", "other", "procurify_PO", "punchout_system", "purchase_agreement", "purchase_agreement_status", "purchased_currency_rate", "state", "punchout_items_rejected", "currency", "email_status", "email_status_updated_at", "punchout_supplier_name", "punchout_supplier_icon", "punchout_vendor_reference", "has_blanket_order_items", "expiry_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pref_vendor"]) -> 'SimpleVendor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promise_date"]) -> MetaOapg.properties.promise_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchased_currency"]) -> 'SimpleCurrency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaser"]) -> 'SimpleUser': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtotal"]) -> MetaOapg.properties.subtotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_amount"]) -> MetaOapg.properties.total_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PO_Num"]) -> typing.Union[MetaOapg.properties.PO_Num, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount"]) -> typing.Union['PriceModifierDocs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freight"]) -> typing.Union[MetaOapg.properties.freight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fulfilment_status"]) -> typing.Union['FulfilmentStatusEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_count"]) -> typing.Union[MetaOapg.properties.item_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other"]) -> typing.Union[MetaOapg.properties.other, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["procurify_PO"]) -> typing.Union[MetaOapg.properties.procurify_PO, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_system"]) -> typing.Union[MetaOapg.properties.punchout_system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_agreement"]) -> typing.Union[MetaOapg.properties.purchase_agreement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_agreement_status"]) -> typing.Union['ExpenseTypeEnumNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchased_currency_rate"]) -> typing.Union[MetaOapg.properties.purchased_currency_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_items_rejected"]) -> typing.Union[MetaOapg.properties.punchout_items_rejected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_status"]) -> typing.Union[MetaOapg.properties.email_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_status_updated_at"]) -> typing.Union[MetaOapg.properties.email_status_updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_name"]) -> typing.Union[MetaOapg.properties.punchout_supplier_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_supplier_icon"]) -> typing.Union[MetaOapg.properties.punchout_supplier_icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punchout_vendor_reference"]) -> typing.Union[MetaOapg.properties.punchout_vendor_reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_blanket_order_items"]) -> typing.Union[MetaOapg.properties.has_blanket_order_items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiry_date"]) -> typing.Union[MetaOapg.properties.expiry_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "number", "pref_vendor", "promise_date", "purchased_currency", "purchaser", "subtotal", "total", "uuid", "total_amount", "version", "PO_Num", "date", "discount", "freight", "fulfilment_status", "item_count", "last_modified", "other", "procurify_PO", "punchout_system", "purchase_agreement", "purchase_agreement_status", "purchased_currency_rate", "state", "punchout_items_rejected", "currency", "email_status", "email_status_updated_at", "punchout_supplier_name", "punchout_supplier_icon", "punchout_vendor_reference", "has_blanket_order_items", "expiry_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        number: typing.Union[MetaOapg.properties.number, str, ],
        purchased_currency: 'SimpleCurrency',
        total: typing.Union[MetaOapg.properties.total, str, ],
        promise_date: typing.Union[MetaOapg.properties.promise_date, str, datetime, ],
        total_amount: typing.Union[MetaOapg.properties.total_amount, str, ],
        purchaser: 'SimpleUser',
        subtotal: typing.Union[MetaOapg.properties.subtotal, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        pref_vendor: 'SimpleVendor',
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PO_Num: typing.Union[MetaOapg.properties.PO_Num, None, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, datetime, schemas.Unset] = schemas.unset,
        discount: typing.Union['PriceModifierDocs', schemas.Unset] = schemas.unset,
        freight: typing.Union[MetaOapg.properties.freight, None, str, schemas.Unset] = schemas.unset,
        fulfilment_status: typing.Union['FulfilmentStatusEnum', schemas.Unset] = schemas.unset,
        item_count: typing.Union[MetaOapg.properties.item_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, datetime, schemas.Unset] = schemas.unset,
        other: typing.Union[MetaOapg.properties.other, None, str, schemas.Unset] = schemas.unset,
        procurify_PO: typing.Union[MetaOapg.properties.procurify_PO, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        punchout_system: typing.Union[MetaOapg.properties.punchout_system, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchase_agreement: typing.Union[MetaOapg.properties.purchase_agreement, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchase_agreement_status: typing.Union['ExpenseTypeEnumNullable', schemas.Unset] = schemas.unset,
        purchased_currency_rate: typing.Union[MetaOapg.properties.purchased_currency_rate, None, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        punchout_items_rejected: typing.Union[MetaOapg.properties.punchout_items_rejected, bool, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        email_status: typing.Union[MetaOapg.properties.email_status, None, str, schemas.Unset] = schemas.unset,
        email_status_updated_at: typing.Union[MetaOapg.properties.email_status_updated_at, None, str, datetime, schemas.Unset] = schemas.unset,
        punchout_supplier_name: typing.Union[MetaOapg.properties.punchout_supplier_name, None, str, schemas.Unset] = schemas.unset,
        punchout_supplier_icon: typing.Union[MetaOapg.properties.punchout_supplier_icon, None, str, schemas.Unset] = schemas.unset,
        punchout_vendor_reference: typing.Union[MetaOapg.properties.punchout_vendor_reference, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        has_blanket_order_items: typing.Union[MetaOapg.properties.has_blanket_order_items, bool, schemas.Unset] = schemas.unset,
        expiry_date: typing.Union[MetaOapg.properties.expiry_date, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PurchaseOrderReadDocs':
        return super().__new__(
            cls,
            *args,
            number=number,
            purchased_currency=purchased_currency,
            total=total,
            promise_date=promise_date,
            total_amount=total_amount,
            purchaser=purchaser,
            subtotal=subtotal,
            id=id,
            pref_vendor=pref_vendor,
            uuid=uuid,
            version=version,
            PO_Num=PO_Num,
            date=date,
            discount=discount,
            freight=freight,
            fulfilment_status=fulfilment_status,
            item_count=item_count,
            last_modified=last_modified,
            other=other,
            procurify_PO=procurify_PO,
            punchout_system=punchout_system,
            purchase_agreement=purchase_agreement,
            purchase_agreement_status=purchase_agreement_status,
            purchased_currency_rate=purchased_currency_rate,
            state=state,
            punchout_items_rejected=punchout_items_rejected,
            currency=currency,
            email_status=email_status,
            email_status_updated_at=email_status_updated_at,
            punchout_supplier_name=punchout_supplier_name,
            punchout_supplier_icon=punchout_supplier_icon,
            punchout_vendor_reference=punchout_vendor_reference,
            has_blanket_order_items=has_blanket_order_items,
            expiry_date=expiry_date,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.expense_type_enum_nullable import ExpenseTypeEnumNullable
from procurify_python_sdk.model.fulfilment_status_enum import FulfilmentStatusEnum
from procurify_python_sdk.model.null_enum import NullEnum
from procurify_python_sdk.model.price_modifier_docs import PriceModifierDocs
from procurify_python_sdk.model.purchase_order_state_enum import PurchaseOrderStateEnum
from procurify_python_sdk.model.simple_currency import SimpleCurrency
from procurify_python_sdk.model.simple_user import SimpleUser
from procurify_python_sdk.model.simple_vendor import SimpleVendor
