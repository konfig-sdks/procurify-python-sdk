# coding: utf-8

"""
    Procurify API Documentation

     # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from procurify_python_sdk import schemas  # noqa: F401


class BillRead(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "costs",
            "bill_statuses",
            "vendor",
            "currency",
            "invoice_attachments",
            "items",
            "user",
            "uuid",
        }
        
        class properties:
            uuid = schemas.UUIDSchema
        
            @staticmethod
            def user() -> typing.Type['UserSummary']:
                return UserSummary
        
            @staticmethod
            def vendor() -> typing.Type['VendorRead']:
                return VendorRead
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemReadSerializerV2']:
                        return ItemReadSerializerV2
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemReadSerializerV2'], typing.List['ItemReadSerializerV2']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemReadSerializerV2':
                    return super().__getitem__(i)
            
            
            class costs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BillCostRead']:
                        return BillCostRead
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BillCostRead'], typing.List['BillCostRead']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'costs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BillCostRead':
                    return super().__getitem__(i)
            
            
            class invoice_attachments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Attachment']:
                        return Attachment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Attachment'], typing.List['Attachment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invoice_attachments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Attachment':
                    return super().__getitem__(i)
            
            
            class bill_statuses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BillStatusRead']:
                        return BillStatusRead
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BillStatusRead'], typing.List['BillStatusRead']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bill_statuses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BillStatusRead':
                    return super().__getitem__(i)
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            
            
            class version(
                schemas.Int64Schema
            ):
                pass
            id = schemas.IntSchema
            
            
            class approval_chain(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approval_chain':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def approver() -> typing.Type['ApproverReadNullable']:
                return ApproverReadNullable
            
            
            class comments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Comment']:
                        return Comment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Comment'], typing.List['Comment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Comment':
                    return super().__getitem__(i)
            
            
            class version_choices(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VersionChoicesDocs']:
                        return VersionChoicesDocs
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VersionChoicesDocs'], typing.List['VersionChoicesDocs']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'version_choices':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VersionChoicesDocs':
                    return super().__getitem__(i)
            tax_amount = schemas.Float64Schema
            inclusive_tax_amount = schemas.Float64Schema
            exclusive_tax_amount = schemas.Float64Schema
            subtotal_cost = schemas.Float64Schema
            total_cost = schemas.Float64Schema
            total_cost_with_tax = schemas.Float64Schema
            converted_total_cost = schemas.Float64Schema
            
            
            class next_approver_choices(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApproverRead']:
                        return ApproverRead
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_approver_choices':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            locked = schemas.BoolSchema
        
            @staticmethod
            def bill_payment() -> typing.Type['APBillPaymentDocsNullable']:
                return APBillPaymentDocsNullable
            creditcard = schemas.IntSchema
            creditcard_name = schemas.StrSchema
        
            @staticmethod
            def last_export_user() -> typing.Type['SimpleUserSummary']:
                return SimpleUserSummary
            last_export_date = schemas.DateSchema
            
            
            class vendor_name(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_contact(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_address_one(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_address_two(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_postal_code(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_city(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_state_province(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_country(
                schemas.StrSchema
            ):
                pass
            last_modified_datetime = schemas.DateTimeSchema
            
            
            class submitted_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'submitted_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class invoice_number(
                schemas.StrSchema
            ):
                pass
            
            
            class invoice_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invoice_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class due_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'due_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class payment_terms(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def status() -> typing.Type['BillStatusEnum']:
                return BillStatusEnum
        
            @staticmethod
            def type() -> typing.Type['ZeroOneTwoEnum']:
                return ZeroOneTwoEnum
            active = schemas.BoolSchema
            note = schemas.StrSchema
            
            
            class gl_post_date(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gl_post_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class group(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'group':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class payment_method(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payment_method':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            payment_method_name = schemas.StrSchema
            
            
            class added_purchase_orders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BillPurchaseOrderDocs']:
                        return BillPurchaseOrderDocs
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BillPurchaseOrderDocs'], typing.List['BillPurchaseOrderDocs']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'added_purchase_orders':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BillPurchaseOrderDocs':
                    return super().__getitem__(i)
            shipping_amount = schemas.Float64Schema
            invoice_uuid = schemas.StrSchema
            __annotations__ = {
                "uuid": uuid,
                "user": user,
                "vendor": vendor,
                "items": items,
                "costs": costs,
                "invoice_attachments": invoice_attachments,
                "bill_statuses": bill_statuses,
                "currency": currency,
                "version": version,
                "id": id,
                "approval_chain": approval_chain,
                "approver": approver,
                "comments": comments,
                "version_choices": version_choices,
                "tax_amount": tax_amount,
                "inclusive_tax_amount": inclusive_tax_amount,
                "exclusive_tax_amount": exclusive_tax_amount,
                "subtotal_cost": subtotal_cost,
                "total_cost": total_cost,
                "total_cost_with_tax": total_cost_with_tax,
                "converted_total_cost": converted_total_cost,
                "next_approver_choices": next_approver_choices,
                "locked": locked,
                "bill_payment": bill_payment,
                "creditcard": creditcard,
                "creditcard_name": creditcard_name,
                "last_export_user": last_export_user,
                "last_export_date": last_export_date,
                "vendor_name": vendor_name,
                "vendor_contact": vendor_contact,
                "vendor_address_one": vendor_address_one,
                "vendor_address_two": vendor_address_two,
                "vendor_postal_code": vendor_postal_code,
                "vendor_city": vendor_city,
                "vendor_state_province": vendor_state_province,
                "vendor_country": vendor_country,
                "last_modified_datetime": last_modified_datetime,
                "submitted_date": submitted_date,
                "invoice_number": invoice_number,
                "invoice_date": invoice_date,
                "due_date": due_date,
                "payment_terms": payment_terms,
                "status": status,
                "type": type,
                "active": active,
                "note": note,
                "gl_post_date": gl_post_date,
                "group": group,
                "payment_method": payment_method,
                "payment_method_name": payment_method_name,
                "added_purchase_orders": added_purchase_orders,
                "shipping_amount": shipping_amount,
                "invoice_uuid": invoice_uuid,
            }
    
    costs: MetaOapg.properties.costs
    bill_statuses: MetaOapg.properties.bill_statuses
    vendor: 'VendorRead'
    currency: 'Currency'
    invoice_attachments: MetaOapg.properties.invoice_attachments
    items: MetaOapg.properties.items
    user: 'UserSummary'
    uuid: MetaOapg.properties.uuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'UserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> 'VendorRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costs"]) -> MetaOapg.properties.costs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_attachments"]) -> MetaOapg.properties.invoice_attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_statuses"]) -> MetaOapg.properties.bill_statuses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval_chain"]) -> MetaOapg.properties.approval_chain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approver"]) -> 'ApproverReadNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version_choices"]) -> MetaOapg.properties.version_choices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inclusive_tax_amount"]) -> MetaOapg.properties.inclusive_tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclusive_tax_amount"]) -> MetaOapg.properties.exclusive_tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtotal_cost"]) -> MetaOapg.properties.subtotal_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost"]) -> MetaOapg.properties.total_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_cost_with_tax"]) -> MetaOapg.properties.total_cost_with_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["converted_total_cost"]) -> MetaOapg.properties.converted_total_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_approver_choices"]) -> MetaOapg.properties.next_approver_choices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bill_payment"]) -> 'APBillPaymentDocsNullable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditcard"]) -> MetaOapg.properties.creditcard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditcard_name"]) -> MetaOapg.properties.creditcard_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_export_user"]) -> 'SimpleUserSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_export_date"]) -> MetaOapg.properties.last_export_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_name"]) -> MetaOapg.properties.vendor_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_contact"]) -> MetaOapg.properties.vendor_contact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_address_one"]) -> MetaOapg.properties.vendor_address_one: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_address_two"]) -> MetaOapg.properties.vendor_address_two: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_postal_code"]) -> MetaOapg.properties.vendor_postal_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_city"]) -> MetaOapg.properties.vendor_city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_state_province"]) -> MetaOapg.properties.vendor_state_province: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_country"]) -> MetaOapg.properties.vendor_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified_datetime"]) -> MetaOapg.properties.last_modified_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitted_date"]) -> MetaOapg.properties.submitted_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_number"]) -> MetaOapg.properties.invoice_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_date"]) -> MetaOapg.properties.invoice_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_terms"]) -> MetaOapg.properties.payment_terms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'BillStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ZeroOneTwoEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gl_post_date"]) -> MetaOapg.properties.gl_post_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method"]) -> MetaOapg.properties.payment_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method_name"]) -> MetaOapg.properties.payment_method_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_purchase_orders"]) -> MetaOapg.properties.added_purchase_orders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_amount"]) -> MetaOapg.properties.shipping_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_uuid"]) -> MetaOapg.properties.invoice_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["uuid", "user", "vendor", "items", "costs", "invoice_attachments", "bill_statuses", "currency", "version", "id", "approval_chain", "approver", "comments", "version_choices", "tax_amount", "inclusive_tax_amount", "exclusive_tax_amount", "subtotal_cost", "total_cost", "total_cost_with_tax", "converted_total_cost", "next_approver_choices", "locked", "bill_payment", "creditcard", "creditcard_name", "last_export_user", "last_export_date", "vendor_name", "vendor_contact", "vendor_address_one", "vendor_address_two", "vendor_postal_code", "vendor_city", "vendor_state_province", "vendor_country", "last_modified_datetime", "submitted_date", "invoice_number", "invoice_date", "due_date", "payment_terms", "status", "type", "active", "note", "gl_post_date", "group", "payment_method", "payment_method_name", "added_purchase_orders", "shipping_amount", "invoice_uuid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'UserSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> 'VendorRead': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costs"]) -> MetaOapg.properties.costs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_attachments"]) -> MetaOapg.properties.invoice_attachments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_statuses"]) -> MetaOapg.properties.bill_statuses: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval_chain"]) -> typing.Union[MetaOapg.properties.approval_chain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approver"]) -> typing.Union['ApproverReadNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version_choices"]) -> typing.Union[MetaOapg.properties.version_choices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> typing.Union[MetaOapg.properties.tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inclusive_tax_amount"]) -> typing.Union[MetaOapg.properties.inclusive_tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclusive_tax_amount"]) -> typing.Union[MetaOapg.properties.exclusive_tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtotal_cost"]) -> typing.Union[MetaOapg.properties.subtotal_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost"]) -> typing.Union[MetaOapg.properties.total_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_cost_with_tax"]) -> typing.Union[MetaOapg.properties.total_cost_with_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["converted_total_cost"]) -> typing.Union[MetaOapg.properties.converted_total_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_approver_choices"]) -> typing.Union[MetaOapg.properties.next_approver_choices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> typing.Union[MetaOapg.properties.locked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bill_payment"]) -> typing.Union['APBillPaymentDocsNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditcard"]) -> typing.Union[MetaOapg.properties.creditcard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditcard_name"]) -> typing.Union[MetaOapg.properties.creditcard_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_export_user"]) -> typing.Union['SimpleUserSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_export_date"]) -> typing.Union[MetaOapg.properties.last_export_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_name"]) -> typing.Union[MetaOapg.properties.vendor_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_contact"]) -> typing.Union[MetaOapg.properties.vendor_contact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_address_one"]) -> typing.Union[MetaOapg.properties.vendor_address_one, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_address_two"]) -> typing.Union[MetaOapg.properties.vendor_address_two, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_postal_code"]) -> typing.Union[MetaOapg.properties.vendor_postal_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_city"]) -> typing.Union[MetaOapg.properties.vendor_city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_state_province"]) -> typing.Union[MetaOapg.properties.vendor_state_province, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_country"]) -> typing.Union[MetaOapg.properties.vendor_country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified_datetime"]) -> typing.Union[MetaOapg.properties.last_modified_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitted_date"]) -> typing.Union[MetaOapg.properties.submitted_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_number"]) -> typing.Union[MetaOapg.properties.invoice_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_date"]) -> typing.Union[MetaOapg.properties.invoice_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> typing.Union[MetaOapg.properties.due_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_terms"]) -> typing.Union[MetaOapg.properties.payment_terms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['BillStatusEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['ZeroOneTwoEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gl_post_date"]) -> typing.Union[MetaOapg.properties.gl_post_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method"]) -> typing.Union[MetaOapg.properties.payment_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method_name"]) -> typing.Union[MetaOapg.properties.payment_method_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_purchase_orders"]) -> typing.Union[MetaOapg.properties.added_purchase_orders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_amount"]) -> typing.Union[MetaOapg.properties.shipping_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_uuid"]) -> typing.Union[MetaOapg.properties.invoice_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uuid", "user", "vendor", "items", "costs", "invoice_attachments", "bill_statuses", "currency", "version", "id", "approval_chain", "approver", "comments", "version_choices", "tax_amount", "inclusive_tax_amount", "exclusive_tax_amount", "subtotal_cost", "total_cost", "total_cost_with_tax", "converted_total_cost", "next_approver_choices", "locked", "bill_payment", "creditcard", "creditcard_name", "last_export_user", "last_export_date", "vendor_name", "vendor_contact", "vendor_address_one", "vendor_address_two", "vendor_postal_code", "vendor_city", "vendor_state_province", "vendor_country", "last_modified_datetime", "submitted_date", "invoice_number", "invoice_date", "due_date", "payment_terms", "status", "type", "active", "note", "gl_post_date", "group", "payment_method", "payment_method_name", "added_purchase_orders", "shipping_amount", "invoice_uuid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        costs: typing.Union[MetaOapg.properties.costs, list, tuple, ],
        bill_statuses: typing.Union[MetaOapg.properties.bill_statuses, list, tuple, ],
        vendor: 'VendorRead',
        currency: 'Currency',
        invoice_attachments: typing.Union[MetaOapg.properties.invoice_attachments, list, tuple, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
        user: 'UserSummary',
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        approval_chain: typing.Union[MetaOapg.properties.approval_chain, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        approver: typing.Union['ApproverReadNullable', schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, list, tuple, schemas.Unset] = schemas.unset,
        version_choices: typing.Union[MetaOapg.properties.version_choices, list, tuple, schemas.Unset] = schemas.unset,
        tax_amount: typing.Union[MetaOapg.properties.tax_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        inclusive_tax_amount: typing.Union[MetaOapg.properties.inclusive_tax_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        exclusive_tax_amount: typing.Union[MetaOapg.properties.exclusive_tax_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        subtotal_cost: typing.Union[MetaOapg.properties.subtotal_cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        total_cost: typing.Union[MetaOapg.properties.total_cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        total_cost_with_tax: typing.Union[MetaOapg.properties.total_cost_with_tax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        converted_total_cost: typing.Union[MetaOapg.properties.converted_total_cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        next_approver_choices: typing.Union[MetaOapg.properties.next_approver_choices, list, tuple, None, schemas.Unset] = schemas.unset,
        locked: typing.Union[MetaOapg.properties.locked, bool, schemas.Unset] = schemas.unset,
        bill_payment: typing.Union['APBillPaymentDocsNullable', schemas.Unset] = schemas.unset,
        creditcard: typing.Union[MetaOapg.properties.creditcard, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creditcard_name: typing.Union[MetaOapg.properties.creditcard_name, str, schemas.Unset] = schemas.unset,
        last_export_user: typing.Union['SimpleUserSummary', schemas.Unset] = schemas.unset,
        last_export_date: typing.Union[MetaOapg.properties.last_export_date, str, date, schemas.Unset] = schemas.unset,
        vendor_name: typing.Union[MetaOapg.properties.vendor_name, str, schemas.Unset] = schemas.unset,
        vendor_contact: typing.Union[MetaOapg.properties.vendor_contact, str, schemas.Unset] = schemas.unset,
        vendor_address_one: typing.Union[MetaOapg.properties.vendor_address_one, str, schemas.Unset] = schemas.unset,
        vendor_address_two: typing.Union[MetaOapg.properties.vendor_address_two, str, schemas.Unset] = schemas.unset,
        vendor_postal_code: typing.Union[MetaOapg.properties.vendor_postal_code, str, schemas.Unset] = schemas.unset,
        vendor_city: typing.Union[MetaOapg.properties.vendor_city, str, schemas.Unset] = schemas.unset,
        vendor_state_province: typing.Union[MetaOapg.properties.vendor_state_province, str, schemas.Unset] = schemas.unset,
        vendor_country: typing.Union[MetaOapg.properties.vendor_country, str, schemas.Unset] = schemas.unset,
        last_modified_datetime: typing.Union[MetaOapg.properties.last_modified_datetime, str, datetime, schemas.Unset] = schemas.unset,
        submitted_date: typing.Union[MetaOapg.properties.submitted_date, None, str, datetime, schemas.Unset] = schemas.unset,
        invoice_number: typing.Union[MetaOapg.properties.invoice_number, str, schemas.Unset] = schemas.unset,
        invoice_date: typing.Union[MetaOapg.properties.invoice_date, None, str, datetime, schemas.Unset] = schemas.unset,
        due_date: typing.Union[MetaOapg.properties.due_date, None, str, datetime, schemas.Unset] = schemas.unset,
        payment_terms: typing.Union[MetaOapg.properties.payment_terms, str, schemas.Unset] = schemas.unset,
        status: typing.Union['BillStatusEnum', schemas.Unset] = schemas.unset,
        type: typing.Union['ZeroOneTwoEnum', schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        gl_post_date: typing.Union[MetaOapg.properties.gl_post_date, None, str, datetime, schemas.Unset] = schemas.unset,
        group: typing.Union[MetaOapg.properties.group, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payment_method: typing.Union[MetaOapg.properties.payment_method, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payment_method_name: typing.Union[MetaOapg.properties.payment_method_name, str, schemas.Unset] = schemas.unset,
        added_purchase_orders: typing.Union[MetaOapg.properties.added_purchase_orders, list, tuple, schemas.Unset] = schemas.unset,
        shipping_amount: typing.Union[MetaOapg.properties.shipping_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        invoice_uuid: typing.Union[MetaOapg.properties.invoice_uuid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BillRead':
        return super().__new__(
            cls,
            *args,
            costs=costs,
            bill_statuses=bill_statuses,
            vendor=vendor,
            currency=currency,
            invoice_attachments=invoice_attachments,
            items=items,
            user=user,
            uuid=uuid,
            version=version,
            id=id,
            approval_chain=approval_chain,
            approver=approver,
            comments=comments,
            version_choices=version_choices,
            tax_amount=tax_amount,
            inclusive_tax_amount=inclusive_tax_amount,
            exclusive_tax_amount=exclusive_tax_amount,
            subtotal_cost=subtotal_cost,
            total_cost=total_cost,
            total_cost_with_tax=total_cost_with_tax,
            converted_total_cost=converted_total_cost,
            next_approver_choices=next_approver_choices,
            locked=locked,
            bill_payment=bill_payment,
            creditcard=creditcard,
            creditcard_name=creditcard_name,
            last_export_user=last_export_user,
            last_export_date=last_export_date,
            vendor_name=vendor_name,
            vendor_contact=vendor_contact,
            vendor_address_one=vendor_address_one,
            vendor_address_two=vendor_address_two,
            vendor_postal_code=vendor_postal_code,
            vendor_city=vendor_city,
            vendor_state_province=vendor_state_province,
            vendor_country=vendor_country,
            last_modified_datetime=last_modified_datetime,
            submitted_date=submitted_date,
            invoice_number=invoice_number,
            invoice_date=invoice_date,
            due_date=due_date,
            payment_terms=payment_terms,
            status=status,
            type=type,
            active=active,
            note=note,
            gl_post_date=gl_post_date,
            group=group,
            payment_method=payment_method,
            payment_method_name=payment_method_name,
            added_purchase_orders=added_purchase_orders,
            shipping_amount=shipping_amount,
            invoice_uuid=invoice_uuid,
            _configuration=_configuration,
            **kwargs,
        )

from procurify_python_sdk.model.ap_bill_payment_docs_nullable import APBillPaymentDocsNullable
from procurify_python_sdk.model.approver_read import ApproverRead
from procurify_python_sdk.model.approver_read_nullable import ApproverReadNullable
from procurify_python_sdk.model.attachment import Attachment
from procurify_python_sdk.model.bill_cost_read import BillCostRead
from procurify_python_sdk.model.bill_purchase_order_docs import BillPurchaseOrderDocs
from procurify_python_sdk.model.bill_status_enum import BillStatusEnum
from procurify_python_sdk.model.bill_status_read import BillStatusRead
from procurify_python_sdk.model.comment import Comment
from procurify_python_sdk.model.currency import Currency
from procurify_python_sdk.model.item_read_serializer_v2 import ItemReadSerializerV2
from procurify_python_sdk.model.simple_user_summary import SimpleUserSummary
from procurify_python_sdk.model.user_summary import UserSummary
from procurify_python_sdk.model.vendor_read import VendorRead
from procurify_python_sdk.model.version_choices_docs import VersionChoicesDocs
from procurify_python_sdk.model.zero_one_two_enum import ZeroOneTwoEnum
